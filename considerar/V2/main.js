/**
 * BibliaApp Pro - Main Entry Point
 * Punto de entrada principal de la aplicaci√≥n
 */

// ============================================================================
// IMPORTACIONES Y CONFIGURACI√ìN INICIAL
// ============================================================================

// Verificar soporte de m√≥dulos ES6
const supportsModules = 'noModule' in HTMLScriptElement.prototype;

// Configuraci√≥n global
window.BibliaAppConfig = {
    version: '2.0.0',
    buildDate: new Date().toISOString(),
    environment: 'production',
    debug: false,
    features: {
        serviceWorker: 'serviceWorker' in navigator,
        notifications: 'Notification' in window,
        geolocation: 'geolocation' in navigator,
        localStorage: 'localStorage' in window,
        indexedDB: 'indexedDB' in window
    }
};

// ============================================================================
// DETECCI√ìN DE CARACTER√çSTICAS Y POLYFILLS
// ============================================================================

/**
 * Cargar polyfills necesarios
 */
async function loadPolyfills() {
    const polyfills = [];
    
    // Promise polyfill para navegadores antiguos
    if (!window.Promise) {
        polyfills.push(loadScript('/assets/js/polyfills/promise.min.js'));
    }
    
    // Fetch polyfill
    if (!window.fetch) {
        polyfills.push(loadScript('/assets/js/polyfills/fetch.min.js'));
    }
    
    // IntersectionObserver polyfill
    if (!window.IntersectionObserver) {
        polyfills.push(loadScript('/assets/js/polyfills/intersection-observer.min.js'));
    }
    
    if (polyfills.length > 0) {
        console.log('üîß Cargando polyfills...');\n        await Promise.all(polyfills);\n        console.log('‚úÖ Polyfills cargados');\n    }\n}\n\n/**\n * Cargar script din√°micamente\n */\nfunction loadScript(src) {\n    return new Promise((resolve, reject) => {\n        const script = document.createElement('script');\n        script.src = src;\n        script.onload = resolve;\n        script.onerror = reject;\n        document.head.appendChild(script);\n    });\n}\n\n/**\n * Cargar hoja de estilos din√°micamente\n */\nfunction loadCSS(href) {\n    return new Promise((resolve, reject) => {\n        const link = document.createElement('link');\n        link.rel = 'stylesheet';\n        link.href = href;\n        link.onload = resolve;\n        link.onerror = reject;\n        document.head.appendChild(link);\n    });\n}\n\n// ============================================================================\n// GESTI√ìN DE ERRORES GLOBAL\n// ============================================================================\n\n/**\n * Configurar manejo global de errores\n */\nfunction setupGlobalErrorHandling() {\n    // Errores de JavaScript\n    window.addEventListener('error', (event) => {\n        console.error('üö® Error JavaScript:', {\n            message: event.message,\n            filename: event.filename,\n            lineno: event.lineno,\n            colno: event.colno,\n            error: event.error\n        });\n        \n        // Enviar a sistema de monitoreo si est√° disponible\n        if (window.App && window.App.analytics) {\n            window.App.analytics.trackError(event.error || new Error(event.message));\n        }\n        \n        // Mostrar mensaje amigable al usuario en producci√≥n\n        if (window.BibliaAppConfig.environment === 'production') {\n            showUserFriendlyError('Ha ocurrido un error inesperado. La aplicaci√≥n continuar√° funcionando.');\n        }\n    });\n    \n    // Promesas rechazadas\n    window.addEventListener('unhandledrejection', (event) => {\n        console.error('üö® Promesa rechazada:', event.reason);\n        \n        if (window.App && window.App.analytics) {\n            window.App.analytics.trackError(new Error('Unhandled Promise Rejection: ' + event.reason));\n        }\n        \n        // Prevenir que se muestre en la consola del navegador\n        event.preventDefault();\n        \n        if (window.BibliaAppConfig.environment === 'production') {\n            showUserFriendlyError('Algunos datos no se pudieron cargar correctamente.');\n        }\n    });\n    \n    // Errores de recursos\n    window.addEventListener('error', (event) => {\n        if (event.target !== window) {\n            console.error('üö® Error de recurso:', {\n                element: event.target.tagName,\n                source: event.target.src || event.target.href,\n                message: 'Failed to load resource'\n            });\n        }\n    }, true);\n}\n\n/**\n * Mostrar error amigable al usuario\n */\nfunction showUserFriendlyError(message) {\n    // Crear notificaci√≥n de error si el UI Manager est√° disponible\n    if (window.App && window.App.ui) {\n        window.App.ui.showNotification({\n            type: 'error',\n            title: 'Error',\n            message: message,\n            duration: 5000\n        });\n    } else {\n        // Fallback: mostrar alerta nativa\n        console.warn('Mostrando error con alert (UI Manager no disponible)');\n        alert(message);\n    }\n}\n\n// ============================================================================\n// CARGA PROGRESIVA DE RECURSOS\n// ============================================================================\n\n/**\n * Mostrar pantalla de carga inicial\n */\nfunction showInitialLoader() {\n    const loader = document.getElementById('initial-loader');\n    if (loader) {\n        loader.style.display = 'flex';\n        \n        // Actualizar mensaje de carga\n        const messages = [\n            'Inicializando aplicaci√≥n...',\n            'Cargando datos b√≠blicos...',\n            'Configurando interfaz...',\n            'Preparando herramientas...',\n            'Casi listo...'\n        ];\n        \n        let messageIndex = 0;\n        const messageElement = loader.querySelector('.loading-message');\n        \n        const messageInterval = setInterval(() => {\n            if (messageElement && messageIndex < messages.length) {\n                messageElement.textContent = messages[messageIndex];\n                messageIndex++;\n            } else {\n                clearInterval(messageInterval);\n            }\n        }, 800);\n        \n        // Guardar referencia para poder limpiar despu√©s\n        window.loaderMessageInterval = messageInterval;\n    }\n}\n\n/**\n * Ocultar pantalla de carga inicial\n */\nfunction hideInitialLoader() {\n    const loader = document.getElementById('initial-loader');\n    if (loader) {\n        // Limpiar interval de mensajes\n        if (window.loaderMessageInterval) {\n            clearInterval(window.loaderMessageInterval);\n        }\n        \n        // Animar salida\n        loader.classList.add('fade-out');\n        setTimeout(() => {\n            loader.style.display = 'none';\n            loader.remove(); // Remover del DOM completamente\n        }, 500);\n    }\n}\n\n/**\n * Actualizar progreso de carga\n */\nfunction updateLoadingProgress(progress) {\n    const progressBar = document.querySelector('#initial-loader .progress-fill');\n    if (progressBar) {\n        progressBar.style.width = `${Math.min(100, Math.max(0, progress))}%`;\n    }\n}\n\n// ============================================================================\n// INICIALIZACI√ìN PROGRESIVA\n// ============================================================================\n\n/**\n * Fase 1: Cargar recursos cr√≠ticos\n */\nasync function loadCriticalResources() {\n    console.log('üì¶ Fase 1: Cargando recursos cr√≠ticos...');\n    updateLoadingProgress(20);\n    \n    try {\n        // Cargar CSS cr√≠tico si no est√° inlined\n        const criticalCSS = [\n            '/assets/css/main.css',\n            '/assets/css/components.css'\n        ];\n        \n        for (const css of criticalCSS) {\n            if (!document.querySelector(`link[href=\"${css}\"]`)) {\n                await loadCSS(css);\n            }\n        }\n        \n        console.log('‚úÖ CSS cr√≠tico cargado');\n        updateLoadingProgress(40);\n        \n    } catch (error) {\n        console.error('‚ùå Error cargando recursos cr√≠ticos:', error);\n        throw error;\n    }\n}\n\n/**\n * Fase 2: Inicializar aplicaci√≥n principal\n */\nasync function initializeMainApp() {\n    console.log('üöÄ Fase 2: Inicializando aplicaci√≥n principal...');\n    updateLoadingProgress(60);\n    \n    try {\n        // Verificar que las clases principales est√©n disponibles\n        if (typeof BibliaApp === 'undefined') {\n            throw new Error('BibliaApp class no disponible');\n        }\n        \n        // Crear instancia de la aplicaci√≥n si no existe\n        if (!window.App) {\n            window.App = new BibliaApp();\n        }\n        \n        // Inicializar la aplicaci√≥n\n        await window.App.init();\n        \n        console.log('‚úÖ Aplicaci√≥n principal inicializada');\n        updateLoadingProgress(80);\n        \n    } catch (error) {\n        console.error('‚ùå Error inicializando aplicaci√≥n:', error);\n        throw error;\n    }\n}\n\n/**\n * Fase 3: Cargar recursos adicionales\n */\nasync function loadAdditionalResources() {\n    console.log('üîÑ Fase 3: Cargando recursos adicionales...');\n    updateLoadingProgress(90);\n    \n    try {\n        // Cargar CSS de animaciones si no est√° ya cargado\n        if (!document.querySelector('link[href=\"/assets/css/animations.css\"]')) {\n            loadCSS('/assets/css/animations.css'); // No await - no cr√≠tico\n        }\n        \n        // Precargar recursos seg√∫n las caracter√≠sticas del dispositivo\n        await preloadResourcesByDevice();\n        \n        // Inicializar Service Worker si est√° disponible\n        if (window.BibliaAppConfig.features.serviceWorker) {\n            initializeServiceWorker();\n        }\n        \n        console.log('‚úÖ Recursos adicionales cargados');\n        updateLoadingProgress(100);\n        \n    } catch (error) {\n        console.warn('‚ö†Ô∏è Error cargando recursos adicionales:', error);\n        // No es cr√≠tico, continuar\n    }\n}\n\n/**\n * Precargar recursos seg√∫n el dispositivo\n */\nasync function preloadResourcesByDevice() {\n    const isMobile = window.innerWidth <= 768;\n    const isSlowConnection = navigator.connection && navigator.connection.effectiveType === 'slow-2g';\n    \n    if (!isMobile && !isSlowConnection) {\n        // En desktop y conexiones r√°pidas, precargar m√°s recursos\n        const preloadPromises = [\n            // Precargar im√°genes importantes\n            preloadImage('/assets/images/logo.png'),\n            preloadImage('/assets/images/hero-bg.jpg'),\n            \n            // Precargar fuentes adicionales si no est√°n ya cargadas\n            preloadFont('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700;800&display=swap')\n        ];\n        \n        await Promise.allSettled(preloadPromises);\n    }\n}\n\n/**\n * Precargar imagen\n */\nfunction preloadImage(src) {\n    return new Promise((resolve, reject) => {\n        const img = new Image();\n        img.onload = resolve;\n        img.onerror = reject;\n        img.src = src;\n    });\n}\n\n/**\n * Precargar fuente\n */\nfunction preloadFont(href) {\n    return new Promise((resolve) => {\n        const link = document.createElement('link');\n        link.rel = 'preload';\n        link.as = 'font';\n        link.href = href;\n        link.onload = resolve;\n        link.onerror = resolve; // No es cr√≠tico\n        document.head.appendChild(link);\n    });\n}\n\n// ============================================================================\n// SERVICE WORKER\n// ============================================================================\n\n/**\n * Inicializar Service Worker\n */\nasync function initializeServiceWorker() {\n    try {\n        if ('serviceWorker' in navigator) {\n            const registration = await navigator.serviceWorker.register('/sw.js');\n            \n            console.log('‚úÖ Service Worker registrado:', registration.scope);\n            \n            // Escuchar actualizaciones\n            registration.addEventListener('updatefound', () => {\n                const newWorker = registration.installing;\n                \n                if (newWorker) {\n                    newWorker.addEventListener('statechange', () => {\n                        if (newWorker.state === 'installed' && navigator.serviceWorker.controller) {\n                            // Hay una nueva versi√≥n disponible\n                            showUpdateAvailable();\n                        }\n                    });\n                }\n            });\n        }\n    } catch (error) {\n        console.warn('‚ö†Ô∏è Error registrando Service Worker:', error);\n    }\n}\n\n/**\n * Mostrar notificaci√≥n de actualizaci√≥n disponible\n */\nfunction showUpdateAvailable() {\n    if (window.App && window.App.ui) {\n        window.App.ui.showNotification({\n            type: 'info',\n            title: 'Actualizaci√≥n Disponible',\n            message: 'Hay una nueva versi√≥n de BibliaApp Pro disponible. Recarga la p√°gina para actualizarla.',\n            duration: 10000,\n            actions: [\n                {\n                    text: 'Recargar',\n                    action: () => window.location.reload()\n                },\n                {\n                    text: 'M√°s tarde',\n                    action: () => {} // No hacer nada\n                }\n            ]\n        });\n    }\n}\n\n// ============================================================================\n// OPTIMIZACIONES DE RENDIMIENTO\n// ============================================================================\n\n/**\n * Configurar optimizaciones de rendimiento\n */\nfunction setupPerformanceOptimizations() {\n    // Lazy loading para im√°genes\n    if ('IntersectionObserver' in window) {\n        const imageObserver = new IntersectionObserver((entries, observer) => {\n            entries.forEach(entry => {\n                if (entry.isIntersecting) {\n                    const img = entry.target;\n                    img.src = img.dataset.src;\n                    img.classList.remove('lazy');\n                    observer.unobserve(img);\n                }\n            });\n        });\n        \n        // Observar todas las im√°genes con lazy loading\n        document.querySelectorAll('img[data-src]').forEach(img => {\n            imageObserver.observe(img);\n        });\n    }\n    \n    // Optimizaci√≥n de scroll\n    let scrollTimeout;\n    window.addEventListener('scroll', () => {\n        document.body.classList.add('scrolling');\n        \n        clearTimeout(scrollTimeout);\n        scrollTimeout = setTimeout(() => {\n            document.body.classList.remove('scrolling');\n        }, 100);\n    }, { passive: true });\n    \n    // Optimizaci√≥n de resize\n    let resizeTimeout;\n    window.addEventListener('resize', () => {\n        clearTimeout(resizeTimeout);\n        resizeTimeout = setTimeout(() => {\n            // Reajustar layouts si es necesario\n            if (window.App && window.App.ui) {\n                window.App.ui.recalculateLayouts();\n            }\n        }, 250);\n    });\n}\n\n// ============================================================================\n// FUNCI√ìN PRINCIPAL DE INICIALIZACI√ìN\n// ============================================================================\n\n/**\n * Inicializar toda la aplicaci√≥n\n */\nasync function initializeApp() {\n    try {\n        console.log('üåü Iniciando BibliaApp Pro...');\n        \n        // Mostrar cargador\n        showInitialLoader();\n        \n        // Configurar manejo de errores\n        setupGlobalErrorHandling();\n        \n        // Cargar polyfills si es necesario\n        await loadPolyfills();\n        \n        // Fase 1: Recursos cr√≠ticos\n        await loadCriticalResources();\n        \n        // Fase 2: Aplicaci√≥n principal\n        await initializeMainApp();\n        \n        // Fase 3: Recursos adicionales\n        await loadAdditionalResources();\n        \n        // Configurar optimizaciones\n        setupPerformanceOptimizations();\n        \n        // Ocultar cargador\n        setTimeout(() => {\n            hideInitialLoader();\n            \n            // Mostrar aplicaci√≥n\n            document.body.classList.add('app-loaded');\n            \n            console.log('üéâ BibliaApp Pro cargada completamente!');\n            \n            // Evento de aplicaci√≥n completamente cargada\n            window.dispatchEvent(new CustomEvent('bibliaapp:loaded'));\n            \n        }, 500);\n        \n    } catch (error) {\n        console.error('üí• Error fatal inicializando BibliaApp:', error);\n        \n        // Mostrar mensaje de error al usuario\n        hideInitialLoader();\n        showFatalError(error);\n    }\n}\n\n/**\n * Mostrar error fatal\n */\nfunction showFatalError(error) {\n    const errorContainer = document.createElement('div');\n    errorContainer.className = 'fatal-error';\n    errorContainer.innerHTML = `\n        <div class=\"error-content\">\n            <div class=\"error-icon\">‚ö†Ô∏è</div>\n            <h2>Error de Inicializaci√≥n</h2>\n            <p>Ha ocurrido un error cr√≠tico al cargar BibliaApp Pro.</p>\n            <details>\n                <summary>Detalles t√©cnicos</summary>\n                <pre>${error.message}\\n${error.stack}</pre>\n            </details>\n            <div class=\"error-actions\">\n                <button onclick=\"window.location.reload()\" class=\"btn-retry\">\n                    üîÑ Reintentar\n                </button>\n                <button onclick=\"window.location.href='mailto:soporte@bibliaapp.com?subject=Error de Inicializaci√≥n&body=${encodeURIComponent(error.message)}'\" class=\"btn-support\">\n                    üìß Contactar Soporte\n                </button>\n            </div>\n        </div>\n    `;\n    \n    // Estilos inline para el error\n    errorContainer.style.cssText = `\n        position: fixed;\n        top: 0;\n        left: 0;\n        right: 0;\n        bottom: 0;\n        background: linear-gradient(135deg, #f3f4f6 0%, #e5e7eb 100%);\n        display: flex;\n        align-items: center;\n        justify-content: center;\n        z-index: 10000;\n        font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;\n    `;\n    \n    document.body.appendChild(errorContainer);\n}\n\n// ============================================================================\n// VERIFICACIONES DE COMPATIBILIDAD\n// ============================================================================\n\n/**\n * Verificar compatibilidad del navegador\n */\nfunction checkBrowserCompatibility() {\n    const requiredFeatures = [\n        'localStorage',\n        'JSON',\n        'addEventListener',\n        'querySelector'\n    ];\n    \n    const missingFeatures = requiredFeatures.filter(feature => {\n        return !(feature in window) && !(feature in document);\n    });\n    \n    if (missingFeatures.length > 0) {\n        console.error('‚ùå Navegador no compatible. Caracter√≠sticas faltantes:', missingFeatures);\n        showBrowserNotSupported(missingFeatures);\n        return false;\n    }\n    \n    return true;\n}\n\n/**\n * Mostrar mensaje de navegador no soportado\n */\nfunction showBrowserNotSupported(missingFeatures) {\n    document.body.innerHTML = `\n        <div class=\"browser-not-supported\">\n            <div class=\"message-content\">\n                <div class=\"icon\">üîß</div>\n                <h2>Navegador No Compatible</h2>\n                <p>Tu navegador no soporta todas las caracter√≠sticas necesarias para BibliaApp Pro.</p>\n                <ul>\n                    ${missingFeatures.map(feature => `<li>${feature}</li>`).join('')}\n                </ul>\n                <p>Por favor, actualiza tu navegador o utiliza uno m√°s moderno como:</p>\n                <div class=\"browsers\">\n                    <span>Chrome 80+</span>\n                    <span>Firefox 75+</span>\n                    <span>Safari 13+</span>\n                    <span>Edge 80+</span>\n                </div>\n            </div>\n        </div>\n    `;\n}\n\n// ============================================================================\n// DETECTOR DE CARACTER√çSTICAS AVANZADAS\n// ============================================================================\n\n/**\n * Detectar caracter√≠sticas del dispositivo\n */\nfunction detectDeviceCapabilities() {\n    const capabilities = {\n        // Informaci√≥n del dispositivo\n        isMobile: window.innerWidth <= 768,\n        isTablet: window.innerWidth > 768 && window.innerWidth <= 1024,\n        isDesktop: window.innerWidth > 1024,\n        \n        // Caracter√≠sticas de conectividad\n        isOnline: navigator.onLine,\n        connection: navigator.connection ? {\n            effectiveType: navigator.connection.effectiveType,\n            downlink: navigator.connection.downlink,\n            rtt: navigator.connection.rtt\n        } : null,\n        \n        // Caracter√≠sticas del navegador\n        supportsWebGL: !!window.WebGLRenderingContext,\n        supportsWorkers: !!window.Worker,\n        supportsNotifications: 'Notification' in window,\n        supportsGeolocation: 'geolocation' in navigator,\n        \n        // Memoria y rendimiento\n        deviceMemory: navigator.deviceMemory || 'unknown',\n        hardwareConcurrency: navigator.hardwareConcurrency || 'unknown',\n        \n        // Preferencias del usuario\n        prefersReducedMotion: window.matchMedia('(prefers-reduced-motion: reduce)').matches,\n        prefersDarkMode: window.matchMedia('(prefers-color-scheme: dark)').matches,\n        \n        // Capacidades de entrada\n        hasTouchScreen: 'ontouchstart' in window,\n        hasKeyboard: !('ontouchstart' in window), // Aproximaci√≥n\n        \n        // Storage\n        localStorageAvailable: (() => {\n            try {\n                const test = '__test__';\n                localStorage.setItem(test, test);\n                localStorage.removeItem(test);\n                return true;\n            } catch {\n                return false;\n            }\n        })()\n    };\n    \n    // Guardar capacidades globalmente\n    window.BibliaAppConfig.deviceCapabilities = capabilities;\n    \n    console.log('üì± Capacidades del dispositivo detectadas:', capabilities);\n    \n    return capabilities;\n}\n\n// ============================================================================\n// INICIALIZACI√ìN AUTOM√ÅTICA\n// ============================================================================\n\n/**\n * Auto-inicializar cuando el DOM est√© listo\n */\nfunction autoInitialize() {\n    // Verificar compatibilidad primero\n    if (!checkBrowserCompatibility()) {\n        return;\n    }\n    \n    // Detectar capacidades del dispositivo\n    detectDeviceCapabilities();\n    \n    // Inicializar cuando el DOM est√© listo\n    if (document.readyState === 'loading') {\n        document.addEventListener('DOMContentLoaded', initializeApp);\n    } else {\n        // DOM ya est√° listo\n        setTimeout(initializeApp, 0);\n    }\n}\n\n// ============================================================================\n// EXPOSICI√ìN DE API GLOBAL\n// ============================================================================\n\n// Exponer funciones √∫tiles globalmente para debug y extensibilidad\nwindow.BibliaAppUtils = {\n    initializeApp,\n    loadPolyfills,\n    loadScript,\n    loadCSS,\n    checkBrowserCompatibility,\n    detectDeviceCapabilities,\n    showUserFriendlyError,\n    updateLoadingProgress\n};\n\n// ============================================================================\n// INICIO AUTOM√ÅTICO\n// ============================================================================\n\n// Inicializar autom√°ticamente\nautoInitialize();\n\n// Mensaje de bienvenida en consola\nif (window.BibliaAppConfig.environment === 'production') {\n    console.log('%cüåü BibliaApp Pro v' + window.BibliaAppConfig.version, \n        'color: #4F46E5; font-size: 16px; font-weight: bold;');\n    console.log('%cüìñ Una aplicaci√≥n de formaci√≥n b√≠blica de clase mundial', \n        'color: #6B7280; font-size: 12px;');\n    console.log('%c‚ö†Ô∏è ¬°No pegues c√≥digo aqu√≠! Podr√≠a comprometer tu seguridad.', \n        'color: #DC2626; font-size: 14px; font-weight: bold;');\n} else {\n    console.log('%cüîß BibliaApp Pro - Modo Desarrollo', \n        'color: #F59E0B; font-size: 16px; font-weight: bold;');\n    console.log('Debug mode activado. Variables globales disponibles en window.');\n}\n\n// Exportar para uso en m√≥dulos si es necesario\nif (typeof module !== 'undefined' && module.exports) {\n    module.exports = {\n        initializeApp,\n        BibliaAppConfig: window.BibliaAppConfig,\n        BibliaAppUtils: window.BibliaAppUtils\n    };\n}\n