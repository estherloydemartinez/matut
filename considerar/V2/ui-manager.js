/**
 * BibliaApp Pro - UI Manager
 * Gestor de Interfaz de Usuario de Clase Mundial
 */

class UIManager {
    constructor() {
        this.activeSection = 'inicio';
        this.openModals = [];
        this.notifications = [];
        this.animations = new Map();
        this.shortcuts = new Map();
        
        // Referencias DOM
        this.elements = {};
        
        // Estado UI
        this.sidebarOpen = false;
        this.searchFocused = false;
        this.loading = false;
        
        // Configuración
        this.config = {
            animationDuration: 300,
            notificationDuration: 5000,
            debounceDelay: 300,
            maxNotifications: 5
        };
        
        // Bind methods
        this.init = this.init.bind(this);
        this.handleResize = this.handleResize.bind(this);
        this.handleScroll = this.handleScroll.bind(this);
    }
    
    /**
     * Inicializar UI Manager
     */
    init() {
        console.log('🎨 Inicializando UI Manager...');
        
        // Obtener referencias DOM
        this.cacheDOMReferences();
        
        // Configurar event listeners
        this.setupEventListeners();
        
        // Configurar shortcuts de teclado
        this.setupKeyboardShortcuts();
        
        // Inicializar componentes
        this.initializeComponents();
        
        // Configurar observadores
        this.setupObservers();
        
        // Aplicar tema inicial
        this.applyInitialTheme();
        
        // Mostrar pantalla inicial
        this.showSection('inicio');
        
        console.log('✅ UI Manager inicializado');\n    }
    
    /**
     * Cachear referencias DOM para mejor rendimiento
     */
    cacheDOMReferences() {
        this.elements = {
            // Contenedores principales
            appContainer: document.querySelector('.app-container'),
            mainLayout: document.querySelector('.main-layout'),
            mainContent: document.querySelector('.main-content'),
            
            // Navegación
            sidebar: document.querySelector('.sidebar-hidden'),
            topNav: document.querySelector('.top-nav'),
            menuToggle: document.querySelector('.menu-toggle'),
            sidebarClose: document.querySelector('.sidebar-close'),
            
            // Búsqueda
            searchInput: document.querySelector('.search-input'),
            searchIcon: document.querySelector('.search-icon'),
            
            // Secciones de contenido
            sections: {
                inicio: document.querySelector('#inicio-section'),
                teoria: document.querySelector('#teoria-section'),
                practica: document.querySelector('#practica-section'),
                ajustes: document.querySelector('#ajustes-section')
            },
            
            // Navegación lateral
            navItems: document.querySelectorAll('.nav-item'),
            
            // Botones de acción
            buttons: {
                theory: document.querySelector('.teoria-card'),
                practice: document.querySelector('.practica-card'),
                socialBtns: document.querySelectorAll('.social-btn')
            },
            
            // Modales
            modalOverlay: document.querySelector('.modal-overlay'),
            
            // Notificaciones
            notificationContainer: this.createNotificationContainer(),
            
            // Loading
            loadingOverlay: this.createLoadingOverlay()
        };
    }
    
    /**
     * Configurar event listeners
     */
    setupEventListeners() {
        // Navegación
        if (this.elements.menuToggle) {
            this.elements.menuToggle.addEventListener('click', () => this.toggleSidebar());
        }
        
        if (this.elements.sidebarClose) {
            this.elements.sidebarClose.addEventListener('click', () => this.closeSidebar());
        }
        
        // Items de navegación
        this.elements.navItems.forEach(item => {
            item.addEventListener('click', (e) => {
                e.preventDefault();
                const section = item.dataset.section;\n                if (section) {\n                    this.showSection(section);\n                }\n            });\n        });\n        \n        // Búsqueda\n        if (this.elements.searchInput) {\n            this.elements.searchInput.addEventListener('input', \n                this.debounce(this.handleSearch.bind(this), this.config.debounceDelay)\n            );\n            \n            this.elements.searchInput.addEventListener('focus', () => {\n                this.searchFocused = true;\n                this.elements.searchInput.parentElement.classList.add('focused');\n            });\n            \n            this.elements.searchInput.addEventListener('blur', () => {\n                this.searchFocused = false;\n                this.elements.searchInput.parentElement.classList.remove('focused');\n            });\n        }\n        \n        // Cards de navegación principal\n        if (this.elements.buttons.theory) {\n            this.elements.buttons.theory.addEventListener('click', () => this.showSection('teoria'));\n        }\n        \n        if (this.elements.buttons.practice) {\n            this.elements.buttons.practice.addEventListener('click', () => this.showSection('practica'));\n        }\n        \n        // Botones sociales\n        this.elements.buttons.socialBtns.forEach(btn => {\n            btn.addEventListener('click', (e) => {\n                e.stopPropagation();\n                const context = btn.dataset.context || 'general';\n                this.showSocialModal(context);\n            });\n        });\n        \n        // Eventos del navegador\n        window.addEventListener('resize', this.debounce(this.handleResize, 250));\n        window.addEventListener('scroll', this.debounce(this.handleScroll, 100));\n        \n        // Cerrar sidebar al hacer click fuera\n        document.addEventListener('click', (e) => {\n            if (this.sidebarOpen && \n                !this.elements.sidebar.contains(e.target) && \n                !this.elements.menuToggle.contains(e.target)) {\n                this.closeSidebar();\n            }\n        });\n        \n        // Cerrar modales con ESC\n        document.addEventListener('keydown', (e) => {\n            if (e.key === 'Escape') {\n                this.closeTopModal();\n            }\n        });\n    }\n    \n    /**\n     * Configurar shortcuts de teclado\n     */\n    setupKeyboardShortcuts() {\n        // Mapeo de shortcuts\n        this.shortcuts.set('ctrl+k', () => this.focusSearch());\n        this.shortcuts.set('ctrl+/', () => this.toggleShortcutsHelp());\n        this.shortcuts.set('ctrl+1', () => this.showSection('inicio'));\n        this.shortcuts.set('ctrl+2', () => this.showSection('teoria'));\n        this.shortcuts.set('ctrl+3', () => this.showSection('practica'));\n        this.shortcuts.set('ctrl+4', () => this.showSection('ajustes'));\n        this.shortcuts.set('ctrl+shift+l', () => this.toggleSidebar());\n        \n        // Event listener para shortcuts\n        document.addEventListener('keydown', (e) => {\n            const key = this.getKeyString(e);\n            const action = this.shortcuts.get(key);\n            \n            if (action) {\n                e.preventDefault();\n                action();\n            }\n        });\n    }\n    \n    /**\n     * Obtener string de teclas presionadas\n     */\n    getKeyString(event) {\n        const parts = [];\n        \n        if (event.ctrlKey) parts.push('ctrl');\n        if (event.shiftKey) parts.push('shift');\n        if (event.altKey) parts.push('alt');\n        if (event.metaKey) parts.push('meta');\n        \n        if (event.key && event.key !== 'Control' && event.key !== 'Shift' && \n            event.key !== 'Alt' && event.key !== 'Meta') {\n            parts.push(event.key.toLowerCase());\n        }\n        \n        return parts.join('+');\n    }\n    \n    /**\n     * Inicializar componentes\n     */\n    initializeComponents() {\n        // Inicializar tooltips\n        this.initializeTooltips();\n        \n        // Inicializar progress bars\n        this.initializeProgressBars();\n        \n        // Inicializar dropdowns\n        this.initializeDropdowns();\n        \n        // Inicializar sliders\n        this.initializeSliders();\n        \n        // Inicializar lazy loading\n        this.initializeLazyLoading();\n    }\n    \n    /**\n     * Configurar observadores\n     */\n    setupObservers() {\n        // Intersection Observer para animaciones de scroll\n        this.scrollObserver = new IntersectionObserver(\n            (entries) => {\n                entries.forEach(entry => {\n                    if (entry.isIntersecting) {\n                        entry.target.classList.add('in-view');\n                    }\n                });\n            },\n            { threshold: 0.1, rootMargin: '50px' }\n        );\n        \n        // Observar elementos con animaciones de scroll\n        document.querySelectorAll('.scroll-animate').forEach(el => {\n            this.scrollObserver.observe(el);\n        });\n        \n        // Mutation Observer para elementos dinámicos\n        this.mutationObserver = new MutationObserver((mutations) => {\n            mutations.forEach(mutation => {\n                mutation.addedNodes.forEach(node => {\n                    if (node.nodeType === Node.ELEMENT_NODE) {\n                        // Re-aplicar observadores a nuevos elementos\n                        if (node.classList.contains('scroll-animate')) {\n                            this.scrollObserver.observe(node);\n                        }\n                        \n                        // Inicializar componentes en nuevos elementos\n                        this.initializeNodeComponents(node);\n                    }\n                });\n            });\n        });\n        \n        this.mutationObserver.observe(document.body, {\n            childList: true,\n            subtree: true\n        });\n    }\n    \n    /**\n     * Mostrar sección\n     */\n    showSection(sectionName) {\n        const previousSection = this.activeSection;\n        \n        // Validar sección\n        if (!this.elements.sections[sectionName]) {\n            console.warn(`Sección no encontrada: ${sectionName}`);\n            return;\n        }\n        \n        // Ocultar sección actual\n        if (this.elements.sections[this.activeSection]) {\n            this.elements.sections[this.activeSection].classList.remove('active');\n        }\n        \n        // Mostrar nueva sección\n        this.elements.sections[sectionName].classList.add('active');\n        \n        // Actualizar navegación activa\n        this.updateActiveNavigation(sectionName);\n        \n        // Actualizar estado\n        this.activeSection = sectionName;\n        \n        // Scroll al inicio\n        this.elements.mainContent.scrollTop = 0;\n        \n        // Cerrar sidebar en móvil\n        if (window.innerWidth <= 768) {\n            this.closeSidebar();\n        }\n        \n        // Emitir evento\n        window.App.emit('section:change', {\n            section: sectionName,\n            previousSection: previousSection\n        });\n        \n        // Analytics\n        this.trackSectionView(sectionName);\n        \n        // Cargar datos específicos de la sección\n        this.loadSectionContent(sectionName);\n    }\n    \n    /**\n     * Actualizar navegación activa\n     */\n    updateActiveNavigation(sectionName) {\n        // Remover activo de todos los items\n        this.elements.navItems.forEach(item => {\n            item.classList.remove('active');\n        });\n        \n        // Activar item correspondiente\n        const activeItem = document.querySelector(`[data-section=\"${sectionName}\"]`);\n        if (activeItem) {\n            activeItem.classList.add('active');\n        }\n    }\n    \n    /**\n     * Cargar contenido específico de sección\n     */\n    async loadSectionContent(sectionName) {\n        try {\n            switch (sectionName) {\n                case 'teoria':\n                    await this.loadTheoryContent();\n                    break;\n                case 'practica':\n                    await this.loadPracticeContent();\n                    break;\n                case 'social':\n                    await this.loadSocialContent();\n                    break;\n                case 'ajustes':\n                    await this.loadSettingsContent();\n                    break;\n            }\n        } catch (error) {\n            console.error(`Error cargando contenido de ${sectionName}:`, error);\n            this.showErrorMessage(`Error cargando contenido de ${sectionName}`);\n        }\n    }\n    \n    /**\n     * Cargar contenido de teoría\n     */\n    async loadTheoryContent() {\n        const theorySection = this.elements.sections.teoria;\n        if (!theorySection.dataset.loaded) {\n            // Mostrar loading\n            this.showSectionLoading(theorySection);\n            \n            // Simular carga de contenido\n            await this.delay(500);\n            \n            // Crear contenido de teoría\n            const content = this.createTheoryContent();\n            theorySection.innerHTML = content;\n            \n            // Marcar como cargado\n            theorySection.dataset.loaded = 'true';\n            \n            // Inicializar componentes específicos\n            this.initializeTheoryComponents(theorySection);\n            \n            // Animar entrada\n            this.animateContentEntrance(theorySection);\n        }\n    }\n    \n    /**\n     * Crear contenido de teoría\n     */\n    createTheoryContent() {\n        return `\n            <div class=\"section-header\">\n                <div class=\"section-title\">\n                    <h1>📚 Teoría Bíblica</h1>\n                    <p>Profundiza en el estudio y comprensión de las Escrituras con herramientas avanzadas</p>\n                </div>\n                <div class=\"section-actions\">\n                    <button class=\"btn-primary social-btn\" data-context=\"teoria\">\n                        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"currentColor\">\n                            <path d=\"M16 4V2a2 2 0 0 0-2-2H6a2 2 0 0 0-2 2v2H1a1 1 0 0 0 0 2h1v14a3 3 0 0 0 3 3h10a3 3 0 0 0 3-3V6h1a1 1 0 0 0 0-2h-3zM6 2h8v2H6V2zm10 18a1 1 0 0 1-1 1H5a1 1 0 0 1-1-1V6h12v14z\"/>\n                        </svg>\n                        Social Teoría\n                    </button>\n                    <button class=\"btn-outline\">\n                        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"currentColor\">\n                            <path d=\"M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm-2 15l-5-5 1.41-1.41L10 14.17l7.59-7.59L19 8l-9 9z\"/>\n                        </svg>\n                        Mi Progreso\n                    </button>\n                </div>\n            </div>\n            \n            <div class=\"theory-modules\">\n                <!-- Módulo de Lectura -->\n                <div class=\"module-card lectura-module\">\n                    <div class=\"module-header\">\n                        <div class=\"module-icon\">📖</div>\n                        <h3>Lectura Bíblica</h3>\n                        <p>Dos modalidades de estudio para diferentes niveles de profundidad</p>\n                    </div>\n                    <div class=\"module-content\">\n                        <div class=\"reading-modes\">\n                            <div class=\"mode-card simple-mode\">\n                                <div class=\"mode-header\">\n                                    <div class=\"mode-icon\">🌱</div>\n                                    <h4>Modo Sencillo</h4>\n                                </div>\n                                <div class=\"mode-description\">\n                                    <p>Lectura devocional y comprensión básica de las Escrituras</p>\n                                </div>\n                                <ul class=\"mode-features\">\n                                    <li>Lectura guiada diaria</li>\n                                    <li>Reflexiones sencillas</li>\n                                    <li>Resúmenes por capítulo</li>\n                                    <li>Aplicación práctica</li>\n                                </ul>\n                                <button class=\"mode-action\" data-mode=\"simple\">\n                                    Comenzar Lectura Sencilla\n                                </button>\n                            </div>\n                            \n                            <div class=\"mode-card deep-mode\">\n                                <div class=\"mode-header\">\n                                    <div class=\"mode-icon\">🔬</div>\n                                    <h4>Modo Profundo</h4>\n                                </div>\n                                <div class=\"mode-description\">\n                                    <p>Análisis académico con 50+ herramientas de pensamiento crítico</p>\n                                </div>\n                                <ul class=\"mode-features\">\n                                    <li>Herramientas hermenéuticas</li>\n                                    <li>Análisis lingüístico</li>\n                                    <li>Contexto histórico</li>\n                                    <li>Visualizaciones avanzadas</li>\n                                    <li>Integración filosófica</li>\n                                </ul>\n                                <button class=\"mode-action premium\" data-mode=\"deep\">\n                                    Acceder a Herramientas Pro\n                                    <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"currentColor\">\n                                        <path d=\"M7 10l5 5 5-5z\"/>\n                                    </svg>\n                                </button>\n                            </div>\n                        </div>\n                        \n                        <div class=\"tools-preview\">\n                            <h4>🧠 Herramientas de Pensamiento Profundo (50+)</h4>\n                            <div class=\"tools-categories\">\n                                ${this.createToolsCategories()}\n                            </div>\n                        </div>\n                    </div>\n                </div>\n                \n                <!-- Módulo de Memorización -->\n                <div class=\"module-card memoria-module\">\n                    <div class=\"module-header\">\n                        <div class=\"module-icon\">🧠</div>\n                        <h3>Memorización Bíblica</h3>\n                        <p>Técnicas científicamente probadas para memorizar las Escrituras</p>\n                    </div>\n                    <div class=\"module-content\">\n                        <div class=\"memory-techniques\">\n                            <div class=\"technique-card\">\n                                <h4>📚 Repetición Espaciada</h4>\n                                <p>Sistema basado en algoritmos de memoria para optimizar la retención</p>\n                                <div class=\"technique-stats\">\n                                    <span class=\"stat\">98% efectividad</span>\n                                    <span class=\"stat\">147 versículos</span>\n                                </div>\n                            </div>\n                            <div class=\"technique-card\">\n                                <h4>🎵 Método Musical</h4>\n                                <p>Memorización a través de melodías y ritmos</p>\n                                <div class=\"technique-stats\">\n                                    <span class=\"stat\">95% retención</span>\n                                    <span class=\"stat\">89 versículos</span>\n                                </div>\n                            </div>\n                            <div class=\"technique-card\">\n                                <h4>🖼️ Visualización</h4>\n                                <p>Asociación de versículos con imágenes mentales</p>\n                                <div class=\"technique-stats\">\n                                    <span class=\"stat\">92% efectividad</span>\n                                    <span class=\"stat\">156 versículos</span>\n                                </div>\n                            </div>\n                            <div class=\"technique-card\">\n                                <h4>🔄 Cadenas Narrativas</h4>\n                                <p>Conexión de versículos a través de historias</p>\n                                <div class=\"technique-stats\">\n                                    <span class=\"stat\">88% retención</span>\n                                    <span class=\"stat\">203 versículos</span>\n                                </div>\n                            </div>\n                        </div>\n                        \n                        <div class=\"memory-progress\">\n                            <h4>📈 Tu Progreso de Memorización</h4>\n                            <div class=\"progress-bars\">\n                                <div class=\"progress-bar\">\n                                    <span class=\"progress-label\">Versículos Aprendidos</span>\n                                    <div class=\"progress-track\">\n                                        <div class=\"progress-fill\" style=\"width: 75%\"></div>\n                                    </div>\n                                    <span class=\"progress-value\">156/200</span>\n                                </div>\n                                <div class=\"progress-bar\">\n                                    <span class=\"progress-label\">Retención a 30 días</span>\n                                    <div class=\"progress-track\">\n                                        <div class=\"progress-fill\" style=\"width: 92%\"></div>\n                                    </div>\n                                    <span class=\"progress-value\">92%</span>\n                                </div>\n                                <div class=\"progress-bar\">\n                                    <span class=\"progress-label\">Libros Completados</span>\n                                    <div class=\"progress-track\">\n                                        <div class=\"progress-fill\" style=\"width: 40%\"></div>\n                                    </div>\n                                    <span class=\"progress-value\">6/15</span>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        `;\n    }\n    \n    /**\n     * Crear categorías de herramientas\n     */\n    createToolsCategories() {\n        const categories = [\n            {\n                name: \"Hermenéutica (12 herramientas)\",\n                tools: [\"Análisis Contextual\", \"Método Histórico-Gramatical\", \"Tipología\", \"Alegoría\", \"Exégesis Narrativa\"]\n            },\n            {\n                name: \"Análisis Crítico (8 herramientas)\",\n                tools: [\"Crítica Textual\", \"Crítica de Fuentes\", \"Crítica de Formas\", \"Crítica de Redacción\"]\n            },\n            {\n                name: \"Lingüística (10 herramientas)\",\n                tools: [\"Análisis Semántico\", \"Estructura Sintáctica\", \"Campos Semánticos\", \"Etimología\"]\n            },\n            {\n                name: \"Historia y Arqueología (9 herramientas)\",\n                tools: [\"Contexto Histórico\", \"Geografía Bíblica\", \"Cultura Antigua\", \"Cronología\"]\n            },\n            {\n                name: \"Teología Sistemática (7 herramientas)\",\n                tools: [\"Análisis Doctrinal\", \"Teología Bíblica\", \"Cristología\", \"Pneumatología\"]\n            },\n            {\n                name: \"Visualizaciones Avanzadas (6 herramientas)\",\n                tools: [\"Mapas Conceptuales\", \"Gráficos de Radar\", \"Líneas de Tiempo\", \"Redes Semánticas\"]\n            }\n        ];\n        \n        return categories.map(category => `\n            <div class=\"tool-category\">\n                <h5>${category.name}</h5>\n                <div class=\"tool-list\">\n                    ${category.tools.map(tool => `<span class=\"tool-item\">${tool}</span>`).join('')}\n                </div>\n            </div>\n        `).join('');\n    }\n    \n    /**\n     * Cargar contenido de práctica\n     */\n    async loadPracticeContent() {\n        const practiceSection = this.elements.sections.practica;\n        if (!practiceSection.dataset.loaded) {\n            this.showSectionLoading(practiceSection);\n            await this.delay(500);\n            \n            const content = this.createPracticeContent();\n            practiceSection.innerHTML = content;\n            practiceSection.dataset.loaded = 'true';\n            \n            this.initializePracticeComponents(practiceSection);\n            this.animateContentEntrance(practiceSection);\n        }\n    }\n    \n    /**\n     * Crear contenido de práctica\n     */\n    createPracticeContent() {\n        return `\n            <div class=\"section-header\">\n                <div class=\"section-title\">\n                    <h1>🙏 Práctica Cristiana</h1>\n                    <p>Vive tu fe a través de la oración y acciones transformadoras</p>\n                </div>\n                <div class=\"section-actions\">\n                    <button class=\"btn-secondary social-btn\" data-context=\"practica\">\n                        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"currentColor\">\n                            <path d=\"M16 4V2a2 2 0 0 0-2-2H6a2 2 0 0 0-2 2v2H1a1 1 0 0 0 0 2h1v14a3 3 0 0 0 3 3h10a3 3 0 0 0 3-3V6h1a1 1 0 0 0 0-2h-3z\"/>\n                        </svg>\n                        Social Práctica\n                    </button>\n                    <button class=\"btn-outline\">\n                        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"currentColor\">\n                            <path d=\"M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z\"/>\n                        </svg>\n                        Mis Objetivos\n                    </button>\n                </div>\n            </div>\n            \n            <div class=\"practice-modules\">\n                <!-- Módulo de Oración -->\n                <div class=\"module-card oracion-module\">\n                    <div class=\"module-header\">\n                        <div class=\"module-icon\">🙏</div>\n                        <h3>¿Qué es Orar?</h3>\n                        <p>Descubre y profundiza en el poder transformador de la oración</p>\n                    </div>\n                    <div class=\"module-content\">\n                        <div class=\"prayer-guides\">\n                            <div class=\"guide-card\">\n                                <h4>💫 Oración de Adoración</h4>\n                                <p>Enfócate en la grandeza y gloria de Dios, expresando reverencia y amor</p>\n                                <ul class=\"guide-topics\">\n                                    <li>Atributos de Dios</li>\n                                    <li>Alabanza y exaltación</li>\n                                    <li>Reconocimiento de Su santidad</li>\n                                    <li>Gratitud por Su amor</li>\n                                </ul>\n                                <button class=\"guide-action\" data-prayer-type=\"adoracion\">\n                                    Comenzar Oración de Adoración\n                                </button>\n                            </div>\n                            \n                            <div class=\"guide-card\">\n                                <h4>💔 Oración de Confesión</h4>\n                                <p>Reconoce honestamente tus pecados y recibe el perdón divino</p>\n                                <ul class=\"guide-topics\">\n                                    <li>Examen de conciencia</li>\n                                    <li>Reconocimiento del pecado</li>\n                                    <li>Arrepentimiento genuino</li>\n                                    <li>Recepción del perdón</li>\n                                </ul>\n                                <button class=\"guide-action\" data-prayer-type=\"confesion\">\n                                    Iniciar Oración de Confesión\n                                </button>\n                            </div>\n                            \n                            <div class=\"guide-card\">\n                                <h4>🎁 Oración de Gratitud</h4>\n                                <p>Agradece las bendiciones recibidas y desarrolla un corazón agradecido</p>\n                                <ul class=\"guide-topics\">\n                                    <li>Bendiciones diarias</li>\n                                    <li>Provisión divina</li>\n                                    <li>Respuestas a oraciones</li>\n                                    <li>Lecciones aprendidas</li>\n                                </ul>\n                                <button class=\"guide-action\" data-prayer-type=\"gratitud\">\n                                    Orar con Gratitud\n                                </button>\n                            </div>\n                            \n                            <div class=\"guide-card\">\n                                <h4>🤲 Oración de Petición</h4>\n                                <p>Presenta tus necesidades y las de otros ante el trono de la gracia</p>\n                                <ul class=\"guide-topics\">\n                                    <li>Necesidades personales</li>\n                                    <li>Intercesión por otros</li>\n                                    <li>Sabiduría y dirección</li>\n                                    <li>Peticiones según Su voluntad</li>\n                                </ul>\n                                <button class=\"guide-action\" data-prayer-type=\"peticion\">\n                                    Hacer Peticiones en Oración\n                                </button>\n                            </div>\n                        </div>\n                        \n                        <div class=\"prayer-tools\">\n                            <h4>🛠️ Herramientas de Oración</h4>\n                            <div class=\"tool-grid\">\n                                <div class=\"prayer-tool\" data-tool=\"timer\">\n                                    <div class=\"tool-icon\">⏱️</div>\n                                    <span>Temporizador</span>\n                                </div>\n                                <div class=\"prayer-tool\" data-tool=\"journal\">\n                                    <div class=\"tool-icon\">📔</div>\n                                    <span>Diario</span>\n                                </div>\n                                <div class=\"prayer-tool\" data-tool=\"requests\">\n                                    <div class=\"tool-icon\">📝</div>\n                                    <span>Peticiones</span>\n                                </div>\n                                <div class=\"prayer-tool\" data-tool=\"music\">\n                                    <div class=\"tool-icon\">🎵</div>\n                                    <span>Música</span>\n                                </div>\n                                <div class=\"prayer-tool\" data-tool=\"scriptures\">\n                                    <div class=\"tool-icon\">📖</div>\n                                    <span>Escrituras</span>\n                                </div>\n                                <div class=\"prayer-tool\" data-tool=\"community\">\n                                    <div class=\"tool-icon\">👥</div>\n                                    <span>Comunidad</span>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n                \n                <!-- Módulo de Vida Cristiana -->\n                <div class=\"module-card vida-module\">\n                    <div class=\"module-header\">\n                        <div class=\"module-icon\">💝</div>\n                        <h3>¿Qué es Dar/Vivir?</h3>\n                        <p>Transforma tu vida diaria en un testimonio viviente del amor de Cristo</p>\n                    </div>\n                    <div class=\"module-content\">\n                        <div class=\"life-areas\">\n                            <div class=\"area-card\">\n                                <h4>❤️ Relaciones Interpersonales</h4>\n                                <p>Vive el amor cristiano en tus relaciones familiares, de amistad y laborales</p>\n                                <ul class=\"area-topics\">\n                                    <li>Perdón y reconciliación</li>\n                                    <li>Servicio desinteresado</li>\n                                    <li>Escucha activa y empática</li>\n                                    <li>Resolución de conflictos</li>\n                                </ul>\n                                <button class=\"area-action\" data-area=\"relaciones\">\n                                    Mejorar mis Relaciones\n                                </button>\n                            </div>\n                            \n                            <div class=\"area-card\">\n                                <h4>💼 Vida Laboral y Profesional</h4>\n                                <p>Sé sal y luz en tu entorno laboral y profesional</p>\n                                <ul class=\"area-topics\">\n                                    <li>Integridad y honestidad</li>\n                                    <li>Excelencia en el trabajo</li>\n                                    <li>Testimonio silencioso</li>\n                                    <li>Liderazgo servicial</li>\n                                </ul>\n                                <button class=\"area-action\" data-area=\"trabajo\">\n                                    Transformar mi Trabajo\n                                </button>\n                            </div>\n                            \n                            <div class=\"area-card\">\n                                <h4>🌍 Servicio Comunitario</h4>\n                                <p>Extiende el reino de Dios a través del servicio a tu comunidad</p>\n                                <ul class=\"area-topics\">\n                                    <li>Voluntariado local</li>\n                                    <li>Ayuda a necesitados</li>\n                                    <li>Evangelismo práctico</li>\n                                    <li>Justicia social</li>\n                                </ul>\n                                <button class=\"area-action\" data-area=\"servicio\">\n                                    Servir en mi Comunidad\n                                </button>\n                            </div>\n                            \n                            <div class=\"area-card\">\n                                <h4>💰 Mayordomía y Generosidad</h4>\n                                <p>Administra fielmente los recursos que Dios te ha confiado</p>\n                                <ul class=\"area-topics\">\n                                    <li>Diezmos y ofrendas</li>\n                                    <li>Presupuesto responsable</li>\n                                    <li>Generosidad estratégica</li>\n                                    <li>Inversión en el reino</li>\n                                </ul>\n                                <button class=\"area-action\" data-area=\"mayordomo\">\n                                    Ser Mejor Mayordomo\n                                </button>\n                            </div>\n                        </div>\n                        \n                        <div class=\"action-tracker\">\n                            <h4>📊 Seguimiento de Acciones Cristianas</h4>\n                            <div class=\"tracker-grid\">\n                                <div class=\"tracker-item\">\n                                    <div class=\"tracker-label\">Actos de Servicio esta Semana</div>\n                                    <div class=\"tracker-value\">12</div>\n                                    <div class=\"tracker-progress\">\n                                        <div class=\"progress-bar\">\n                                            <div class=\"progress-track\">\n                                                <div class=\"progress-fill\" style=\"width: 80%\"></div>\n                                            </div>\n                                        </div>\n                                    </div>\n                                </div>\n                                <div class=\"tracker-item\">\n                                    <div class=\"tracker-label\">Horas de Voluntariado</div>\n                                    <div class=\"tracker-value\">6.5h</div>\n                                    <div class=\"tracker-progress\">\n                                        <div class=\"progress-bar\">\n                                            <div class=\"progress-track\">\n                                                <div class=\"progress-fill\" style=\"width: 65%\"></div>\n                                            </div>\n                                        </div>\n                                    </div>\n                                </div>\n                                <div class=\"tracker-item\">\n                                    <div class=\"tracker-label\">Personas Bendecidas</div>\n                                    <div class=\"tracker-value\">23</div>\n                                    <div class=\"tracker-progress\">\n                                        <div class=\"progress-bar\">\n                                            <div class=\"progress-track\">\n                                                <div class=\"progress-fill\" style=\"width: 92%\"></div>\n                                            </div>\n                                        </div>\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        `;\n    }\n    \n    /**\n     * Mostrar loading en sección\n     */\n    showSectionLoading(section) {\n        section.innerHTML = `\n            <div class=\"module-loading\">\n                <div class=\"spinner\"></div>\n                <p>Cargando contenido...</p>\n            </div>\n        `;\n    }\n    \n    /**\n     * Animar entrada de contenido\n     */\n    animateContentEntrance(element) {\n        element.classList.add('animate-fadeInUp');\n        \n        // Animar elementos hijos con delay\n        const children = element.querySelectorAll('.module-card, .widget, .nav-card');\n        children.forEach((child, index) => {\n            child.style.animationDelay = `${index * 100}ms`;\n            child.classList.add('animate-fadeInUp');\n        });\n    }\n    \n    /**\n     * Navegación de sidebar\n     */\n    toggleSidebar() {\n        this.sidebarOpen = !this.sidebarOpen;\n        \n        if (this.sidebarOpen) {\n            this.elements.sidebar.classList.add('open');\n            document.body.style.overflow = 'hidden';\n        } else {\n            this.elements.sidebar.classList.remove('open');\n            document.body.style.overflow = '';\n        }\n    }\n    \n    closeSidebar() {\n        this.sidebarOpen = false;\n        this.elements.sidebar.classList.remove('open');\n        document.body.style.overflow = '';\n    }\n    \n    /**\n     * Búsqueda\n     */\n    focusSearch() {\n        if (this.elements.searchInput) {\n            this.elements.searchInput.focus();\n            this.elements.searchInput.select();\n        }\n    }\n    \n    handleSearch(event) {\n        const query = event.target.value.trim();\n        \n        if (query.length >= 2) {\n            this.performSearch(query);\n        } else {\n            this.clearSearchResults();\n        }\n    }\n    \n    async performSearch(query) {\n        try {\n            // Simular búsqueda\n            const results = await this.searchContent(query);\n            this.showSearchResults(results);\n        } catch (error) {\n            console.error('Error en búsqueda:', error);\n        }\n    }\n    \n    async searchContent(query) {\n        // Simular búsqueda en contenido\n        await this.delay(300);\n        \n        const mockResults = [\n            { type: 'verse', content: 'Juan 3:16 - Porque de tal manera amó Dios al mundo...', section: 'Biblia' },\n            { type: 'tool', content: 'Análisis Hermenéutico', section: 'Teoría' },\n            { type: 'prayer', content: 'Oración de Gratitud', section: 'Práctica' }\n        ];\n        \n        return mockResults.filter(item => \n            item.content.toLowerCase().includes(query.toLowerCase())\n        );\n    }\n    \n    /**\n     * Modales\n     */\n    showModal(config) {\n        const modal = this.createModal(config);\n        document.body.appendChild(modal);\n        \n        // Animar entrada\n        requestAnimationFrame(() => {\n            modal.classList.add('active');\n            modal.querySelector('.modal').classList.add('active');\n        });\n        \n        this.openModals.push(modal);\n        \n        return modal;\n    }\n    \n    createModal(config) {\n        const modal = document.createElement('div');\n        modal.className = 'modal-overlay';\n        modal.innerHTML = `\n            <div class=\"modal\">\n                <div class=\"modal-header\">\n                    <h3>${config.title || 'Modal'}</h3>\n                    <button class=\"modal-close\">×</button>\n                </div>\n                <div class=\"modal-content\">\n                    ${config.content || ''}\n                </div>\n            </div>\n        `;\n        \n        // Event listeners\n        modal.querySelector('.modal-close').addEventListener('click', () => {\n            this.closeModal(modal);\n        });\n        \n        modal.addEventListener('click', (e) => {\n            if (e.target === modal) {\n                this.closeModal(modal);\n            }\n        });\n        \n        return modal;\n    }\n    \n    closeModal(modal) {\n        modal.classList.remove('active');\n        modal.querySelector('.modal').classList.remove('active');\n        \n        setTimeout(() => {\n            if (modal.parentNode) {\n                modal.parentNode.removeChild(modal);\n            }\n            \n            const index = this.openModals.indexOf(modal);\n            if (index > -1) {\n                this.openModals.splice(index, 1);\n            }\n        }, 300);\n    }\n    \n    closeTopModal() {\n        if (this.openModals.length > 0) {\n            const topModal = this.openModals[this.openModals.length - 1];\n            this.closeModal(topModal);\n        }\n    }\n    \n    closeModals() {\n        [...this.openModals].forEach(modal => this.closeModal(modal));\n    }\n    \n    /**\n     * Modal social\n     */\n    showSocialModal(context) {\n        const socialContent = this.createSocialContent(context);\n        \n        this.showModal({\n            title: `🌟 Social ${context.charAt(0).toUpperCase() + context.slice(1)}`,\n            content: socialContent\n        });\n    }\n    \n    createSocialContent(context) {\n        return `\n            <div class=\"social-modal-content\">\n                <div class=\"social-tabs\">\n                    <button class=\"tab-btn active\" data-tab=\"community\">Comunidad</button>\n                    <button class=\"tab-btn\" data-tab=\"groups\">Grupos</button>\n                    <button class=\"tab-btn\" data-tab=\"events\">Eventos</button>\n                    <button class=\"tab-btn\" data-tab=\"share\">Compartir</button>\n                </div>\n                \n                <div class=\"tab-content\">\n                    <div class=\"tab-panel active\" data-panel=\"community\">\n                        <p>Conecta con otros estudiantes de la Biblia...</p>\n                        <!-- Contenido de comunidad -->\n                    </div>\n                    <div class=\"tab-panel\" data-panel=\"groups\">\n                        <p>Únete a grupos de estudio...</p>\n                        <!-- Contenido de grupos -->\n                    </div>\n                    <div class=\"tab-panel\" data-panel=\"events\">\n                        <p>Próximos eventos...</p>\n                        <!-- Contenido de eventos -->\n                    </div>\n                    <div class=\"tab-panel\" data-panel=\"share\">\n                        <p>Comparte tu progreso...</p>\n                        <!-- Contenido de compartir -->\n                    </div>\n                </div>\n            </div>\n        `;\n    }\n    \n    /**\n     * Notificaciones\n     */\n    showNotification(config) {\n        const notification = this.createNotification(config);\n        this.elements.notificationContainer.appendChild(notification);\n        \n        // Animar entrada\n        requestAnimationFrame(() => {\n            notification.classList.add('notification-enter');\n        });\n        \n        // Auto-remover después de duration\n        const duration = config.duration || this.config.notificationDuration;\n        if (duration > 0) {\n            setTimeout(() => {\n                this.removeNotification(notification);\n            }, duration);\n        }\n        \n        // Limpiar notificaciones viejas si hay demasiadas\n        if (this.notifications.length >= this.config.maxNotifications) {\n            this.removeNotification(this.notifications[0]);\n        }\n        \n        this.notifications.push(notification);\n        \n        return notification;\n    }\n    \n    createNotification(config) {\n        const notification = document.createElement('div');\n        notification.className = `notification notification-${config.type || 'info'}`;\n        \n        notification.innerHTML = `\n            <div class=\"notification-icon\">\n                ${this.getNotificationIcon(config.type)}\n            </div>\n            <div class=\"notification-content\">\n                <div class=\"notification-title\">${config.title || ''}</div>\n                <div class=\"notification-message\">${config.message || ''}</div>\n                ${config.actions ? this.createNotificationActions(config.actions) : ''}\n            </div>\n            <button class=\"notification-close\">×</button>\n        `;\n        \n        // Event listener para cerrar\n        notification.querySelector('.notification-close').addEventListener('click', () => {\n            this.removeNotification(notification);\n        });\n        \n        return notification;\n    }\n    \n    removeNotification(notification) {\n        notification.classList.add('notification-exit');\n        \n        setTimeout(() => {\n            if (notification.parentNode) {\n                notification.parentNode.removeChild(notification);\n            }\n            \n            const index = this.notifications.indexOf(notification);\n            if (index > -1) {\n                this.notifications.splice(index, 1);\n            }\n        }, 300);\n    }\n    \n    getNotificationIcon(type) {\n        const icons = {\n            success: '✅',\n            error: '❌',\n            warning: '⚠️',\n            info: 'ℹ️'\n        };\n        \n        return icons[type] || icons.info;\n    }\n    \n    /**\n     * Crear contenedores necesarios\n     */\n    createNotificationContainer() {\n        const container = document.createElement('div');\n        container.className = 'notification-container';\n        container.style.cssText = `\n            position: fixed;\n            top: 80px;\n            right: 20px;\n            z-index: 10000;\n            display: flex;\n            flex-direction: column;\n            gap: 10px;\n            max-width: 400px;\n        `;\n        \n        document.body.appendChild(container);\n        return container;\n    }\n    \n    createLoadingOverlay() {\n        const overlay = document.createElement('div');\n        overlay.className = 'loading-overlay';\n        overlay.style.cssText = `\n            position: fixed;\n            top: 0;\n            left: 0;\n            right: 0;\n            bottom: 0;\n            background: rgba(255, 255, 255, 0.9);\n            backdrop-filter: blur(5px);\n            display: none;\n            align-items: center;\n            justify-content: center;\n            z-index: 9999;\n        `;\n        \n        overlay.innerHTML = `\n            <div class=\"loading-content\">\n                <div class=\"loading-spinner\"></div>\n                <p>Cargando...</p>\n            </div>\n        `;\n        \n        document.body.appendChild(overlay);\n        return overlay;\n    }\n    \n    /**\n     * Loading states\n     */\n    showLoading(message = 'Cargando...') {\n        this.loading = true;\n        this.elements.loadingOverlay.querySelector('p').textContent = message;\n        this.elements.loadingOverlay.style.display = 'flex';\n    }\n    \n    hideLoading() {\n        this.loading = false;\n        this.elements.loadingOverlay.style.display = 'none';\n    }\n    \n    /**\n     * Utilidades\n     */\n    debounce(func, wait) {\n        let timeout;\n        return function executedFunction(...args) {\n            const later = () => {\n                clearTimeout(timeout);\n                func(...args);\n            };\n            clearTimeout(timeout);\n            timeout = setTimeout(later, wait);\n        };\n    }\n    \n    delay(ms) {\n        return new Promise(resolve => setTimeout(resolve, ms));\n    }\n    \n    /**\n     * Eventos del navegador\n     */\n    handleResize() {\n        // Ajustar UI según tamaño de pantalla\n        if (window.innerWidth <= 768 && this.sidebarOpen) {\n            this.closeSidebar();\n        }\n        \n        // Re-calcular layouts\n        this.recalculateLayouts();\n    }\n    \n    handleScroll() {\n        // Efectos de scroll\n        const scrollTop = window.pageYOffset || document.documentElement.scrollTop;\n        \n        // Navbar effect\n        if (scrollTop > 100) {\n            this.elements.topNav.classList.add('scrolled');\n        } else {\n            this.elements.topNav.classList.remove('scrolled');\n        }\n    }\n    \n    /**\n     * Inicialización de componentes específicos\n     */\n    initializeTooltips() {\n        // Implementar tooltips\n    }\n    \n    initializeProgressBars() {\n        // Animar progress bars cuando entran en viewport\n    }\n    \n    initializeDropdowns() {\n        // Inicializar dropdowns\n    }\n    \n    initializeSliders() {\n        // Inicializar sliders\n    }\n    \n    initializeLazyLoading() {\n        // Implementar lazy loading para imágenes\n    }\n    \n    initializeNodeComponents(node) {\n        // Inicializar componentes en nodos nuevos\n    }\n    \n    initializeTheoryComponents(section) {\n        // Componentes específicos de teoría\n        const modeButtons = section.querySelectorAll('[data-mode]');\n        modeButtons.forEach(btn => {\n            btn.addEventListener('click', (e) => {\n                const mode = e.target.dataset.mode;\n                this.showReadingMode(mode);\n            });\n        });\n    }\n    \n    initializePracticeComponents(section) {\n        // Componentes específicos de práctica\n        const prayerButtons = section.querySelectorAll('[data-prayer-type]');\n        prayerButtons.forEach(btn => {\n            btn.addEventListener('click', (e) => {\n                const type = e.target.dataset.prayerType;\n                this.startPrayerSession(type);\n            });\n        });\n    }\n    \n    /**\n     * Métodos específicos de funcionalidad\n     */\n    showReadingMode(mode) {\n        console.log(`Mostrando modo de lectura: ${mode}`);\n        // Implementar lógica del modo de lectura\n    }\n    \n    startPrayerSession(type) {\n        console.log(`Iniciando sesión de oración: ${type}`);\n        // Implementar lógica de oración\n    }\n    \n    toggleShortcutsHelp() {\n        // Mostrar ayuda de shortcuts\n        this.showModal({\n            title: '⌨️ Atajos de Teclado',\n            content: this.createShortcutsHelp()\n        });\n    }\n    \n    createShortcutsHelp() {\n        return `\n            <div class=\"shortcuts-help\">\n                <div class=\"shortcut-group\">\n                    <h4>Navegación</h4>\n                    <div class=\"shortcut-item\">\n                        <kbd>Ctrl</kbd> + <kbd>1</kbd> <span>Ir a Inicio</span>\n                    </div>\n                    <div class=\"shortcut-item\">\n                        <kbd>Ctrl</kbd> + <kbd>2</kbd> <span>Ir a Teoría</span>\n                    </div>\n                    <div class=\"shortcut-item\">\n                        <kbd>Ctrl</kbd> + <kbd>3</kbd> <span>Ir a Práctica</span>\n                    </div>\n                    <div class=\"shortcut-item\">\n                        <kbd>Ctrl</kbd> + <kbd>4</kbd> <span>Ir a Ajustes</span>\n                    </div>\n                </div>\n                <div class=\"shortcut-group\">\n                    <h4>Utilidades</h4>\n                    <div class=\"shortcut-item\">\n                        <kbd>Ctrl</kbd> + <kbd>K</kbd> <span>Buscar</span>\n                    </div>\n                    <div class=\"shortcut-item\">\n                        <kbd>Ctrl</kbd> + <kbd>S</kbd> <span>Guardar</span>\n                    </div>\n                    <div class=\"shortcut-item\">\n                        <kbd>Esc</kbd> <span>Cerrar modal</span>\n                    </div>\n                </div>\n            </div>\n        `;\n    }\n    \n    /**\n     * Analytics y tracking\n     */\n    trackSectionView(section) {\n        if (window.App && window.App.analytics) {\n            window.App.analytics.trackEvent('navigation', 'section_view', {\n                section: section,\n                timestamp: Date.now()\n            });\n        }\n    }\n    \n    /**\n     * Gestión de errores UI\n     */\n    showErrorMessage(message) {\n        this.showNotification({\n            type: 'error',\n            title: 'Error',\n            message: message,\n            duration: 5000\n        });\n    }\n    \n    /**\n     * Temas y personalización\n     */\n    applyInitialTheme() {\n        const savedTheme = localStorage.getItem('bibliaapp:theme') || 'auto';\n        this.applyTheme(savedTheme);\n    }\n    \n    applyTheme(theme) {\n        document.documentElement.setAttribute('data-theme', theme);\n        \n        if (theme === 'auto') {\n            // Detectar preferencia del sistema\n            const prefersDark = window.matchMedia('(prefers-color-scheme: dark)').matches;\n            document.documentElement.classList.toggle('dark', prefersDark);\n        } else {\n            document.documentElement.classList.toggle('dark', theme === 'dark');\n        }\n    }\n    \n    /**\n     * Efectos y animaciones especiales\n     */\n    showLevelUpCelebration(oldLevel, newLevel) {\n        // Mostrar celebración de subida de nivel\n        const celebration = document.createElement('div');\n        celebration.className = 'level-up-celebration';\n        celebration.innerHTML = `\n            <div class=\"celebration-content\">\n                <div class=\"celebration-icon\">🎉</div>\n                <h2>¡Felicitaciones!</h2>\n                <p>Has subido al nivel ${newLevel}</p>\n                <div class=\"level-badge\">\n                    <span class=\"old-level\">${oldLevel}</span>\n                    <span class=\"arrow\">→</span>\n                    <span class=\"new-level\">${newLevel}</span>\n                </div>\n            </div>\n        `;\n        \n        document.body.appendChild(celebration);\n        \n        // Animar y remover después de 3 segundos\n        setTimeout(() => {\n            celebration.classList.add('celebration-enter');\n        }, 100);\n        \n        setTimeout(() => {\n            celebration.classList.add('celebration-exit');\n            setTimeout(() => {\n                if (celebration.parentNode) {\n                    celebration.parentNode.removeChild(celebration);\n                }\n            }, 500);\n        }, 3000);\n    }\n    \n    showAchievementUnlocked(achievement) {\n        this.showNotification({\n            type: 'success',\n            title: `🏆 Logro Desbloqueado: ${achievement.name}`,\n            message: achievement.description,\n            duration: 8000\n        });\n    }\n    \n    /**\n     * API pública\n     */\n    getCurrentSection() {\n        return this.activeSection;\n    }\n    \n    isSidebarOpen() {\n        return this.sidebarOpen;\n    }\n    \n    isLoading() {\n        return this.loading;\n    }\n    \n    recalculateLayouts() {\n        // Re-calcular layouts cuando sea necesario\n    }\n}\n\n// Exportar para uso global\nif (typeof window !== 'undefined') {\n    window.UIManager = UIManager;\n}\n\nif (typeof module !== 'undefined' && module.exports) {\n    module.exports = UIManager;\n}\n