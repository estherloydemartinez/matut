/* ==========================================================================
   BIBLIAAPP PRO v3.0 - MAIN APPLICATION
   Entry point - coordinates all systems and modules
   ========================================================================== */

import { APP_CONFIG } from './core/constants.js';
import { supportsFeature, isValidUrl } from './core/utils.js';
import storage from './core/storage.js';
import stateManager, { getState, setState, subscribe } from './core/state-manager.js';
import uiManager from './core/ui-manager.js';

// Import modules
import srsSystem from './modules/srs-system.js';
import aguaSystem from './modules/agua-system.js';
import filtersSystem from './modules/filters-system.js';
import bibleDataEnhanced from './modules/bible-data-enhanced.js';
import socialSystemEnhanced from './modules/social-system-enhanced.js';
import analyticalToolsEnhanced from './modules/analytical-tools-enhanced.js';

// ==========================================
// MAIN APPLICATION CLASS
// ==========================================

class BibliaApp {
    constructor() {\n        this.version = APP_CONFIG.version;\n        this.isInitialized = false;\n        this.modules = new Map();\n        this.serviceWorker = null;\n        this.installPrompt = null;\n        \n        this.initializeApp();\n    }\n    \n    /**\n     * Initialize the complete application\n     */\n    async initializeApp() {\n        try {\n            console.log(`🚀 Initializing BibliaApp Pro v${this.version}`);\n            \n            // Show loading state\n            uiManager.showLoading('global', 'Inicializando BibliaApp Pro...');\n            \n            // Check system requirements\n            await this.checkSystemRequirements();\n            \n            // Initialize core systems\n            await this.initializeCoreSystems();\n            \n            // Initialize modules\n            await this.initializeModules();\n            \n            // Setup PWA features\n            await this.setupPWAFeatures();\n            \n            // Setup global event listeners\n            this.setupGlobalEventListeners();\n            \n            // Initialize URL routing\n            this.initializeRouting();\n            \n            // Setup performance monitoring\n            this.setupPerformanceMonitoring();\n            \n            // Mark as initialized\n            this.isInitialized = true;\n            setState('app.initialized', true);\n            \n            // Hide loading\n            uiManager.hideLoading('global');\n            \n            console.log('✅ BibliaApp Pro initialized successfully');\n            \n            // Show welcome message\n            this.showWelcomeMessage();\n            \n        } catch (error) {\n            console.error('❌ Failed to initialize BibliaApp Pro:', error);\n            this.handleInitializationError(error);\n        }\n    }\n    \n    /**\n     * Check system requirements and feature support\n     */\n    async checkSystemRequirements() {\n        console.log('🔍 Checking system requirements...');\n        \n        const requirements = {\n            localStorage: supportsFeature('localStorage'),\n            serviceWorker: supportsFeature('serviceWorker'),\n            indexedDB: supportsFeature('webWorker'),\n            intersectionObserver: supportsFeature('intersectionObserver'),\n            dragAndDrop: supportsFeature('dragAndDrop')\n        };\n        \n        const critical = ['localStorage'];\n        const missing = critical.filter(feature => !requirements[feature]);\n        \n        if (missing.length > 0) {\n            throw new Error(`Critical features not supported: ${missing.join(', ')}`);\n        }\n        \n        // Log supported features\n        console.log('📋 Feature support:', requirements);\n        \n        // Update state with feature support\n        setState('app.features', requirements);\n    }\n    \n    /**\n     * Initialize core systems\n     */\n    async initializeCoreSystems() {\n        console.log('⚙️ Initializing core systems...');\n        \n        // Storage system is already initialized\n        console.log('✅ Storage system ready');\n        \n        // State manager is already initialized\n        console.log('✅ State manager ready');\n        \n        // UI manager is already initialized\n        console.log('✅ UI manager ready');\n        \n        // Load user preferences\n        await this.loadUserPreferences();\n        \n        console.log('✅ Core systems initialized');\n    }\n    \n    /**\n     * Load user preferences and apply them\n     */\n    async loadUserPreferences() {\n        const userSettings = getState('user.settings', {});\n        const preferences = getState('user.profile.preferences', {});\n        \n        // Apply theme\n        if (preferences.theme) {\n            setState('app.theme', preferences.theme);\n        }\n        \n        // Apply language\n        if (preferences.language) {\n            await this.setLanguage(preferences.language);\n        }\n        \n        // Apply other preferences\n        if (preferences.fontSize) {\n            document.documentElement.style.fontSize = this.getFontSizeValue(preferences.fontSize);\n        }\n        \n        console.log('✅ User preferences loaded');\n    }\n    \n    /**\n     * Initialize all modules\n     */\n    async initializeModules() {\n        console.log('📦 Initializing modules...');\n        \n        // Register modules\n        this.modules.set('srs', srsSystem);\n        this.modules.set('agua', aguaSystem);\n        this.modules.set('filters', filtersSystem);\n        \n        // Wait for all modules to initialize\n        const modulePromises = Array.from(this.modules.entries()).map(async ([name, module]) => {\n            try {\n                // Modules are already initialized in their constructors\n                console.log(`✅ ${name} module ready`);\n                return { name, status: 'ready', module };\n            } catch (error) {\n                console.error(`❌ ${name} module failed:`, error);\n                return { name, status: 'error', error };\n            }\n        });\n        \n        const results = await Promise.allSettled(modulePromises);\n        \n        // Log module initialization results\n        results.forEach(result => {\n            if (result.status === 'fulfilled') {\n                const { name, status } = result.value;\n                console.log(`Module ${name}: ${status}`);\n            } else {\n                console.error('Module initialization failed:', result.reason);\n            }\n        });\n        \n        console.log('✅ Modules initialized');\n    }\n    \n    /**\n     * Setup PWA features\n     */\n    async setupPWAFeatures() {\n        console.log('📱 Setting up PWA features...');\n        \n        // Register service worker\n        await this.registerServiceWorker();\n        \n        // Setup install prompt\n        this.setupInstallPrompt();\n        \n        // Setup offline detection\n        this.setupOfflineDetection();\n        \n        // Setup background sync\n        this.setupBackgroundSync();\n        \n        console.log('✅ PWA features setup complete');\n    }\n    \n    /**\n     * Register service worker\n     */\n    async registerServiceWorker() {\n        if (!supportsFeature('serviceWorker')) {\n            console.warn('Service Worker not supported');\n            return;\n        }\n        \n        try {\n            const registration = await navigator.serviceWorker.register('/sw.js');\n            this.serviceWorker = registration;\n            \n            console.log('✅ Service Worker registered');\n            \n            // Listen for updates\n            registration.addEventListener('updatefound', () => {\n                const newWorker = registration.installing;\n                newWorker.addEventListener('statechange', () => {\n                    if (newWorker.state === 'installed' && navigator.serviceWorker.controller) {\n                        this.showUpdateNotification();\n                    }\n                });\n            });\n            \n        } catch (error) {\n            console.warn('Service Worker registration failed:', error);\n        }\n    }\n    \n    /**\n     * Setup install prompt for PWA\n     */\n    setupInstallPrompt() {\n        window.addEventListener('beforeinstallprompt', (e) => {\n            e.preventDefault();\n            this.installPrompt = e;\n            \n            // Show install notification\n            uiManager.showNotification(\n                'BibliaApp Pro puede instalarse como aplicación',\n                'info',\n                {\n                    title: 'Instalar App',\n                    duration: 10000,\n                    actions: [\n                        {\n                            label: 'Instalar',\n                            type: 'primary',\n                            handler: () => this.showInstallPrompt()\n                        },\n                        {\n                            label: 'Más tarde',\n                            type: 'secondary'\n                        }\n                    ]\n                }\n            );\n        });\n        \n        // Handle successful installation\n        window.addEventListener('appinstalled', () => {\n            uiManager.showNotification(\n                '¡BibliaApp Pro instalada correctamente!',\n                'success',\n                { duration: 5000 }\n            );\n            this.installPrompt = null;\n        });\n    }\n    \n    /**\n     * Show install prompt\n     */\n    async showInstallPrompt() {\n        if (!this.installPrompt) return;\n        \n        try {\n            const result = await this.installPrompt.prompt();\n            console.log('Install prompt result:', result.outcome);\n            \n            if (result.outcome === 'accepted') {\n                uiManager.showNotification(\n                    'Instalando BibliaApp Pro...',\n                    'info',\n                    { duration: 3000 }\n                );\n            }\n            \n        } catch (error) {\n            console.error('Install prompt failed:', error);\n        }\n        \n        this.installPrompt = null;\n    }\n    \n    /**\n     * Setup offline detection\n     */\n    setupOfflineDetection() {\n        const updateOnlineStatus = () => {\n            const isOnline = navigator.onLine;\n            setState('ui.connectivity.online', isOnline);\n            \n            if (isOnline) {\n                uiManager.showNotification(\n                    'Conexión restaurada',\n                    'success',\n                    { duration: 2000 }\n                );\n                \n                // Trigger sync\n                storage.flush();\n            } else {\n                uiManager.showNotification(\n                    'Sin conexión - Modo offline activado',\n                    'warning',\n                    { duration: 5000 }\n                );\n            }\n        };\n        \n        window.addEventListener('online', updateOnlineStatus);\n        window.addEventListener('offline', updateOnlineStatus);\n        \n        // Initial status\n        updateOnlineStatus();\n    }\n    \n    /**\n     * Setup background sync\n     */\n    setupBackgroundSync() {\n        if (!this.serviceWorker) return;\n        \n        // Listen for sync events\n        navigator.serviceWorker.ready.then(registration => {\n            if (registration.sync) {\n                // Register background sync\n                registration.sync.register('background-sync');\n                console.log('✅ Background sync registered');\n            }\n        });\n    }\n    \n    /**\n     * Setup global event listeners\n     */\n    setupGlobalEventListeners() {\n        console.log('🎧 Setting up global event listeners...');\n        \n        // Visibility change (tab switching)\n        document.addEventListener('visibilitychange', () => {\n            if (document.hidden) {\n                setState('app.visibility', 'hidden');\n                this.handleAppPause();\n            } else {\n                setState('app.visibility', 'visible');\n                this.handleAppResume();\n            }\n        });\n        \n        // Page unload\n        window.addEventListener('beforeunload', (e) => {\n            this.handleAppUnload();\n        });\n        \n        // Error handling\n        window.addEventListener('error', (e) => {\n            this.handleGlobalError(e.error);\n        });\n        \n        window.addEventListener('unhandledrejection', (e) => {\n            this.handleGlobalError(e.reason);\n        });\n        \n        // Focus management\n        window.addEventListener('focus', () => {\n            setState('app.focused', true);\n        });\n        \n        window.addEventListener('blur', () => {\n            setState('app.focused', false);\n        });\n        \n        console.log('✅ Global event listeners setup');\n    }\n    \n    /**\n     * Initialize URL routing\n     */\n    initializeRouting() {\n        const urlParams = new URLSearchParams(window.location.search);\n        \n        // Get section and subsection from URL\n        const section = urlParams.get('section');\n        const subsection = urlParams.get('subsection');\n        \n        if (section) {\n            setState('app.currentSection', section);\n            uiManager.navigateToSection(section);\n        }\n        \n        if (subsection) {\n            setState('app.currentSubSection', subsection);\n            uiManager.navigateToSubSection(subsection);\n        }\n    }\n    \n    /**\n     * Setup performance monitoring\n     */\n    setupPerformanceMonitoring() {\n        // Monitor loading performance\n        if (window.performance && window.performance.timing) {\n            window.addEventListener('load', () => {\n                setTimeout(() => {\n                    const timing = performance.timing;\n                    const loadTime = timing.loadEventEnd - timing.navigationStart;\n                    \n                    console.log(`📊 Page load time: ${loadTime}ms`);\n                    setState('app.performance.loadTime', loadTime);\n                    \n                    // Log to analytics if available\n                    this.trackPerformance('page_load', loadTime);\n                }, 0);\n            });\n        }\n        \n        // Monitor memory usage\n        if (window.performance && window.performance.memory) {\n            setInterval(() => {\n                const memory = performance.memory;\n                const memoryInfo = {\n                    used: memory.usedJSHeapSize,\n                    total: memory.totalJSHeapSize,\n                    limit: memory.jsHeapSizeLimit\n                };\n                \n                setState('app.performance.memory', memoryInfo);\n                \n                // Warn if memory usage is high\n                const usagePercent = (memory.usedJSHeapSize / memory.jsHeapSizeLimit) * 100;\n                if (usagePercent > 80) {\n                    console.warn(`⚠️ High memory usage: ${usagePercent.toFixed(1)}%`);\n                }\n            }, 30000); // Check every 30 seconds\n        }\n    }\n    \n    // ==========================================\n    // EVENT HANDLERS\n    // ==========================================\n    \n    /**\n     * Handle app pause (tab hidden)\n     */\n    handleAppPause() {\n        console.log('⏸️ App paused');\n        \n        // Save current state\n        stateManager.saveState();\n        \n        // Pause non-critical operations\n        this.pauseBackgroundOperations();\n    }\n    \n    /**\n     * Handle app resume (tab visible)\n     */\n    handleAppResume() {\n        console.log('▶️ App resumed');\n        \n        // Resume operations\n        this.resumeBackgroundOperations();\n        \n        // Check for updates\n        this.checkForUpdates();\n    }\n    \n    /**\n     * Handle app unload\n     */\n    handleAppUnload() {\n        console.log('🚪 App unloading');\n        \n        // Save state\n        stateManager.saveState();\n        \n        // Clean up resources\n        this.cleanup();\n    }\n    \n    /**\n     * Handle global errors\n     * @param {Error} error - Error object\n     */\n    handleGlobalError(error) {\n        console.error('🚨 Global error:', error);\n        \n        // Log error to state\n        const errors = getState('ui.errors', []);\n        errors.push({\n            message: error.message,\n            stack: error.stack,\n            timestamp: Date.now(),\n            url: window.location.href\n        });\n        setState('ui.errors', errors);\n        \n        // Show user-friendly error message\n        if (this.isInitialized) {\n            uiManager.showNotification(\n                'Se ha producido un error inesperado',\n                'error',\n                {\n                    duration: 5000,\n                    actions: [\n                        {\n                            label: 'Recargar',\n                            handler: () => window.location.reload()\n                        }\n                    ]\n                }\n            );\n        }\n    }\n    \n    /**\n     * Handle initialization error\n     * @param {Error} error - Error object\n     */\n    handleInitializationError(error) {\n        setState('app.error', error.message);\n        uiManager.hideLoading('global');\n        \n        // Show critical error screen\n        const errorScreen = document.createElement('div');\n        errorScreen.className = 'fixed inset-0 bg-red-900 text-white flex items-center justify-center z-50';\n        errorScreen.innerHTML = `\n            <div class=\"text-center max-w-md mx-auto p-8\">\n                <h1 class=\"text-3xl font-bold mb-4\">Error de Inicialización</h1>\n                <p class=\"text-lg mb-6\">${error.message}</p>\n                <button onclick=\"window.location.reload()\" \n                        class=\"bg-white text-red-900 px-6 py-3 rounded-lg font-semibold hover:bg-gray-100 transition-colors\">\n                    Reintentar\n                </button>\n            </div>\n        `;\n        \n        document.body.appendChild(errorScreen);\n    }\n    \n    // ==========================================\n    // UTILITY METHODS\n    // ==========================================\n    \n    /**\n     * Show welcome message\n     */\n    showWelcomeMessage() {\n        const isFirstTime = !getState('user.profile.hasVisited', false);\n        \n        if (isFirstTime) {\n            setTimeout(() => {\n                uiManager.showNotification(\n                    '¡Bienvenido a BibliaApp Pro v3.0!',\n                    'success',\n                    {\n                        title: 'Bienvenido',\n                        duration: 8000,\n                        actions: [\n                            {\n                                label: 'Tour de la App',\n                                type: 'primary',\n                                handler: () => this.startAppTour()\n                            },\n                            {\n                                label: 'Comenzar',\n                                type: 'secondary'\n                            }\n                        ]\n                    }\n                );\n                \n                setState('user.profile.hasVisited', true);\n            }, 2000);\n        } else {\n            // Show quick tip for returning users\n            this.showQuickTip();\n        }\n    }\n    \n    /**\n     * Start app tour for new users\n     */\n    startAppTour() {\n        uiManager.showNotification(\n            'Tour de la aplicación estará disponible próximamente',\n            'info',\n            { duration: 3000 }\n        );\n    }\n    \n    /**\n     * Show quick tip for returning users\n     */\n    showQuickTip() {\n        const tips = [\n            'Usa Ctrl+K para buscar rápidamente',\n            'Arrastra elementos en el Sistema Agua para reorganizar',\n            'Haz clic derecho en las herramientas para más opciones',\n            'Las herramientas SRS se adaptan a tu progreso de memorización'\n        ];\n        \n        const randomTip = tips[Math.floor(Math.random() * tips.length)];\n        \n        setTimeout(() => {\n            uiManager.showNotification(\n                randomTip,\n                'info',\n                {\n                    title: '💡 Consejo',\n                    duration: 5000\n                }\n            );\n        }, 3000);\n    }\n    \n    /**\n     * Show update notification\n     */\n    showUpdateNotification() {\n        uiManager.showNotification(\n            'Nueva versión disponible',\n            'info',\n            {\n                title: 'Actualización',\n                persistent: true,\n                actions: [\n                    {\n                        label: 'Actualizar',\n                        type: 'primary',\n                        handler: () => this.updateApp()\n                    },\n                    {\n                        label: 'Más tarde',\n                        type: 'secondary'\n                    }\n                ]\n            }\n        );\n    }\n    \n    /**\n     * Update app\n     */\n    updateApp() {\n        if (this.serviceWorker && this.serviceWorker.waiting) {\n            this.serviceWorker.waiting.postMessage({ type: 'SKIP_WAITING' });\n            window.location.reload();\n        }\n    }\n    \n    /**\n     * Pause background operations\n     */\n    pauseBackgroundOperations() {\n        // Pause non-critical timers and operations\n        setState('app.backgroundOperations', false);\n    }\n    \n    /**\n     * Resume background operations\n     */\n    resumeBackgroundOperations() {\n        setState('app.backgroundOperations', true);\n    }\n    \n    /**\n     * Check for updates\n     */\n    async checkForUpdates() {\n        if (this.serviceWorker) {\n            try {\n                await this.serviceWorker.update();\n            } catch (error) {\n                console.warn('Update check failed:', error);\n            }\n        }\n    }\n    \n    /**\n     * Set application language\n     * @param {string} language - Language code\n     */\n    async setLanguage(language) {\n        setState('user.profile.preferences.language', language);\n        document.documentElement.lang = language;\n        \n        // Load language resources if needed\n        console.log(`🌐 Language set to: ${language}`);\n    }\n    \n    /**\n     * Get font size value\n     * @param {string} size - Size identifier\n     * @returns {string}\n     */\n    getFontSizeValue(size) {\n        const sizes = {\n            small: '14px',\n            medium: '16px',\n            large: '18px',\n            xlarge: '20px'\n        };\n        return sizes[size] || sizes.medium;\n    }\n    \n    /**\n     * Track performance metrics\n     * @param {string} metric - Metric name\n     * @param {number} value - Metric value\n     */\n    trackPerformance(metric, value) {\n        // Log to console for now\n        console.log(`📊 Performance metric - ${metric}: ${value}`);\n        \n        // In a real app, this would send to analytics service\n    }\n    \n    /**\n     * Cleanup resources\n     */\n    cleanup() {\n        // Clear timers\n        // Unregister event listeners\n        // Close connections\n        console.log('🧹 Cleanup completed');\n    }\n    \n    // ==========================================\n    // PUBLIC API METHODS\n    // ==========================================\n    \n    /**\n     * Get application information\n     * @returns {Object}\n     */\n    getInfo() {\n        return {\n            name: APP_CONFIG.name,\n            version: this.version,\n            buildDate: APP_CONFIG.buildDate,\n            isInitialized: this.isInitialized,\n            modules: Array.from(this.modules.keys()),\n            features: getState('app.features', {})\n        };\n    }\n    \n    /**\n     * Get application statistics\n     * @returns {Object}\n     */\n    getStats() {\n        return {\n            app: this.getInfo(),\n            state: stateManager.getStats(),\n            storage: storage.getStorageStats ? storage.getStorageStats() : {},\n            ui: uiManager.getStats(),\n            modules: Object.fromEntries(\n                Array.from(this.modules.entries()).map(([name, module]) => [\n                    name,\n                    module.getStats ? module.getStats() : { available: true }\n                ])\n            )\n        };\n    }\n    \n    /**\n     * Debug application\n     */\n    debug() {\n        console.group('🔧 BibliaApp Pro Debug');\n        console.log('Application info:', this.getInfo());\n        console.log('Statistics:', this.getStats());\n        console.log('Current state:', stateManager.getState());\n        \n        // Debug modules\n        this.modules.forEach((module, name) => {\n            if (module.debug) {\n                console.log(`\\n--- ${name.toUpperCase()} MODULE ---`);\n                module.debug();\n            }\n        });\n        \n        console.groupEnd();\n    }\n    \n    /**\n     * Export application data\n     * @returns {Object}\n     */\n    async exportData() {\n        const data = {\n            app: this.getInfo(),\n            state: stateManager.exportState(),\n            modules: {}\n        };\n        \n        // Export module data\n        for (const [name, module] of this.modules) {\n            if (module.exportData) {\n                data.modules[name] = module.exportData();\n            }\n        }\n        \n        return data;\n    }\n    \n    /**\n     * Import application data\n     * @param {Object} data - Data to import\n     * @returns {boolean}\n     */\n    async importData(data) {\n        try {\n            // Import state\n            if (data.state) {\n                stateManager.importState(data.state);\n            }\n            \n            // Import module data\n            if (data.modules) {\n                for (const [name, moduleData] of Object.entries(data.modules)) {\n                    const module = this.modules.get(name);\n                    if (module && module.importData) {\n                        module.importData(moduleData);\n                    }\n                }\n            }\n            \n            uiManager.showNotification(\n                'Datos importados correctamente',\n                'success',\n                { duration: 3000 }\n            );\n            \n            return true;\n        } catch (error) {\n            console.error('Failed to import data:', error);\n            uiManager.showNotification(\n                'Error al importar datos',\n                'error',\n                { duration: 3000 }\n            );\n            return false;\n        }\n    }\n    \n    /**\n     * Reset application to initial state\n     * @param {boolean} confirm - Whether to show confirmation\n     * @returns {boolean}\n     */\n    reset(confirm = true) {\n        if (confirm && !window.confirm('¿Estás seguro de que quieres restablecer la aplicación? Se perderán todos los datos.')) {\n            return false;\n        }\n        \n        try {\n            // Reset state\n            stateManager.resetState();\n            \n            // Reset modules\n            this.modules.forEach((module, name) => {\n                if (module.reset) {\n                    module.reset(false); // Don't confirm for each module\n                }\n            });\n            \n            // Clear storage\n            storage.clear();\n            \n            uiManager.showNotification(\n                'Aplicación restablecida correctamente',\n                'success',\n                {\n                    duration: 3000,\n                    actions: [\n                        {\n                            label: 'Recargar',\n                            handler: () => window.location.reload()\n                        }\n                    ]\n                }\n            );\n            \n            return true;\n        } catch (error) {\n            console.error('Failed to reset app:', error);\n            uiManager.showNotification(\n                'Error al restablecer la aplicación',\n                'error',\n                { duration: 3000 }\n            );\n            return false;\n        }\n    }\n}\n\n// ==========================================\n// INITIALIZE APPLICATION\n// ==========================================\n\n// Create application instance\nconst app = new BibliaApp();\n\n// Make app available globally for debugging\nwindow.BibliaApp = app;\n\n// Export for modules that need it\nexport default app;\n\n// Log startup\nconsole.log('🎯 BibliaApp Pro v3.0 - Enhanced Bible Study Platform');\nconsole.log('📚 Loaded with advanced SRS, Agua System, and 50+ analytical tools');\nconsole.log('🚀 Ready for deep biblical study and spiritual growth');\n\n// Performance mark\nif (window.performance && window.performance.mark) {\n    performance.mark('bibliaapp-loaded');\n}"