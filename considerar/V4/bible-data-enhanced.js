/* ==========================================================================\n   BIBLIAAPP PRO v3.0 - ENHANCED BIBLE DATA MODULE\n   Advanced Bible text processing with Mantenencia/Aumentancia concepts\n   ========================================================================== */\n\nimport { $, $$, createElement, debounce, deepClone } from '../core/utils.js';\nimport { BIBLE_CONFIG } from '../core/constants.js';\nimport stateManager, { getState, setState, subscribe } from '../core/state-manager.js';\nimport uiManager from '../core/ui-manager.js';\n\n// ==========================================\n// ENHANCED BIBLE DATA CLASS\n// ==========================================\n\nclass BibleDataEnhanced {\n    constructor() {\n        this.currentVerse = null;\n        this.currentBook = null;\n        this.currentChapter = null;\n        this.searchResults = [];\n        this.annotations = new Map();\n        this.crossReferences = new Map();\n        this.analyticalFilters = {\n            mantenencia: [],\n            aumentancia: [],\n            custom: []\n        };\n        this.textAnalysis = {\n            frequency: {},\n            correlations: {},\n            patterns: []\n        };\n        \n        this.isInitialized = false;\n        this.initializeSystem();\n    }\n    \n    /**\n     * Initialize Bible Data System\n     */\n    async initializeSystem() {\n        try {\n            // Load Bible data\n            await this.loadBibleData();\n            \n            // Setup analytical filters\n            this.setupAnalyticalFilters();\n            \n            // Setup reading interface\n            this.setupReadingInterface();\n            \n            // Setup state subscriptions\n            this.setupStateSubscriptions();\n            \n            this.isInitialized = true;\n            console.log('✅ Enhanced Bible Data system initialized');\n            \n        } catch (error) {\n            console.error('Failed to initialize Bible Data system:', error);\n        }\n    }\n    \n    /**\n     * Load Bible data from multiple sources\n     */\n    async loadBibleData() {\n        // Load RV1960 base data\n        const rv1960Data = getState('bible.rv1960', {});\n        \n        // Set default verse if none exists\n        if (!this.currentVerse) {\n            this.setCurrentVerse('Juan', 3, 16);\n        }\n        \n        console.log('📖 Bible data loaded');\n    }\n    \n    /**\n     * Setup analytical filters for Mantenencia and Aumentancia\n     */\n    setupAnalyticalFilters() {\n        // Define Mantenencia filters (Maintenance/Preservation)\n        this.analyticalFilters.mantenencia = [\n            {\n                id: 'mant_preservacion',\n                name: 'Preservación de la Fe',\n                description: 'Textos sobre mantener y preservar la fe',\n                keywords: ['guardar', 'mantener', 'preservar', 'permanecer', 'fiel', 'constante'],\n                color: '#4CAF50',\n                category: 'mantenencia'\n            },\n            {\n                id: 'mant_disciplinas',\n                name: 'Disciplinas Espirituales',\n                description: 'Prácticas regulares de la vida cristiana',\n                keywords: ['orar', 'ayunar', 'leer', 'estudiar', 'meditar', 'adorar'],\n                color: '#2196F3',\n                category: 'mantenencia'\n            },\n            {\n                id: 'mant_caracter',\n                name: 'Formación del Carácter',\n                description: 'Desarrollo y mantenimiento del carácter cristiano',\n                keywords: ['paciencia', 'humildad', 'amor', 'bondad', 'templanza', 'dominio'],\n                color: '#9C27B0',\n                category: 'mantenencia'\n            }\n        ];\n        \n        // Define Aumentancia filters (Growth/Enhancement)\n        this.analyticalFilters.aumentancia = [\n            {\n                id: 'aum_crecimiento',\n                name: 'Crecimiento Espiritual',\n                description: 'Textos sobre crecimiento y madurez espiritual',\n                keywords: ['crecer', 'madurar', 'desarrollar', 'avanzar', 'progresar', 'perfeccionar'],\n                color: '#FF9800',\n                category: 'aumentancia'\n            },\n            {\n                id: 'aum_expansion',\n                name: 'Expansión del Reino',\n                description: 'Misión, evangelismo y expansión del reino de Dios',\n                keywords: ['predicar', 'evangelizar', 'testificar', 'discípulos', 'misión', 'reino'],\n                color: '#F44336',\n                category: 'aumentancia'\n            },\n            {\n                id: 'aum_dones',\n                name: 'Desarrollo de Dones',\n                description: 'Desarrollo y uso de dones espirituales',\n                keywords: ['don', 'talento', 'habilidad', 'ministerio', 'servir', 'edificar'],\n                color: '#795548',\n                category: 'aumentancia'\n            },\n            {\n                id: 'aum_transformacion',\n                name: 'Transformación Personal',\n                description: 'Cambio radical y renovación de la vida',\n                keywords: ['transformar', 'renovar', 'cambiar', 'nuevo', 'regenerar', 'santificar'],\n                color: '#607D8B',\n                category: 'aumentancia'\n            }\n        ];\n        \n        console.log('🔍 Analytical filters configured');\n    }\n    \n    /**\n     * Setup reading interface\n     */\n    setupReadingInterface() {\n        // Setup filter checkboxes functionality\n        const mantenenciaCheckbox = $('input[type=\"checkbox\"] + span:contains(\"Mantenencia\")')?.previousElementSibling;\n        const aumentanciaCheckbox = $('input[type=\"checkbox\"] + span:contains(\"Aumentancia\")')?.previousElementSibling;\n        \n        if (mantenenciaCheckbox) {\n            mantenenciaCheckbox.addEventListener('change', (e) => {\n                this.toggleAnalyticalFilter('mantenencia', e.target.checked);\n            });\n        }\n        \n        if (aumentanciaCheckbox) {\n            aumentanciaCheckbox.addEventListener('change', (e) => {\n                this.toggleAnalyticalFilter('aumentancia', e.target.checked);\n            });\n        }\n        \n        // Update current verse display\n        this.updateVerseDisplay();\n        \n        console.log('📱 Reading interface configured');\n    }\n    \n    /**\n     * Set current verse\n     * @param {string} book - Book name\n     * @param {number} chapter - Chapter number\n     * @param {number} verse - Verse number\n     */\n    setCurrentVerse(book, chapter, verse) {\n        this.currentBook = book;\n        this.currentChapter = chapter;\n        this.currentVerse = verse;\n        \n        setState('bible.current', {\n            book,\n            chapter,\n            verse\n        });\n        \n        this.updateVerseDisplay();\n        this.analyzeCurrentVerse();\n    }\n    \n    /**\n     * Update verse display in UI\n     */\n    updateVerseDisplay() {\n        const verseContainer = $('.border.border-[var(--border-color)].rounded.p-3');\n        if (!verseContainer) return;\n        \n        const reference = `${this.currentBook} ${this.currentChapter}:${this.currentVerse}`;\n        const text = this.getVerseText(this.currentBook, this.currentChapter, this.currentVerse);\n        \n        // Update reference\n        const referenceElement = verseContainer.querySelector('.font-semibold');\n        if (referenceElement) {\n            referenceElement.textContent = `${reference} (RV1960)`;\n        }\n        \n        // Update text with analytical highlighting\n        const textElement = verseContainer.querySelector('.discord-text-secondary');\n        if (textElement) {\n            textElement.innerHTML = this.highlightAnalyticalElements(text);\n        }\n    }\n    \n    /**\n     * Get verse text (placeholder implementation)\n     * @param {string} book - Book name\n     * @param {number} chapter - Chapter number\n     * @param {number} verse - Verse number\n     * @returns {string}\n     */\n    getVerseText(book, chapter, verse) {\n        // Sample verses for demonstration\n        const sampleVerses = {\n            'Juan_3_16': 'Porque de tal manera amó Dios al mundo, que ha dado a su Hijo unigénito, para que todo aquel que en él cree, no se pierda, mas tenga vida eterna.',\n            'Filipenses_4_13': 'Todo lo puedo en Cristo que me fortalece.',\n            'Romanos_8_28': 'Y sabemos que a los que aman a Dios, todas las cosas les ayudan a bien, esto es, a los que conforme a su propósito son llamados.',\n            'Salmos_23_1': 'Jehová es mi pastor; nada me faltará.',\n            'Proverbios_3_5': 'Fíate de Jehová de todo tu corazón, y no te apoyes en tu propia prudencia.'\n        };\n        \n        const key = `${book}_${chapter}_${verse}`;\n        return sampleVerses[key] || 'Porque de tal manera amó Dios al mundo, que ha dado a su Hijo unigénito, para que todo aquel que en él cree, no se pierda, mas tenga vida eterna.';\n    }\n    \n    /**\n     * Highlight analytical elements in text\n     * @param {string} text - Original text\n     * @returns {string} Highlighted text\n     */\n    highlightAnalyticalElements(text) {\n        let highlightedText = text;\n        \n        // Get active filter states\n        const mantenenciaActive = getState('ui.filters.mantenencia', false);\n        const aumentanciaActive = getState('ui.filters.aumentancia', false);\n        \n        // Apply Mantenencia highlighting\n        if (mantenenciaActive) {\n            this.analyticalFilters.mantenencia.forEach(filter => {\n                filter.keywords.forEach(keyword => {\n                    const regex = new RegExp(`\\\\b(${keyword}\\\\w*)\\\\b`, 'gi');\n                    highlightedText = highlightedText.replace(regex, \n                        `<span class=\"inline-block px-1 py-0.5 rounded text-xs font-medium\" style=\"background-color: ${filter.color}20; color: ${filter.color}; border: 1px solid ${filter.color}30;\">$1</span>`\n                    );\n                });\n            });\n        }\n        \n        // Apply Aumentancia highlighting\n        if (aumentanciaActive) {\n            this.analyticalFilters.aumentancia.forEach(filter => {\n                filter.keywords.forEach(keyword => {\n                    const regex = new RegExp(`\\\\b(${keyword}\\\\w*)\\\\b`, 'gi');\n                    highlightedText = highlightedText.replace(regex, \n                        `<span class=\"inline-block px-1 py-0.5 rounded text-xs font-medium\" style=\"background-color: ${filter.color}20; color: ${filter.color}; border: 1px solid ${filter.color}30;\">$1</span>`\n                    );\n                });\n            });\n        }\n        \n        return highlightedText;\n    }\n    \n    /**\n     * Toggle analytical filter\n     * @param {string} filterType - Filter type (mantenencia/aumentancia)\n     * @param {boolean} active - Whether filter is active\n     */\n    toggleAnalyticalFilter(filterType, active) {\n        setState(`ui.filters.${filterType}`, active);\n        this.updateVerseDisplay();\n        \n        // Show notification\n        const filterName = filterType === 'mantenencia' ? 'Mantenencia' : 'Aumentancia';\n        const action = active ? 'activado' : 'desactivado';\n        \n        uiManager.showNotification(\n            `Filtro ${filterName} ${action}`,\n            'info',\n            { duration: 2000 }\n        );\n        \n        // Update analysis\n        this.analyzeCurrentVerse();\n    }\n    \n    /**\n     * Analyze current verse for patterns and insights\n     */\n    analyzeCurrentVerse() {\n        if (!this.currentVerse) return;\n        \n        const text = this.getVerseText(this.currentBook, this.currentChapter, this.currentVerse);\n        const analysis = this.performTextAnalysis(text);\n        \n        // Store analysis results\n        const verseKey = `${this.currentBook}_${this.currentChapter}_${this.currentVerse}`;\n        this.textAnalysis[verseKey] = analysis;\n        \n        // Update state\n        setState('bible.analysis.current', analysis);\n        \n        console.log(`🔍 Analyzed verse: ${verseKey}`, analysis);\n    }\n    \n    /**\n     * Perform comprehensive text analysis\n     * @param {string} text - Text to analyze\n     * @returns {Object} Analysis results\n     */\n    performTextAnalysis(text) {\n        const analysis = {\n            wordCount: 0,\n            characterCount: 0,\n            sentenceCount: 0,\n            keywords: [],\n            themes: [],\n            mantenenciaScore: 0,\n            aumentanciaScore: 0,\n            complexity: 'medium',\n            readability: 0,\n            emotionalTone: 'neutral',\n            literaryDevices: []\n        };\n        \n        // Basic metrics\n        analysis.characterCount = text.length;\n        analysis.wordCount = text.split(/\\s+/).filter(word => word.length > 0).length;\n        analysis.sentenceCount = text.split(/[.!?]+/).filter(sentence => sentence.trim().length > 0).length;\n        \n        // Keyword extraction\n        const words = text.toLowerCase().match(/\\b\\w+\\b/g) || [];\n        const wordFreq = {};\n        words.forEach(word => {\n            if (word.length > 3) { // Exclude very short words\n                wordFreq[word] = (wordFreq[word] || 0) + 1;\n            }\n        });\n        \n        // Get top keywords\n        analysis.keywords = Object.entries(wordFreq)\n            .sort(([,a], [,b]) => b - a)\n            .slice(0, 5)\n            .map(([word, count]) => ({ word, count }));\n        \n        // Analyze for Mantenencia themes\n        analysis.mantenenciaScore = this.calculateThemeScore(text, this.analyticalFilters.mantenencia);\n        \n        // Analyze for Aumentancia themes\n        analysis.aumentanciaScore = this.calculateThemeScore(text, this.analyticalFilters.aumentancia);\n        \n        // Determine primary themes\n        if (analysis.mantenenciaScore > analysis.aumentanciaScore) {\n            analysis.themes.push('Mantenencia');\n        } else if (analysis.aumentanciaScore > analysis.mantenenciaScore) {\n            analysis.themes.push('Aumentancia');\n        } else {\n            analysis.themes.push('Equilibrado');\n        }\n        \n        // Complexity analysis\n        const avgWordsPerSentence = analysis.wordCount / Math.max(analysis.sentenceCount, 1);\n        if (avgWordsPerSentence > 15) {\n            analysis.complexity = 'high';\n        } else if (avgWordsPerSentence < 8) {\n            analysis.complexity = 'low';\n        }\n        \n        // Readability score (simplified Flesch-like)\n        analysis.readability = Math.max(0, Math.min(100, \n            206.835 - (1.015 * avgWordsPerSentence) - (84.6 * (analysis.characterCount / analysis.wordCount))\n        ));\n        \n        // Emotional tone analysis (basic)\n        const positiveWords = ['amor', 'vida', 'eterna', 'bendición', 'gozo', 'paz', 'fortaleza'];\n        const negativeWords = ['muerte', 'pecado', 'perdición', 'ira', 'juicio', 'condenación'];\n        \n        const positiveCount = positiveWords.filter(word => text.toLowerCase().includes(word)).length;\n        const negativeCount = negativeWords.filter(word => text.toLowerCase().includes(word)).length;\n        \n        if (positiveCount > negativeCount) {\n            analysis.emotionalTone = 'positive';\n        } else if (negativeCount > positiveCount) {\n            analysis.emotionalTone = 'negative';\n        }\n        \n        // Literary devices detection\n        if (text.includes('como') || text.includes('cual')) {\n            analysis.literaryDevices.push('símil');\n        }\n        if (text.match(/\\b(\\w+)\\s+\\w+\\s+\\1\\b/)) {\n            analysis.literaryDevices.push('repetición');\n        }\n        if (text.split(',').length > 2) {\n            analysis.literaryDevices.push('enumeración');\n        }\n        \n        return analysis;\n    }\n    \n    /**\n     * Calculate theme score for given filters\n     * @param {string} text - Text to analyze\n     * @param {Array} filters - Filter array\n     * @returns {number} Theme score (0-100)\n     */\n    calculateThemeScore(text, filters) {\n        let totalMatches = 0;\n        let totalKeywords = 0;\n        \n        filters.forEach(filter => {\n            totalKeywords += filter.keywords.length;\n            filter.keywords.forEach(keyword => {\n                const regex = new RegExp(`\\\\b${keyword}\\\\w*\\\\b`, 'gi');\n                const matches = (text.match(regex) || []).length;\n                totalMatches += matches;\n            });\n        });\n        \n        // Calculate percentage score\n        return totalKeywords > 0 ? Math.min(100, (totalMatches / totalKeywords) * 100) : 0;\n    }\n    \n    /**\n     * Search Bible text\n     * @param {string} query - Search query\n     * @param {Object} options - Search options\n     * @returns {Array} Search results\n     */\n    searchBible(query, options = {}) {\n        const {\n            books = [],\n            testament = 'both', // 'old', 'new', 'both'\n            exact = false,\n            includeContext = true,\n            maxResults = 50\n        } = options;\n        \n        // This is a placeholder implementation\n        // In a real app, this would search through the actual Bible database\n        \n        const sampleResults = [\n            {\n                book: 'Juan',\n                chapter: 3,\n                verse: 16,\n                text: 'Porque de tal manera amó Dios al mundo...',\n                relevance: 0.95,\n                context: {\n                    before: 'No envió Dios a su Hijo al mundo para condenar al mundo...',\n                    after: 'El que en él cree, no es condenado...'\n                }\n            },\n            {\n                book: 'Romanos',\n                chapter: 8,\n                verse: 28,\n                text: 'Y sabemos que a los que aman a Dios...',\n                relevance: 0.87,\n                context: {\n                    before: 'Y de igual manera el Espíritu nos ayuda...',\n                    after: 'Porque a los que antes conoció...'\n                }\n            }\n        ];\n        \n        // Filter results based on query\n        const filteredResults = sampleResults.filter(result => \n            result.text.toLowerCase().includes(query.toLowerCase())\n        );\n        \n        this.searchResults = filteredResults;\n        setState('bible.searchResults', filteredResults);\n        \n        return filteredResults;\n    }\n    \n    /**\n     * Get cross-references for current verse\n     * @returns {Array} Cross-references\n     */\n    getCrossReferences() {\n        const verseKey = `${this.currentBook}_${this.currentChapter}_${this.currentVerse}`;\n        \n        // Sample cross-references\n        const sampleReferences = {\n            'Juan_3_16': [\n                { book: 'Romanos', chapter: 5, verse: 8, relation: 'amor de Dios' },\n                { book: '1 Juan', chapter: 4, verse: 9, relation: 'amor manifestado' },\n                { book: 'Juan', chapter: 1, verse: 12, relation: 'creer en él' }\n            ]\n        };\n        \n        return sampleReferences[verseKey] || [];\n    }\n    \n    /**\n     * Add annotation to verse\n     * @param {string} annotation - Annotation text\n     * @param {Object} metadata - Additional metadata\n     */\n    addAnnotation(annotation, metadata = {}) {\n        const verseKey = `${this.currentBook}_${this.currentChapter}_${this.currentVerse}`;\n        \n        if (!this.annotations.has(verseKey)) {\n            this.annotations.set(verseKey, []);\n        }\n        \n        const annotationObj = {\n            id: Date.now().toString(),\n            text: annotation,\n            timestamp: Date.now(),\n            metadata\n        };\n        \n        this.annotations.get(verseKey).push(annotationObj);\n        \n        // Update state\n        setState('bible.annotations', Object.fromEntries(this.annotations));\n        \n        uiManager.showNotification(\n            'Anotación añadida correctamente',\n            'success',\n            { duration: 2000 }\n        );\n    }\n    \n    /**\n     * Get annotations for current verse\n     * @returns {Array} Annotations\n     */\n    getCurrentAnnotations() {\n        const verseKey = `${this.currentBook}_${this.currentChapter}_${this.currentVerse}`;\n        return this.annotations.get(verseKey) || [];\n    }\n    \n    /**\n     * Navigate to specific verse\n     * @param {string} reference - Bible reference (e.g., \"Juan 3:16\")\n     */\n    navigateToVerse(reference) {\n        const match = reference.match(/(\\w+)\\s+(\\d+):(\\d+)/);\n        if (match) {\n            const [, book, chapter, verse] = match;\n            this.setCurrentVerse(book, parseInt(chapter), parseInt(verse));\n        }\n    }\n    \n    /**\n     * Get reading plan progress\n     * @returns {Object} Reading plan data\n     */\n    getReadingPlanProgress() {\n        return getState('bible.readingPlan', {\n            currentDay: 1,\n            totalDays: 365,\n            completedReadings: [],\n            streakDays: 0,\n            plan: 'chronological'\n        });\n    }\n    \n    /**\n     * Mark reading as completed\n     * @param {string} reference - Bible reference\n     */\n    markReadingCompleted(reference) {\n        const readingPlan = this.getReadingPlanProgress();\n        readingPlan.completedReadings.push({\n            reference,\n            timestamp: Date.now()\n        });\n        \n        setState('bible.readingPlan', readingPlan);\n        \n        uiManager.showNotification(\n            `Lectura completada: ${reference}`,\n            'success',\n            { duration: 3000 }\n        );\n    }\n    \n    // ==========================================\n    // STATE MANAGEMENT\n    // ==========================================\n    \n    /**\n     * Setup state subscriptions\n     */\n    setupStateSubscriptions() {\n        // Subscribe to filter changes\n        subscribe('ui.filters', (filters) => {\n            this.updateVerseDisplay();\n        });\n        \n        // Subscribe to current verse changes\n        subscribe('bible.current', (current) => {\n            if (current) {\n                this.setCurrentVerse(current.book, current.chapter, current.verse);\n            }\n        });\n    }\n    \n    // ==========================================\n    // UTILITY METHODS\n    // ==========================================\n    \n    /**\n     * Export Bible data\n     * @returns {Object}\n     */\n    exportData() {\n        return {\n            annotations: Object.fromEntries(this.annotations),\n            crossReferences: Object.fromEntries(this.crossReferences),\n            textAnalysis: this.textAnalysis,\n            readingPlan: this.getReadingPlanProgress(),\n            exported: Date.now()\n        };\n    }\n    \n    /**\n     * Import Bible data\n     * @param {Object} data - Data to import\n     * @returns {boolean}\n     */\n    importData(data) {\n        try {\n            if (data.annotations) {\n                this.annotations = new Map(Object.entries(data.annotations));\n            }\n            if (data.crossReferences) {\n                this.crossReferences = new Map(Object.entries(data.crossReferences));\n            }\n            if (data.textAnalysis) {\n                this.textAnalysis = data.textAnalysis;\n            }\n            \n            uiManager.showNotification(\n                'Datos bíblicos importados correctamente',\n                'success',\n                { duration: 3000 }\n            );\n            \n            return true;\n        } catch (error) {\n            console.error('Failed to import Bible data:', error);\n            return false;\n        }\n    }\n    \n    /**\n     * Get system statistics\n     * @returns {Object}\n     */\n    getStats() {\n        return {\n            currentVerse: `${this.currentBook} ${this.currentChapter}:${this.currentVerse}`,\n            annotationsCount: this.annotations.size,\n            crossReferencesCount: this.crossReferences.size,\n            analysisCount: Object.keys(this.textAnalysis).length,\n            filtersAvailable: {\n                mantenencia: this.analyticalFilters.mantenencia.length,\n                aumentancia: this.analyticalFilters.aumentancia.length\n            },\n            isInitialized: this.isInitialized\n        };\n    }\n    \n    /**\n     * Debug method\n     */\n    debug() {\n        console.group('📖 Enhanced Bible Data Debug');\n        console.log('Statistics:', this.getStats());\n        console.log('Current analysis:', this.textAnalysis[`${this.currentBook}_${this.currentChapter}_${this.currentVerse}`]);\n        console.log('Analytical filters:', this.analyticalFilters);\n        console.log('Annotations:', Object.fromEntries(this.annotations));\n        console.groupEnd();\n    }\n}\n\n// ==========================================\n// CREATE AND EXPORT BIBLE DATA INSTANCE\n// ==========================================\n\nconst bibleDataEnhanced = new BibleDataEnhanced();\n\nexport default bibleDataEnhanced;\nexport { BibleDataEnhanced };"
