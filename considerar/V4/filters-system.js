/* ==========================================================================
   BIBLIAAPP PRO v3.0 - FILTERS SYSTEM MODULE
   Advanced analytical tools with interactive filtering (50+ tools)
   ========================================================================== */

import { $, $$, createElement, debounce, deepClone } from '../core/utils.js';
import { ANALYTICAL_TOOLS } from '../core/constants.js';
import stateManager, { getState, setState, updateState, subscribe } from '../core/state-manager.js';
import uiManager from '../core/ui-manager.js';

// ==========================================
// FILTERS SYSTEM CLASS
// ==========================================

class FiltersSystem {
    constructor() {\n        this.tools = ANALYTICAL_TOOLS.categories;\n        this.activeFilters = [];\n        this.expandedCategories = [];\n        this.favoriteTools = [];\n        this.recentlyUsed = [];\n        this.searchQuery = '';\n        this.currentDifficultyFilter = null;\n        this.toolUsage = {};\n        \n        this.isInitialized = false;\n        \n        this.initializeSystem();\n    }\n    \n    /**\n     * Initialize Filters System\n     */\n    async initializeSystem() {\n        try {\n            // Load existing data\n            await this.loadData();\n            \n            // Setup UI components\n            this.setupFiltersInterface();\n            \n            // Setup search functionality\n            this.setupSearchSystem();\n            \n            // Setup state subscriptions\n            this.setupStateSubscriptions();\n            \n            this.isInitialized = true;\n            console.log('Filters System initialized with', this.getTotalToolsCount(), 'tools');\n            \n        } catch (error) {\n            console.error('Failed to initialize Filters System:', error);\n        }\n    }\n    \n    /**\n     * Load filters data from state\n     */\n    async loadData() {\n        this.activeFilters = getState('tools.activeFilters', []);\n        this.expandedCategories = getState('tools.expandedCategories', []);\n        this.favoriteTools = getState('tools.favoriteTools', []);\n        this.recentlyUsed = getState('tools.recentlyUsed', []);\n        this.toolUsage = getState('tools.usage', {});\n    }\n    \n    /**\n     * Setup filters interface\n     */\n    setupFiltersInterface() {\n        this.setupFiltersContainer();\n        this.setupControlPanel();\n        this.renderAllCategories();\n        this.bindEventListeners();\n    }\n    \n    /**\n     * Setup main filters container\n     */\n    setupFiltersContainer() {\n        this.filtersContainer = $('#filtros-lista-container');\n        \n        if (!this.filtersContainer) {\n            console.warn('Filters container not found');\n            return;\n        }\n        \n        // Add search and controls if not present\n        this.addControlsToContainer();\n    }\n    \n    /**\n     * Add controls to filters container\n     */\n    addControlsToContainer() {\n        const controlsHTML = `\n            <div class=\"filters-controls mb-6 space-y-4\">\n                <!-- Search Bar -->\n                <div class=\"relative\">\n                    <input type=\"text\" \n                           id=\"filters-search\" \n                           class=\"discord-input pl-12 pr-4 py-3 text-sm rounded-lg w-full\" \n                           placeholder=\"Buscar herramientas analíticas...\">\n                    <svg class=\"absolute left-4 top-3.5 w-5 h-5 text-[var(--text-muted)]\" \n                         viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\">\n                        <circle cx=\"11\" cy=\"11\" r=\"8\"></circle>\n                        <path d=\"m21 21-4.35-4.35\"></path>\n                    </svg>\n                    <button id=\"clear-search\" \n                            class=\"absolute right-3 top-3 p-1 rounded-md hover:bg-[var(--bg-input)] opacity-0 transition-opacity\">\n                        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\">\n                            <line x1=\"18\" y1=\"6\" x2=\"6\" y2=\"18\"></line>\n                            <line x1=\"6\" y1=\"6\" x2=\"18\" y2=\"18\"></line>\n                        </svg>\n                    </button>\n                </div>\n                \n                <!-- Filter Controls -->\n                <div class=\"flex flex-wrap gap-3 items-center\">\n                    <!-- Difficulty Filter -->\n                    <div class=\"flex items-center space-x-2\">\n                        <label class=\"text-sm font-medium text-[var(--text-secondary)]\">Dificultad:</label>\n                        <select id=\"difficulty-filter\" class=\"discord-input px-3 py-2 text-sm rounded-lg\">\n                            <option value=\"\">Todas</option>\n                            <option value=\"beginner\">Principiante</option>\n                            <option value=\"intermediate\">Intermedio</option>\n                            <option value=\"advanced\">Avanzado</option>\n                            <option value=\"expert\">Experto</option>\n                        </select>\n                    </div>\n                    \n                    <!-- View Controls -->\n                    <div class=\"flex items-center space-x-2\">\n                        <button id=\"expand-all\" class=\"discord-button-secondary px-3 py-2 text-sm rounded-lg\">\n                            Expandir Todo\n                        </button>\n                        <button id=\"collapse-all\" class=\"discord-button-secondary px-3 py-2 text-sm rounded-lg\">\n                            Contraer Todo\n                        </button>\n                    </div>\n                    \n                    <!-- Sort Controls -->\n                    <div class=\"flex items-center space-x-2\">\n                        <label class=\"text-sm font-medium text-[var(--text-secondary)]\">Ordenar:</label>\n                        <select id=\"sort-filter\" class=\"discord-input px-3 py-2 text-sm rounded-lg\">\n                            <option value=\"default\">Por defecto</option>\n                            <option value=\"alphabetical\">Alfabético</option>\n                            <option value=\"difficulty\">Por dificultad</option>\n                            <option value=\"usage\">Más usadas</option>\n                            <option value=\"favorites\">Favoritas</option>\n                        </select>\n                    </div>\n                    \n                    <!-- Reset Button -->\n                    <button id=\"reset-filters\" class=\"discord-button-secondary px-3 py-2 text-sm rounded-lg ml-auto\">\n                        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" class=\"inline mr-1\">\n                            <polyline points=\"1,4 1,10 7,10\"></polyline>\n                            <path d=\"M3.51,15a9,9,0,0,0,13.5,1.5\"></path>\n                            <polyline points=\"23,20 23,14 17,14\"></polyline>\n                            <path d=\"M20.49,9A9,9,0,0,0,7,7.5\"></path>\n                        </svg>\n                        Resetear\n                    </button>\n                </div>\n                \n                <!-- Active Filters Display -->\n                <div id=\"active-filters\" class=\"flex flex-wrap gap-2 min-h-[24px]\">\n                    <!-- Active filter tags will appear here -->\n                </div>\n                \n                <!-- Statistics Bar -->\n                <div class=\"filters-stats flex justify-between items-center p-3 bg-[var(--bg-input)] rounded-lg\">\n                    <div class=\"flex space-x-6 text-sm\">\n                        <span class=\"text-[var(--text-secondary)]\">Total: <span id=\"total-tools\" class=\"font-semibold text-[var(--text-primary)]\">0</span></span>\n                        <span class=\"text-[var(--text-secondary)]\">Visibles: <span id=\"visible-tools\" class=\"font-semibold text-[var(--text-primary)]\">0</span></span>\n                        <span class=\"text-[var(--text-secondary)]\">Favoritas: <span id=\"favorite-count\" class=\"font-semibold text-[var(--text-primary)]\">0</span></span>\n                    </div>\n                    <div class=\"text-sm text-[var(--text-muted)]\">\n                        Última actualización: <span id=\"last-update\">ahora</span>\n                    </div>\n                </div>\n            </div>\n        `;\n        \n        this.filtersContainer.insertAdjacentHTML('afterbegin', controlsHTML);\n    }\n    \n    /**\n     * Setup control panel\n     */\n    setupControlPanel() {\n        // Search input\n        this.searchInput = $('#filters-search');\n        if (this.searchInput) {\n            this.searchInput.addEventListener('input', debounce((e) => {\n                this.handleSearch(e.target.value);\n            }, 300));\n        }\n        \n        // Clear search button\n        const clearSearchBtn = $('#clear-search');\n        if (clearSearchBtn) {\n            clearSearchBtn.addEventListener('click', () => {\n                this.clearSearch();\n            });\n        }\n        \n        // Difficulty filter\n        const difficultyFilter = $('#difficulty-filter');\n        if (difficultyFilter) {\n            difficultyFilter.addEventListener('change', (e) => {\n                this.handleDifficultyFilter(e.target.value);\n            });\n        }\n        \n        // Sort filter\n        const sortFilter = $('#sort-filter');\n        if (sortFilter) {\n            sortFilter.addEventListener('change', (e) => {\n                this.handleSortChange(e.target.value);\n            });\n        }\n        \n        // Expand/Collapse buttons\n        const expandAllBtn = $('#expand-all');\n        const collapseAllBtn = $('#collapse-all');\n        \n        if (expandAllBtn) {\n            expandAllBtn.addEventListener('click', () => {\n                this.expandAllCategories();\n            });\n        }\n        \n        if (collapseAllBtn) {\n            collapseAllBtn.addEventListener('click', () => {\n                this.collapseAllCategories();\n            });\n        }\n        \n        // Reset filters button\n        const resetBtn = $('#reset-filters');\n        if (resetBtn) {\n            resetBtn.addEventListener('click', () => {\n                this.resetAllFilters();\n            });\n        }\n    }\n    \n    /**\n     * Setup search system\n     */\n    setupSearchSystem() {\n        // Update search input visibility on typing\n        if (this.searchInput) {\n            this.searchInput.addEventListener('input', (e) => {\n                const clearBtn = $('#clear-search');\n                if (clearBtn) {\n                    clearBtn.style.opacity = e.target.value.length > 0 ? '1' : '0';\n                }\n            });\n        }\n    }\n    \n    /**\n     * Bind event listeners\n     */\n    bindEventListeners() {\n        // Keyboard shortcuts\n        document.addEventListener('keydown', (e) => {\n            if (getState('app.currentSubSection') === 'filtros') {\n                this.handleKeyboardShortcuts(e);\n            }\n        });\n    }\n    \n    /**\n     * Handle keyboard shortcuts\n     * @param {KeyboardEvent} e - Keyboard event\n     */\n    handleKeyboardShortcuts(e) {\n        // Ctrl+F to focus search\n        if (e.ctrlKey && e.key === 'f') {\n            e.preventDefault();\n            if (this.searchInput) {\n                this.searchInput.focus();\n                this.searchInput.select();\n            }\n        }\n        \n        // Escape to clear search\n        if (e.key === 'Escape' && this.searchInput && this.searchInput === document.activeElement) {\n            this.clearSearch();\n        }\n        \n        // Alt+E to expand all\n        if (e.altKey && e.key === 'e') {\n            e.preventDefault();\n            this.expandAllCategories();\n        }\n        \n        // Alt+C to collapse all\n        if (e.altKey && e.key === 'c') {\n            e.preventDefault();\n            this.collapseAllCategories();\n        }\n    }\n    \n    // ==========================================\n    // RENDERING METHODS\n    // ==========================================\n    \n    /**\n     * Render all categories and tools\n     */\n    renderAllCategories() {\n        if (!this.filtersContainer) return;\n        \n        const categoriesContainer = this.filtersContainer.querySelector('.categories-container') || \n            this.createCategoriesContainer();\n        \n        categoriesContainer.innerHTML = '';\n        \n        // Sort categories if needed\n        const sortedCategories = this.getSortedCategories();\n        \n        // Render each category\n        sortedCategories.forEach(([categoryKey, categoryData]) => {\n            const categoryElement = this.createCategoryElement(categoryKey, categoryData);\n            categoriesContainer.appendChild(categoryElement);\n        });\n        \n        this.updateStatistics();\n    }\n    \n    /**\n     * Create categories container\n     * @returns {Element}\n     */\n    createCategoriesContainer() {\n        const container = createElement('div', {\n            className: 'categories-container space-y-4'\n        });\n        \n        this.filtersContainer.appendChild(container);\n        return container;\n    }\n    \n    /**\n     * Get sorted categories based on current sort option\n     * @returns {Array}\n     */\n    getSortedCategories() {\n        const sortOption = $('#sort-filter')?.value || 'default';\n        const entries = Object.entries(this.tools);\n        \n        switch (sortOption) {\n            case 'alphabetical':\n                return entries.sort(([, a], [, b]) => a.name.localeCompare(b.name));\n            case 'difficulty':\n                return entries.sort(([, a], [, b]) => {\n                    const avgDiffA = this.getAverageDifficulty(a.tools);\n                    const avgDiffB = this.getAverageDifficulty(b.tools);\n                    return avgDiffA - avgDiffB;\n                });\n            case 'usage':\n                return entries.sort(([keyA], [keyB]) => {\n                    const usageA = this.getCategoryUsage(keyA);\n                    const usageB = this.getCategoryUsage(keyB);\n                    return usageB - usageA;\n                });\n            case 'favorites':\n                return entries.sort(([keyA], [keyB]) => {\n                    const favA = this.getCategoryFavorites(keyA);\n                    const favB = this.getCategoryFavorites(keyB);\n                    return favB - favA;\n                });\n            default:\n                return entries;\n        }\n    }\n    \n    /**\n     * Create category element\n     * @param {string} categoryKey - Category key\n     * @param {Object} categoryData - Category data\n     * @returns {Element}\n     */\n    createCategoryElement(categoryKey, categoryData) {\n        const isExpanded = this.expandedCategories.includes(categoryKey);\n        const visibleTools = this.getVisibleTools(categoryData.tools);\n        const totalTools = categoryData.tools.length;\n        \n        const categoryElement = createElement('div', {\n            className: 'filtro-card border border-[var(--border-color)] rounded-lg overflow-hidden',\n            'data-category': categoryKey\n        });\n        \n        // Category header\n        const header = createElement('div', {\n            className: `filtro-header bg-[var(--bg-input)] px-6 py-4 cursor-pointer flex items-center justify-between ${isExpanded ? 'expanded' : ''}`,\n            onclick: () => this.toggleCategory(categoryKey)\n        });\n        \n        header.innerHTML = `\n            <div class=\"flex items-center space-x-4\">\n                <div class=\"w-10 h-10 rounded-lg flex items-center justify-center\" style=\"background-color: ${categoryData.color}20\">\n                    <svg width=\"20\" height=\"20\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"${categoryData.color}\" stroke-width=\"2\">\n                        ${this.getCategoryIcon(categoryKey)}\n                    </svg>\n                </div>\n                <div>\n                    <h3 class=\"filtro-title text-lg font-semibold text-[var(--text-primary)]\">${categoryData.name}</h3>\n                    <p class=\"text-sm text-[var(--text-secondary)] mt-1\">${categoryData.description}</p>\n                    <div class=\"flex items-center space-x-4 mt-2 text-xs text-[var(--text-muted)]\">\n                        <span>${totalTools} herramientas</span>\n                        ${visibleTools < totalTools ? `<span class=\"text-yellow-400\">${visibleTools} visibles</span>` : ''}\n                        <span class=\"px-2 py-1 rounded-full text-xs\" style=\"background-color: ${categoryData.color}20; color: ${categoryData.color}\">\n                            ${this.getCategoryDifficultyRange(categoryData.tools)}\n                        </span>\n                    </div>\n                </div>\n            </div>\n            <div class=\"flex items-center space-x-3\">\n                <span class=\"text-sm font-medium\" style=\"color: ${categoryData.color}\">\n                    ${visibleTools}/${totalTools}\n                </span>\n                <svg class=\"filtro-chevron w-5 h-5 text-[var(--text-secondary)] transform transition-transform duration-200 ${isExpanded ? 'rotate-180' : ''}\" \n                     viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\">\n                    <polyline points=\"6,9 12,15 18,9\"></polyline>\n                </svg>\n            </div>\n        `;\n        \n        categoryElement.appendChild(header);\n        \n        // Category content (tools)\n        if (isExpanded || this.searchQuery) {\n            const content = this.createCategoryContent(categoryKey, categoryData);\n            categoryElement.appendChild(content);\n        }\n        \n        return categoryElement;\n    }\n    \n    /**\n     * Create category content (tools list)\n     * @param {string} categoryKey - Category key\n     * @param {Object} categoryData - Category data\n     * @returns {Element}\n     */\n    createCategoryContent(categoryKey, categoryData) {\n        const isExpanded = this.expandedCategories.includes(categoryKey);\n        const visibleTools = this.getVisibleTools(categoryData.tools);\n        \n        const content = createElement('div', {\n            className: `filtro-content ${isExpanded || this.searchQuery ? 'expanded' : ''}`,\n            style: isExpanded || this.searchQuery ? 'max-height: none; padding: 1.5rem;' : ''\n        });\n        \n        if (visibleTools.length === 0) {\n            content.innerHTML = `\n                <div class=\"text-center py-8 text-[var(--text-muted)]\">\n                    <svg width=\"48\" height=\"48\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"1\" class=\"mx-auto mb-4 opacity-50\">\n                        <circle cx=\"11\" cy=\"11\" r=\"8\"></circle>\n                        <path d=\"m21 21-4.35-4.35\"></path>\n                    </svg>\n                    <p>No se encontraron herramientas con los filtros actuales</p>\n                </div>\n            `;\n            return content;\n        }\n        \n        // Description\n        content.innerHTML = `\n            <div class=\"filtro-description text-[var(--text-secondary)] mb-6\">\n                ${categoryData.description}\n            </div>\n        `;\n        \n        // Tools grid\n        const toolsGrid = createElement('div', {\n            className: 'filtro-tools-grid grid grid-cols-1 md:grid-cols-2 gap-4'\n        });\n        \n        visibleTools.forEach(tool => {\n            const toolElement = this.createToolElement(tool, categoryKey);\n            toolsGrid.appendChild(toolElement);\n        });\n        \n        content.appendChild(toolsGrid);\n        \n        return content;\n    }\n    \n    /**\n     * Create individual tool element\n     * @param {Object} tool - Tool data\n     * @param {string} categoryKey - Category key\n     * @returns {Element}\n     */\n    createToolElement(tool, categoryKey) {\n        const isFavorite = this.favoriteTools.includes(tool.id);\n        const usageCount = this.toolUsage[tool.id] || 0;\n        const difficultyConfig = ANALYTICAL_TOOLS.difficultyLevels[tool.difficulty];\n        \n        const toolElement = createElement('div', {\n            className: 'filtro-tool bg-[var(--bg-input)] border border-[var(--border-color)] rounded-lg p-4 transition-all duration-200 hover:border-[var(--bg-primary)] hover:bg-[var(--bg-primary)]/5 cursor-pointer',\n            'data-tool-id': tool.id,\n            'data-category': categoryKey,\n            onclick: () => this.useTool(tool, categoryKey)\n        });\n        \n        toolElement.innerHTML = `\n            <div class=\"flex items-start justify-between mb-3\">\n                <div class=\"flex-1\">\n                    <h4 class=\"filtro-tool-name font-semibold text-[var(--text-primary)] mb-1\">${tool.name}</h4>\n                    <div class=\"flex items-center space-x-3 mb-2\">\n                        <span class=\"text-xs px-2 py-1 rounded-full\" \n                              style=\"background-color: ${difficultyConfig.color}20; color: ${difficultyConfig.color}\">\n                            ${difficultyConfig.name}\n                        </span>\n                        ${usageCount > 0 ? `<span class=\"text-xs text-[var(--text-muted)]\">Usada ${usageCount} veces</span>` : ''}\n                    </div>\n                </div>\n                <div class=\"flex items-center space-x-2\">\n                    <button class=\"favorite-btn p-1 rounded-md hover:bg-[var(--bg-card)] transition-colors ${isFavorite ? 'text-yellow-400' : 'text-[var(--text-muted)]'}\" \n                            data-tool-id=\"${tool.id}\" \n                            onclick=\"event.stopPropagation(); this.toggleFavorite('${tool.id}');\" \n                            title=\"${isFavorite ? 'Quitar de favoritos' : 'Añadir a favoritos'}\">\n                        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"${isFavorite ? 'currentColor' : 'none'}\" stroke=\"currentColor\" stroke-width=\"2\">\n                            <polygon points=\"12,2 15.09,8.26 22,9.27 17,14.14 18.18,21.02 12,17.77 5.82,21.02 7,14.14 2,9.27 8.91,8.26 12,2\"></polygon>\n                        </svg>\n                    </button>\n                    <div class=\"w-2 h-2 rounded-full\" style=\"background-color: ${difficultyConfig.color}\"></div>\n                </div>\n            </div>\n            <p class=\"filtro-tool-description text-sm text-[var(--text-muted)] line-clamp-3\">\n                ${tool.description || `Herramienta especializada de ${difficultyConfig.name.toLowerCase()} para análisis bíblico profundo.`}\n            </p>\n        `;\n        \n        // Add favorite button event listener\n        const favoriteBtn = toolElement.querySelector('.favorite-btn');\n        if (favoriteBtn) {\n            favoriteBtn.addEventListener('click', (e) => {\n                e.stopPropagation();\n                this.toggleFavorite(tool.id);\n            });\n        }\n        \n        return toolElement;\n    }\n    \n    // ==========================================\n    // FILTERING AND SEARCH\n    // ==========================================\n    \n    /**\n     * Handle search input\n     * @param {string} query - Search query\n     */\n    handleSearch(query) {\n        this.searchQuery = query.toLowerCase().trim();\n        this.renderAllCategories();\n        this.updateActiveFilters();\n    }\n    \n    /**\n     * Clear search\n     */\n    clearSearch() {\n        if (this.searchInput) {\n            this.searchInput.value = '';\n        }\n        this.searchQuery = '';\n        this.renderAllCategories();\n        this.updateActiveFilters();\n    }\n    \n    /**\n     * Handle difficulty filter\n     * @param {string} difficulty - Difficulty level\n     */\n    handleDifficultyFilter(difficulty) {\n        this.currentDifficultyFilter = difficulty || null;\n        this.renderAllCategories();\n        this.updateActiveFilters();\n    }\n    \n    /**\n     * Handle sort change\n     * @param {string} sortOption - Sort option\n     */\n    handleSortChange(sortOption) {\n        this.renderAllCategories();\n    }\n    \n    /**\n     * Get visible tools based on current filters\n     * @param {Array} tools - Tools array\n     * @returns {Array}\n     */\n    getVisibleTools(tools) {\n        return tools.filter(tool => {\n            // Search filter\n            if (this.searchQuery) {\n                const searchTerms = this.searchQuery.split(' ').filter(term => term.length > 0);\n                const toolText = `${tool.name} ${tool.description || ''}`.toLowerCase();\n                \n                const matchesSearch = searchTerms.every(term => \n                    toolText.includes(term)\n                );\n                \n                if (!matchesSearch) return false;\n            }\n            \n            // Difficulty filter\n            if (this.currentDifficultyFilter && tool.difficulty !== this.currentDifficultyFilter) {\n                return false;\n            }\n            \n            return true;\n        });\n    }\n    \n    /**\n     * Update active filters display\n     */\n    updateActiveFilters() {\n        const activeFiltersContainer = $('#active-filters');\n        if (!activeFiltersContainer) return;\n        \n        const filters = [];\n        \n        // Search filter\n        if (this.searchQuery) {\n            filters.push({\n                type: 'search',\n                label: `Búsqueda: \"${this.searchQuery}\"`,\n                remove: () => this.clearSearch()\n            });\n        }\n        \n        // Difficulty filter\n        if (this.currentDifficultyFilter) {\n            const difficultyConfig = ANALYTICAL_TOOLS.difficultyLevels[this.currentDifficultyFilter];\n            filters.push({\n                type: 'difficulty',\n                label: `Dificultad: ${difficultyConfig.name}`,\n                remove: () => {\n                    const difficultySelect = $('#difficulty-filter');\n                    if (difficultySelect) {\n                        difficultySelect.value = '';\n                    }\n                    this.handleDifficultyFilter('');\n                }\n            });\n        }\n        \n        // Render filter tags\n        activeFiltersContainer.innerHTML = filters.map(filter => `\n            <span class=\"inline-flex items-center space-x-2 px-3 py-1 bg-[var(--bg-primary)]/20 text-[var(--bg-primary)] rounded-full text-sm\">\n                <span>${filter.label}</span>\n                <button onclick=\"(${filter.remove.toString()})()\" class=\"hover:bg-[var(--bg-primary)]/30 rounded-full p-0.5\">\n                    <svg width=\"14\" height=\"14\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\">\n                        <line x1=\"18\" y1=\"6\" x2=\"6\" y2=\"18\"></line>\n                        <line x1=\"6\" y1=\"6\" x2=\"18\" y2=\"18\"></line>\n                    </svg>\n                </button>\n            </span>\n        `).join('');\n        \n        // Make filter removal work\n        filters.forEach((filter, index) => {\n            const filterElement = activeFiltersContainer.children[index];\n            if (filterElement) {\n                const removeBtn = filterElement.querySelector('button');\n                if (removeBtn) {\n                    removeBtn.addEventListener('click', filter.remove);\n                }\n            }\n        });\n    }\n    \n    /**\n     * Reset all filters\n     */\n    resetAllFilters() {\n        // Clear search\n        this.clearSearch();\n        \n        // Reset difficulty filter\n        const difficultySelect = $('#difficulty-filter');\n        if (difficultySelect) {\n            difficultySelect.value = '';\n        }\n        this.currentDifficultyFilter = null;\n        \n        // Reset sort\n        const sortSelect = $('#sort-filter');\n        if (sortSelect) {\n            sortSelect.value = 'default';\n        }\n        \n        // Collapse all categories\n        this.collapseAllCategories();\n        \n        // Re-render\n        this.renderAllCategories();\n        \n        uiManager.showNotification(\n            'Todos los filtros han sido restablecidos',\n            'info',\n            { duration: 2000 }\n        );\n    }\n    \n    // ==========================================\n    // CATEGORY MANAGEMENT\n    // ==========================================\n    \n    /**\n     * Toggle category expansion\n     * @param {string} categoryKey - Category key\n     */\n    toggleCategory(categoryKey) {\n        const index = this.expandedCategories.indexOf(categoryKey);\n        \n        if (index > -1) {\n            this.expandedCategories.splice(index, 1);\n        } else {\n            this.expandedCategories.push(categoryKey);\n        }\n        \n        this.updateState();\n        this.renderAllCategories();\n    }\n    \n    /**\n     * Expand all categories\n     */\n    expandAllCategories() {\n        this.expandedCategories = Object.keys(this.tools);\n        this.updateState();\n        this.renderAllCategories();\n        \n        uiManager.showNotification(\n            'Todas las categorías expandidas',\n            'info',\n            { duration: 1500 }\n        );\n    }\n    \n    /**\n     * Collapse all categories\n     */\n    collapseAllCategories() {\n        this.expandedCategories = [];\n        this.updateState();\n        this.renderAllCategories();\n        \n        uiManager.showNotification(\n            'Todas las categorías contraídas',\n            'info',\n            { duration: 1500 }\n        );\n    }\n    \n    // ==========================================\n    // TOOL INTERACTION\n    // ==========================================\n    \n    /**\n     * Use/activate a tool\n     * @param {Object} tool - Tool data\n     * @param {string} categoryKey - Category key\n     */\n    useTool(tool, categoryKey) {\n        // Update usage statistics\n        this.toolUsage[tool.id] = (this.toolUsage[tool.id] || 0) + 1;\n        \n        // Add to recently used\n        this.addToRecentlyUsed(tool.id);\n        \n        // Update state\n        this.updateState();\n        \n        // Show tool interface/modal\n        this.showToolInterface(tool, categoryKey);\n        \n        // Track usage for analytics\n        this.trackToolUsage(tool, categoryKey);\n    }\n    \n    /**\n     * Show tool interface\n     * @param {Object} tool - Tool data\n     * @param {string} categoryKey - Category key\n     */\n    async showToolInterface(tool, categoryKey) {\n        const categoryData = this.tools[categoryKey];\n        const difficultyConfig = ANALYTICAL_TOOLS.difficultyLevels[tool.difficulty];\n        \n        const modalContent = createElement('div', {\n            className: 'tool-interface space-y-6'\n        });\n        \n        modalContent.innerHTML = `\n            <div class=\"tool-header border-b border-[var(--border-color)] pb-4\">\n                <div class=\"flex items-start justify-between\">\n                    <div class=\"flex items-start space-x-4\">\n                        <div class=\"w-12 h-12 rounded-lg flex items-center justify-center\" \n                             style=\"background-color: ${categoryData.color}20\">\n                            <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"${categoryData.color}\" stroke-width=\"2\">\n                                ${this.getCategoryIcon(categoryKey)}\n                            </svg>\n                        </div>\n                        <div>\n                            <h2 class=\"text-2xl font-bold text-[var(--text-primary)] mb-1\">${tool.name}</h2>\n                            <p class=\"text-[var(--text-secondary)] mb-2\">${categoryData.name} • ${difficultyConfig.name}</p>\n                            <div class=\"flex items-center space-x-3\">\n                                <span class=\"text-xs px-2 py-1 rounded-full\" \n                                      style=\"background-color: ${difficultyConfig.color}20; color: ${difficultyConfig.color}\">\n                                    ${difficultyConfig.description}\n                                </span>\n                                ${this.toolUsage[tool.id] > 0 ? `<span class=\"text-xs text-[var(--text-muted)]\">Usada ${this.toolUsage[tool.id]} veces</span>` : ''}\n                            </div>\n                        </div>\n                    </div>\n                    <button id=\"favorite-tool-btn\" \n                            class=\"p-2 rounded-lg hover:bg-[var(--bg-input)] transition-colors ${this.favoriteTools.includes(tool.id) ? 'text-yellow-400' : 'text-[var(--text-muted)]'}\">\n                        <svg width=\"20\" height=\"20\" viewBox=\"0 0 24 24\" fill=\"${this.favoriteTools.includes(tool.id) ? 'currentColor' : 'none'}\" stroke=\"currentColor\" stroke-width=\"2\">\n                            <polygon points=\"12,2 15.09,8.26 22,9.27 17,14.14 18.18,21.02 12,17.77 5.82,21.02 7,14.14 2,9.27 8.91,8.26 12,2\"></polygon>\n                        </svg>\n                    </button>\n                </div>\n            </div>\n            \n            <div class=\"tool-content\">\n                <div class=\"space-y-4\">\n                    <div>\n                        <h3 class=\"text-lg font-semibold mb-2\">Descripción</h3>\n                        <p class=\"text-[var(--text-secondary)] leading-relaxed\">\n                            ${this.getToolDescription(tool, categoryKey)}\n                        </p>\n                    </div>\n                    \n                    <div>\n                        <h3 class=\"text-lg font-semibold mb-2\">Cómo usar esta herramienta</h3>\n                        <div class=\"bg-[var(--bg-input)] rounded-lg p-4\">\n                            ${this.getToolInstructions(tool, categoryKey)}\n                        </div>\n                    </div>\n                    \n                    <div>\n                        <h3 class=\"text-lg font-semibold mb-2\">Ejemplo práctico</h3>\n                        <div class=\"bg-[var(--bg-card)] border border-[var(--border-color)] rounded-lg p-4\">\n                            ${this.getToolExample(tool, categoryKey)}\n                        </div>\n                    </div>\n                </div>\n            </div>\n            \n            <div class=\"tool-actions flex justify-between items-center pt-4 border-t border-[var(--border-color)]\">\n                <div class=\"flex space-x-3\">\n                    <button id=\"save-notes-btn\" class=\"discord-button-secondary px-4 py-2 rounded-lg\">\n                        Guardar Notas\n                    </button>\n                    <button id=\"share-tool-btn\" class=\"discord-button-secondary px-4 py-2 rounded-lg\">\n                        Compartir\n                    </button>\n                </div>\n                <div class=\"flex space-x-3\">\n                    <button id=\"close-tool-btn\" class=\"discord-button-secondary px-4 py-2 rounded-lg\">\n                        Cerrar\n                    </button>\n                    <button id=\"apply-tool-btn\" class=\"discord-button-primary px-6 py-2 rounded-lg\">\n                        Aplicar Herramienta\n                    </button>\n                </div>\n            </div>\n        `;\n        \n        const modal = await uiManager.showModal(modalContent, {\n            title: `${tool.name} - ${categoryData.name}`,\n            size: 'large',\n            closable: true\n        });\n        \n        // Event listeners\n        this.setupToolModalEvents(tool, categoryKey, modalContent);\n    }\n    \n    /**\n     * Setup tool modal event listeners\n     * @param {Object} tool - Tool data\n     * @param {string} categoryKey - Category key\n     * @param {Element} modalContent - Modal content element\n     */\n    setupToolModalEvents(tool, categoryKey, modalContent) {\n        // Favorite button\n        const favoriteBtn = modalContent.querySelector('#favorite-tool-btn');\n        if (favoriteBtn) {\n            favoriteBtn.addEventListener('click', () => {\n                this.toggleFavorite(tool.id);\n                // Update button appearance\n                const isFavorite = this.favoriteTools.includes(tool.id);\n                favoriteBtn.className = `p-2 rounded-lg hover:bg-[var(--bg-input)] transition-colors ${isFavorite ? 'text-yellow-400' : 'text-[var(--text-muted)]'}`;\n                const svg = favoriteBtn.querySelector('svg');\n                if (svg) {\n                    svg.setAttribute('fill', isFavorite ? 'currentColor' : 'none');\n                }\n            });\n        }\n        \n        // Close button\n        const closeBtn = modalContent.querySelector('#close-tool-btn');\n        if (closeBtn) {\n            closeBtn.addEventListener('click', () => {\n                uiManager.closeModal();\n            });\n        }\n        \n        // Apply tool button\n        const applyBtn = modalContent.querySelector('#apply-tool-btn');\n        if (applyBtn) {\n            applyBtn.addEventListener('click', () => {\n                this.applyTool(tool, categoryKey);\n            });\n        }\n        \n        // Save notes button\n        const saveNotesBtn = modalContent.querySelector('#save-notes-btn');\n        if (saveNotesBtn) {\n            saveNotesBtn.addEventListener('click', () => {\n                this.saveToolNotes(tool, categoryKey);\n            });\n        }\n        \n        // Share tool button\n        const shareBtn = modalContent.querySelector('#share-tool-btn');\n        if (shareBtn) {\n            shareBtn.addEventListener('click', () => {\n                this.shareTool(tool, categoryKey);\n            });\n        }\n    }\n    \n    /**\n     * Apply tool to current study\n     * @param {Object} tool - Tool data\n     * @param {string} categoryKey - Category key\n     */\n    applyTool(tool, categoryKey) {\n        // This would integrate with the actual Bible text analysis\n        // For now, show a placeholder implementation\n        \n        uiManager.showNotification(\n            `Aplicando ${tool.name} al texto actual...`,\n            'info',\n            { duration: 2000 }\n        );\n        \n        // Close modal\n        uiManager.closeModal();\n        \n        // In a real implementation, this would:\n        // 1. Get current Bible text\n        // 2. Apply the analytical tool\n        // 3. Show results in a new interface\n        // 4. Save the analysis to user's notes\n    }\n    \n    /**\n     * Toggle tool favorite status\n     * @param {string} toolId - Tool ID\n     */\n    toggleFavorite(toolId) {\n        const index = this.favoriteTools.indexOf(toolId);\n        \n        if (index > -1) {\n            this.favoriteTools.splice(index, 1);\n        } else {\n            this.favoriteTools.push(toolId);\n        }\n        \n        this.updateState();\n        this.renderAllCategories();\n        \n        const action = index > -1 ? 'eliminada de' : 'añadida a';\n        uiManager.showNotification(\n            `Herramienta ${action} favoritos`,\n            'success',\n            { duration: 1500 }\n        );\n    }\n    \n    /**\n     * Add tool to recently used\n     * @param {string} toolId - Tool ID\n     */\n    addToRecentlyUsed(toolId) {\n        const index = this.recentlyUsed.indexOf(toolId);\n        \n        if (index > -1) {\n            this.recentlyUsed.splice(index, 1);\n        }\n        \n        this.recentlyUsed.unshift(toolId);\n        \n        // Limit recently used list\n        if (this.recentlyUsed.length > 20) {\n            this.recentlyUsed = this.recentlyUsed.slice(0, 20);\n        }\n    }\n    \n    /**\n     * Save tool notes\n     * @param {Object} tool - Tool data\n     * @param {string} categoryKey - Category key\n     */\n    saveToolNotes(tool, categoryKey) {\n        // Placeholder for saving notes functionality\n        uiManager.showNotification(\n            'Funcionalidad de notas en desarrollo',\n            'info',\n            { duration: 2000 }\n        );\n    }\n    \n    /**\n     * Share tool\n     * @param {Object} tool - Tool data\n     * @param {string} categoryKey - Category key\n     */\n    shareTool(tool, categoryKey) {\n        if (navigator.share) {\n            navigator.share({\n                title: `${tool.name} - BibliaApp Pro`,\n                text: `Herramienta de análisis bíblico: ${tool.name}`,\n                url: window.location.href\n            }).catch(console.error);\n        } else {\n            // Fallback: copy to clipboard\n            navigator.clipboard.writeText(\n                `${tool.name} - Herramienta de análisis bíblico de BibliaApp Pro`\n            ).then(() => {\n                uiManager.showNotification(\n                    'Enlace copiado al portapapeles',\n                    'success',\n                    { duration: 2000 }\n                );\n            }).catch(() => {\n                uiManager.showNotification(\n                    'No se pudo compartir la herramienta',\n                    'error',\n                    { duration: 2000 }\n                );\n            });\n        }\n    }\n    \n    /**\n     * Track tool usage for analytics\n     * @param {Object} tool - Tool data\n     * @param {string} categoryKey - Category key\n     */\n    trackToolUsage(tool, categoryKey) {\n        // Update user progress\n        const currentProgress = getState('user.progress', {});\n        const stats = currentProgress.stats || {};\n        \n        stats.toolsUsed = (stats.toolsUsed || 0) + 1;\n        \n        updateState('user.progress.stats', stats);\n        \n        console.log(`Tool used: ${tool.name} (${categoryKey})`);\n    }\n    \n    // ==========================================\n    // UTILITY METHODS\n    // ==========================================\n    \n    /**\n     * Get category icon SVG path\n     * @param {string} categoryKey - Category key\n     * @returns {string}\n     */\n    getCategoryIcon(categoryKey) {\n        const icons = {\n            hermeneutics: '<circle cx=\"12\" cy=\"12\" r=\"10\"></circle><polygon points=\"10,8 16,12 10,16 10,8\"></polygon>',\n            textualCriticism: '<path d=\"M14.5 4h-5L7 7H4a2 2 0 0 0-2 2v9a2 2 0 0 0 2 2h16a2 2 0 0 0 2-2V9a2 2 0 0 0-2-2h-3l-2.5-3z\"></path><circle cx=\"12\" cy=\"13\" r=\"3\"></circle>',\n            linguistics: '<path d=\"M14.5 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7.5L14.5 2z\"></path><polyline points=\"14,2 14,8 20,8\"></polyline><line x1=\"16\" y1=\"13\" x2=\"8\" y2=\"13\"></line><line x1=\"16\" y1=\"17\" x2=\"8\" y2=\"17\"></line><polyline points=\"10,9 9,9 8,9\"></polyline>',\n            archaeology: '<path d=\"M6 2L3 6v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V6l-3-4H6z\"></path><line x1=\"3\" y1=\"6\" x2=\"21\" y2=\"6\"></line><path d=\"M16 10a4 4 0 01-8 0\"></path>',\n            theology: '<path d=\"M9 11H3v6h6v-6zM21 11h-6v6h6v-6zM9 3H3v6h6V3zM21 3h-6v6h6V3z\"></path>'\n        };\n        return icons[categoryKey] || '<circle cx=\"12\" cy=\"12\" r=\"10\"></circle>';\n    }\n    \n    /**\n     * Get tool description\n     * @param {Object} tool - Tool data\n     * @param {string} categoryKey - Category key\n     * @returns {string}\n     */\n    getToolDescription(tool, categoryKey) {\n        // In a real implementation, this would be stored in the tool data\n        const descriptions = {\n            'grammatical-analysis': 'Analiza la estructura gramatical del texto bíblico, incluyendo partes del discurso, tiempos verbales, y relaciones sintácticas.',\n            'historical-context': 'Examina el contexto histórico, cultural y social en el que fue escrito el texto bíblico.',\n            'literary-genre': 'Identifica y analiza el género literario del pasaje (narrativo, poético, profético, epistolar, etc.).',\n            // Add more descriptions as needed\n        };\n        \n        return descriptions[tool.id] || `Herramienta especializada para el análisis profundo de textos bíblicos desde la perspectiva de ${this.tools[categoryKey].name.toLowerCase()}.`;\n    }\n    \n    /**\n     * Get tool instructions\n     * @param {Object} tool - Tool data\n     * @param {string} categoryKey - Category key\n     * @returns {string}\n     */\n    getToolInstructions(tool, categoryKey) {\n        return `\n            <ol class=\"list-decimal list-inside space-y-2 text-sm\">\n                <li>Selecciona el pasaje bíblico que deseas analizar</li>\n                <li>Aplica la herramienta ${tool.name} al texto</li>\n                <li>Examina los resultados y patrones identificados</li>\n                <li>Toma notas de tus observaciones</li>\n                <li>Integra los hallazgos en tu estudio general</li>\n            </ol>\n        `;\n    }\n    \n    /**\n     * Get tool example\n     * @param {Object} tool - Tool data\n     * @param {string} categoryKey - Category key\n     * @returns {string}\n     */\n    getToolExample(tool, categoryKey) {\n        return `\n            <div class=\"space-y-3\">\n                <div>\n                    <h4 class=\"font-semibold text-sm mb-1\">Texto de ejemplo:</h4>\n                    <p class=\"italic text-[var(--text-secondary)] bg-[var(--bg-input)] p-3 rounded\">\"En el principio creó Dios los cielos y la tierra.\" - Génesis 1:1</p>\n                </div>\n                <div>\n                    <h4 class=\"font-semibold text-sm mb-1\">Aplicación de ${tool.name}:</h4>\n                    <p class=\"text-sm text-[var(--text-secondary)]\">Esta herramienta revelaría elementos específicos según su metodología de análisis...</p>\n                </div>\n            </div>\n        `;\n    }\n    \n    /**\n     * Get category difficulty range\n     * @param {Array} tools - Tools array\n     * @returns {string}\n     */\n    getCategoryDifficultyRange(tools) {\n        const difficulties = tools.map(tool => tool.difficulty);\n        const uniqueDifficulties = [...new Set(difficulties)];\n        \n        if (uniqueDifficulties.length === 1) {\n            return ANALYTICAL_TOOLS.difficultyLevels[uniqueDifficulties[0]].name;\n        }\n        \n        const levelOrder = ['beginner', 'intermediate', 'advanced', 'expert'];\n        const sortedDiffs = uniqueDifficulties.sort((a, b) => \n            levelOrder.indexOf(a) - levelOrder.indexOf(b)\n        );\n        \n        return `${ANALYTICAL_TOOLS.difficultyLevels[sortedDiffs[0]].name} - ${ANALYTICAL_TOOLS.difficultyLevels[sortedDiffs[sortedDiffs.length - 1]].name}`;\n    }\n    \n    /**\n     * Get average difficulty for category\n     * @param {Array} tools - Tools array\n     * @returns {number}\n     */\n    getAverageDifficulty(tools) {\n        const levelOrder = ['beginner', 'intermediate', 'advanced', 'expert'];\n        const total = tools.reduce((sum, tool) => {\n            return sum + levelOrder.indexOf(tool.difficulty);\n        }, 0);\n        return total / tools.length;\n    }\n    \n    /**\n     * Get category usage count\n     * @param {string} categoryKey - Category key\n     * @returns {number}\n     */\n    getCategoryUsage(categoryKey) {\n        const categoryTools = this.tools[categoryKey].tools;\n        return categoryTools.reduce((sum, tool) => {\n            return sum + (this.toolUsage[tool.id] || 0);\n        }, 0);\n    }\n    \n    /**\n     * Get category favorites count\n     * @param {string} categoryKey - Category key\n     * @returns {number}\n     */\n    getCategoryFavorites(categoryKey) {\n        const categoryTools = this.tools[categoryKey].tools;\n        return categoryTools.filter(tool => \n            this.favoriteTools.includes(tool.id)\n        ).length;\n    }\n    \n    /**\n     * Get total tools count\n     * @returns {number}\n     */\n    getTotalToolsCount() {\n        return Object.values(this.tools).reduce((sum, category) => {\n            return sum + category.tools.length;\n        }, 0);\n    }\n    \n    /**\n     * Get visible tools count\n     * @returns {number}\n     */\n    getVisibleToolsCount() {\n        return Object.values(this.tools).reduce((sum, category) => {\n            return sum + this.getVisibleTools(category.tools).length;\n        }, 0);\n    }\n    \n    /**\n     * Update statistics display\n     */\n    updateStatistics() {\n        const totalElement = $('#total-tools');\n        const visibleElement = $('#visible-tools');\n        const favoriteElement = $('#favorite-count');\n        const lastUpdateElement = $('#last-update');\n        \n        if (totalElement) {\n            totalElement.textContent = this.getTotalToolsCount();\n        }\n        \n        if (visibleElement) {\n            visibleElement.textContent = this.getVisibleToolsCount();\n        }\n        \n        if (favoriteElement) {\n            favoriteElement.textContent = this.favoriteTools.length;\n        }\n        \n        if (lastUpdateElement) {\n            lastUpdateElement.textContent = 'ahora';\n        }\n    }\n    \n    // ==========================================\n    // STATE MANAGEMENT\n    // ==========================================\n    \n    /**\n     * Update state in state manager\n     */\n    updateState() {\n        setState('tools.activeFilters', this.activeFilters);\n        setState('tools.expandedCategories', this.expandedCategories);\n        setState('tools.favoriteTools', this.favoriteTools);\n        setState('tools.recentlyUsed', this.recentlyUsed);\n        setState('tools.usage', this.toolUsage);\n    }\n    \n    /**\n     * Setup state subscriptions\n     */\n    setupStateSubscriptions() {\n        // Subscribe to tools state changes\n        subscribe('tools', (toolsState) => {\n            if (toolsState) {\n                if (toolsState.favoriteTools) {\n                    this.favoriteTools = toolsState.favoriteTools;\n                }\n                if (toolsState.recentlyUsed) {\n                    this.recentlyUsed = toolsState.recentlyUsed;\n                }\n                if (toolsState.usage) {\n                    this.toolUsage = toolsState.usage;\n                }\n                if (toolsState.expandedCategories) {\n                    this.expandedCategories = toolsState.expandedCategories;\n                }\n            }\n        });\n        \n        // Subscribe to app state changes\n        subscribe('app.currentSubSection', (subSection) => {\n            if (subSection === 'filtros') {\n                this.updateStatistics();\n            }\n        });\n    }\n    \n    // ==========================================\n    // UTILITY METHODS\n    // ==========================================\n    \n    /**\n     * Export tools data\n     * @returns {Object}\n     */\n    exportData() {\n        return {\n            favoriteTools: deepClone(this.favoriteTools),\n            recentlyUsed: deepClone(this.recentlyUsed),\n            toolUsage: deepClone(this.toolUsage),\n            expandedCategories: deepClone(this.expandedCategories),\n            exported: Date.now()\n        };\n    }\n    \n    /**\n     * Import tools data\n     * @param {Object} data - Data to import\n     * @returns {boolean}\n     */\n    importData(data) {\n        try {\n            if (data.favoriteTools) {\n                this.favoriteTools = data.favoriteTools;\n            }\n            if (data.recentlyUsed) {\n                this.recentlyUsed = data.recentlyUsed;\n            }\n            if (data.toolUsage) {\n                this.toolUsage = data.toolUsage;\n            }\n            if (data.expandedCategories) {\n                this.expandedCategories = data.expandedCategories;\n            }\n            \n            this.updateState();\n            this.renderAllCategories();\n            \n            uiManager.showNotification(\n                'Datos de herramientas importados correctamente',\n                'success',\n                { duration: 3000 }\n            );\n            \n            return true;\n        } catch (error) {\n            console.error('Failed to import tools data:', error);\n            uiManager.showNotification(\n                'Error al importar datos de herramientas',\n                'error',\n                { duration: 3000 }\n            );\n            return false;\n        }\n    }\n    \n    /**\n     * Get system statistics\n     * @returns {Object}\n     */\n    getStats() {\n        return {\n            totalTools: this.getTotalToolsCount(),\n            visibleTools: this.getVisibleToolsCount(),\n            favoriteTools: this.favoriteTools.length,\n            recentlyUsed: this.recentlyUsed.length,\n            totalUsage: Object.values(this.toolUsage).reduce((sum, count) => sum + count, 0),\n            expandedCategories: this.expandedCategories.length,\n            totalCategories: Object.keys(this.tools).length,\n            activeFilters: this.activeFilters.length,\n            isInitialized: this.isInitialized\n        };\n    }\n    \n    /**\n     * Debug method\n     */\n    debug() {\n        console.group('🔍 Filters System Debug');\n        console.log('Statistics:', this.getStats());\n        console.log('Favorite tools:', this.favoriteTools);\n        console.log('Recently used:', this.recentlyUsed);\n        console.log('Tool usage:', this.toolUsage);\n        console.log('Expanded categories:', this.expandedCategories);\n        console.log('Search query:', this.searchQuery);\n        console.log('Difficulty filter:', this.currentDifficultyFilter);\n        console.groupEnd();\n    }\n}\n\n// ==========================================\n// CREATE AND EXPORT FILTERS SYSTEM INSTANCE\n// ==========================================\n\nconst filtersSystem = new FiltersSystem();\n\nexport default filtersSystem;\nexport { FiltersSystem };"