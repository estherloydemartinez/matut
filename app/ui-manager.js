/* ==========================================================================
   BIBLIAAPP PRO v3.0 - UI MANAGER
   Advanced UI management with animations and accessibility
   ========================================================================== */

import { $, $$, createElement, debounce, throttle, isInViewport, isMobile } from './utils.js';
import { APP_CONFIG } from './constants.js';
import stateManager, { getState, setState, subscribe } from './state-manager.js';

// ==========================================
// UI MANAGER CLASS
// ==========================================

class UIManager {
    constructor() {
        this.components = new Map();
        this.activeModals = [];
        this.notifications = [];
        this.transitions = new Map();
        this.observers = new Map();
        this.eventListeners = new Map();
        
        this.isInitialized = false;
        this.currentSection = 'teoria';
        this.currentSubSection = 'lectura';
        
        this.initializeUI();
    }
    
    /**
     * Initialize UI Manager
     */
    async initializeUI() {\n        try {\n            // Wait for DOM to be ready\n            if (document.readyState === 'loading') {\n                await new Promise(resolve => {\n                    document.addEventListener('DOMContentLoaded', resolve);\n                });\n            }\n            \n            // Setup core UI elements\n            this.setupNavigationSystem();\n            this.setupModalSystem();\n            this.setupNotificationSystem();\n            this.setupLoadingSystem();\n            this.setupThemeSystem();\n            this.setupResponsiveSystem();\n            this.setupAccessibility();\n            this.setupKeyboardNavigation();\n            \n            // Subscribe to state changes\n            this.setupStateSubscriptions();\n            \n            // Initialize components\n            this.initializeComponents();\n            \n            // Hide loading screen\n            this.hideLoadingScreen();\n            \n            this.isInitialized = true;\n            console.log('UI Manager initialized');\n            \n        } catch (error) {\n            console.error('Failed to initialize UI Manager:', error);\n        }\n    }\n    \n    // ==========================================\n    // NAVIGATION SYSTEM\n    // ==========================================\n    \n    /**\n     * Setup navigation system\n     */\n    setupNavigationSystem() {\n        // Main navigation buttons\n        const navButtons = $$('.nav-button');\n        navButtons.forEach(button => {\n            button.addEventListener('click', (e) => {\n                const target = button.dataset.target;\n                if (target) {\n                    this.navigateToSection(target);\n                }\n            });\n        });\n        \n        // Tab navigation\n        const tabButtons = $$('.tab-button');\n        tabButtons.forEach(button => {\n            button.addEventListener('click', (e) => {\n                const target = button.dataset.target;\n                if (target) {\n                    this.navigateToSubSection(target);\n                }\n            });\n        });\n        \n        // Quick actions\n        const quickActions = $$('.quick-action');\n        quickActions.forEach(button => {\n            button.addEventListener('click', (e) => {\n                const action = button.dataset.action;\n                if (action) {\n                    this.executeQuickAction(action);\n                }\n            });\n        });\n        \n        // Breadcrumb navigation\n        this.setupBreadcrumbs();\n        \n        // Back/forward navigation\n        window.addEventListener('popstate', (e) => {\n            if (e.state) {\n                this.restoreNavigationState(e.state);\n            }\n        });\n    }\n    \n    /**\n     * Navigate to main section\n     * @param {string} sectionId - Section identifier\n     */\n    navigateToSection(sectionId) {\n        if (this.currentSection === sectionId) return;\n        \n        const previousSection = this.currentSection;\n        this.currentSection = sectionId;\n        \n        // Update navigation state\n        setState('app.currentSection', sectionId);\n        \n        // Update UI\n        this.updateNavigationUI(sectionId, previousSection);\n        \n        // Update URL\n        this.updateURL();\n        \n        // Track navigation\n        this.trackNavigation('section', sectionId);\n    }\n    \n    /**\n     * Navigate to sub-section\n     * @param {string} subSectionId - Sub-section identifier\n     */\n    navigateToSubSection(subSectionId) {\n        if (this.currentSubSection === subSectionId) return;\n        \n        const previousSubSection = this.currentSubSection;\n        this.currentSubSection = subSectionId;\n        \n        // Update navigation state\n        setState('app.currentSubSection', subSectionId);\n        \n        // Update UI\n        this.updateSubNavigationUI(subSectionId, previousSubSection);\n        \n        // Update URL\n        this.updateURL();\n        \n        // Track navigation\n        this.trackNavigation('subsection', subSectionId);\n    }\n    \n    /**\n     * Update navigation UI elements\n     * @param {string} activeSection - Active section ID\n     * @param {string} previousSection - Previous section ID\n     */\n    updateNavigationUI(activeSection, previousSection) {\n        // Update nav buttons\n        $$('.nav-button').forEach(button => {\n            button.classList.remove('active');\n            if (button.dataset.target === activeSection) {\n                button.classList.add('active');\n            }\n        });\n        \n        // Update content sections\n        $$('.content-section').forEach(section => {\n            section.classList.add('hidden');\n        });\n        \n        const activeContentSection = $(`#content-${activeSection}`);\n        if (activeContentSection) {\n            activeContentSection.classList.remove('hidden');\n            this.animateContentTransition(activeContentSection, 'fadeInUp');\n        }\n        \n        // Update breadcrumbs\n        this.updateBreadcrumbs();\n        \n        // Trigger section-specific initialization\n        this.initializeSectionContent(activeSection);\n    }\n    \n    /**\n     * Update sub-navigation UI elements\n     * @param {string} activeSubSection - Active sub-section ID\n     * @param {string} previousSubSection - Previous sub-section ID\n     */\n    updateSubNavigationUI(activeSubSection, previousSubSection) {\n        // Update tab buttons\n        $$('.tab-button').forEach(button => {\n            button.classList.remove('active');\n            if (button.dataset.target === activeSubSection) {\n                button.classList.add('active');\n            }\n        });\n        \n        // Update sub-content sections\n        $$('.subcontent').forEach(section => {\n            section.classList.add('hidden');\n        });\n        \n        const activeSubContent = $(`#subcontent-${activeSubSection}`);\n        if (activeSubContent) {\n            activeSubContent.classList.remove('hidden');\n            this.animateContentTransition(activeSubContent, 'slideInRight');\n        }\n        \n        // Update breadcrumbs\n        this.updateBreadcrumbs();\n    }\n    \n    /**\n     * Execute quick action\n     * @param {string} action - Action identifier\n     */\n    executeQuickAction(action) {\n        const actions = {\n            'daily-reading': () => {\n                this.navigateToSection('teoria');\n                this.navigateToSubSection('lectura');\n                this.showNotification('Iniciando lectura diaria...', 'info');\n            },\n            'prayer-session': () => {\n                this.navigateToSection('practica');\n                this.navigateToSubSection('oracion-practica');\n                this.showNotification('Iniciando sesión de oración...', 'info');\n            },\n            'memory-review': () => {\n                this.navigateToSection('teoria');\n                this.navigateToSubSection('memorizacion');\n                this.showNotification('Iniciando revisión de memoria...', 'info');\n            }\n        };\n        \n        if (actions[action]) {\n            actions[action]();\n        }\n    }\n    \n    /**\n     * Setup breadcrumb navigation\n     */\n    setupBreadcrumbs() {\n        this.breadcrumbContainer = $('.breadcrumbs');\n        this.updateBreadcrumbs();\n    }\n    \n    /**\n     * Update breadcrumbs display\n     */\n    updateBreadcrumbs() {\n        if (!this.breadcrumbContainer) return;\n        \n        const sectionNames = {\n            'teoria': 'Teoría',\n            'practica': 'Práctica',\n            'social': 'Social',\n            'inicio': 'Inicio',\n            'ajustes': 'Ajustes'\n        };\n        \n        const subSectionNames = {\n            'lectura': 'Lectura',\n            'memorizacion': 'Memorización',\n            'agua': 'Sistema Agua',\n            'filtros': 'Filtros Analíticos',\n            'analisis': 'Análisis',\n            'oracion-practica': 'Oración',\n            'recibx-practica': 'Recibir/Vivir',\n            'aplicacion-practica': 'Aplicación'\n        };\n        \n        let breadcrumbHTML = `<span class=\"breadcrumb-current\">${sectionNames[this.currentSection] || this.currentSection}</span>`;\n        \n        if (this.currentSubSection && subSectionNames[this.currentSubSection]) {\n            breadcrumbHTML += ` <span class=\"text-[var(--text-muted)]\">/</span> <span class=\"text-[var(--text-secondary)]\">${subSectionNames[this.currentSubSection]}</span>`;\n        }\n        \n        this.breadcrumbContainer.innerHTML = breadcrumbHTML;\n    }\n    \n    /**\n     * Update URL without page reload\n     */\n    updateURL() {\n        const url = new URL(window.location);\n        url.searchParams.set('section', this.currentSection);\n        \n        if (this.currentSubSection) {\n            url.searchParams.set('subsection', this.currentSubSection);\n        } else {\n            url.searchParams.delete('subsection');\n        }\n        \n        window.history.pushState({\n            section: this.currentSection,\n            subsection: this.currentSubSection\n        }, '', url);\n    }\n    \n    /**\n     * Restore navigation state from history\n     * @param {Object} state - Navigation state\n     */\n    restoreNavigationState(state) {\n        if (state.section) {\n            this.navigateToSection(state.section);\n        }\n        if (state.subsection) {\n            this.navigateToSubSection(state.subsection);\n        }\n    }\n    \n    /**\n     * Track navigation for analytics\n     * @param {string} type - Navigation type\n     * @param {string} target - Navigation target\n     */\n    trackNavigation(type, target) {\n        // Update user stats\n        const stats = getState('user.progress.stats', {});\n        stats.navigationCount = (stats.navigationCount || 0) + 1;\n        setState('user.progress.stats', stats);\n        \n        // Log for analytics\n        console.log(`Navigation: ${type} -> ${target}`);\n    }\n    \n    // ==========================================\n    // MODAL SYSTEM\n    // ==========================================\n    \n    /**\n     * Setup modal system\n     */\n    setupModalSystem() {\n        this.modalContainer = $('#modalContainer');\n        \n        // Close modal on backdrop click\n        if (this.modalContainer) {\n            this.modalContainer.addEventListener('click', (e) => {\n                if (e.target === this.modalContainer) {\n                    this.closeModal();\n                }\n            });\n        }\n        \n        // Close modal on Escape key\n        document.addEventListener('keydown', (e) => {\n            if (e.key === 'Escape' && this.activeModals.length > 0) {\n                this.closeModal();\n            }\n        });\n    }\n    \n    /**\n     * Show modal\n     * @param {string|Element} content - Modal content\n     * @param {Object} options - Modal options\n     * @returns {Promise}\n     */\n    showModal(content, options = {}) {\n        return new Promise((resolve, reject) => {\n            const {\n                title = '',\n                size = 'medium',\n                closable = true,\n                backdrop = true,\n                className = '',\n                onShow = null,\n                onHide = null\n            } = options;\n            \n            const modalId = 'modal-' + Date.now();\n            \n            // Create modal structure\n            const modal = createElement('div', {\n                className: `modal ${className}`,\n                id: modalId,\n                'data-size': size\n            });\n            \n            const modalHeader = title ? createElement('div', {\n                className: 'modal-header'\n            }, [\n                createElement('h2', { className: 'modal-title' }, title),\n                closable ? createElement('button', {\n                    className: 'modal-close',\n                    onclick: () => this.closeModal(modalId)\n                }, '×') : null\n            ].filter(Boolean)) : null;\n            \n            const modalContent = createElement('div', {\n                className: 'modal-content'\n            }, typeof content === 'string' ? content : '');\n            \n            if (typeof content !== 'string') {\n                modalContent.appendChild(content);\n            }\n            \n            if (modalHeader) {\n                modal.appendChild(modalHeader);\n            }\n            modal.appendChild(modalContent);\n            \n            // Create backdrop\n            const modalBackdrop = createElement('div', {\n                className: 'modal-backdrop modal-backdrop-enter'\n            });\n            \n            // Add to container\n            this.modalContainer.innerHTML = '';\n            this.modalContainer.appendChild(modalBackdrop);\n            this.modalContainer.appendChild(modal);\n            this.modalContainer.classList.remove('hidden');\n            \n            // Add to active modals\n            const modalData = {\n                id: modalId,\n                element: modal,\n                backdrop: modalBackdrop,\n                resolve,\n                reject,\n                onShow,\n                onHide\n            };\n            \n            this.activeModals.push(modalData);\n            \n            // Animate in\n            requestAnimationFrame(() => {\n                modal.classList.add('modal-enter');\n                if (onShow) onShow(modal);\n            });\n            \n            // Focus trap\n            this.setupModalFocusTrap(modal);\n        });\n    }\n    \n    /**\n     * Close modal\n     * @param {string} modalId - Specific modal ID to close\n     */\n    closeModal(modalId = null) {\n        const modalToClose = modalId \n            ? this.activeModals.find(m => m.id === modalId)\n            : this.activeModals[this.activeModals.length - 1];\n        \n        if (!modalToClose) return;\n        \n        const { element, backdrop, resolve, onHide } = modalToClose;\n        \n        // Animate out\n        element.classList.add('modal-exit');\n        backdrop.classList.add('modal-backdrop-exit');\n        \n        setTimeout(() => {\n            // Remove from DOM\n            this.modalContainer.classList.add('hidden');\n            this.modalContainer.innerHTML = '';\n            \n            // Remove from active modals\n            const index = this.activeModals.indexOf(modalToClose);\n            if (index > -1) {\n                this.activeModals.splice(index, 1);\n            }\n            \n            if (onHide) onHide(element);\n            resolve('closed');\n        }, 300);\n    }\n    \n    /**\n     * Setup focus trap for modal\n     * @param {Element} modal - Modal element\n     */\n    setupModalFocusTrap(modal) {\n        const focusableElements = modal.querySelectorAll(\n            'button, [href], input, select, textarea, [tabindex]:not([tabindex=\"-1\"])'\n        );\n        \n        if (focusableElements.length === 0) return;\n        \n        const firstElement = focusableElements[0];\n        const lastElement = focusableElements[focusableElements.length - 1];\n        \n        // Focus first element\n        firstElement.focus();\n        \n        // Tab trap\n        const handleTabKey = (e) => {\n            if (e.key === 'Tab') {\n                if (e.shiftKey) {\n                    if (document.activeElement === firstElement) {\n                        lastElement.focus();\n                        e.preventDefault();\n                    }\n                } else {\n                    if (document.activeElement === lastElement) {\n                        firstElement.focus();\n                        e.preventDefault();\n                    }\n                }\n            }\n        };\n        \n        modal.addEventListener('keydown', handleTabKey);\n    }\n    \n    // ==========================================\n    // NOTIFICATION SYSTEM\n    // ==========================================\n    \n    /**\n     * Setup notification system\n     */\n    setupNotificationSystem() {\n        this.notificationContainer = $('#notificationContainer');\n        \n        if (!this.notificationContainer) {\n            this.notificationContainer = createElement('div', {\n                id: 'notificationContainer',\n                className: 'fixed top-4 right-4 z-50 space-y-2'\n            });\n            document.body.appendChild(this.notificationContainer);\n        }\n    }\n    \n    /**\n     * Show notification\n     * @param {string} message - Notification message\n     * @param {string} type - Notification type (success, error, warning, info)\n     * @param {Object} options - Notification options\n     * @returns {string} Notification ID\n     */\n    showNotification(message, type = 'info', options = {}) {\n        const {\n            title = null,\n            duration = 5000,\n            persistent = false,\n            actions = [],\n            icon = null\n        } = options;\n        \n        const notificationId = 'notification-' + Date.now();\n        \n        // Create notification element\n        const notification = createElement('div', {\n            className: `notification ${type} notification-enter`,\n            id: notificationId\n        });\n        \n        const iconElement = icon || this.getNotificationIcon(type);\n        \n        const content = createElement('div', {\n            className: 'notification-content'\n        }, [\n            createElement('div', { className: 'notification-icon' }, iconElement),\n            createElement('div', { className: 'notification-text' }, [\n                title ? createElement('div', { className: 'notification-title' }, title) : null,\n                createElement('div', { className: 'notification-message' }, message)\n            ].filter(Boolean)),\n            createElement('button', {\n                className: 'notification-close',\n                onclick: () => this.hideNotification(notificationId)\n            }, '×')\n        ]);\n        \n        notification.appendChild(content);\n        \n        // Add actions if provided\n        if (actions.length > 0) {\n            const actionsContainer = createElement('div', {\n                className: 'notification-actions'\n            });\n            \n            actions.forEach(action => {\n                const button = createElement('button', {\n                    className: `notification-action ${action.type || 'secondary'}`,\n                    onclick: () => {\n                        if (action.handler) action.handler();\n                        if (!action.keepOpen) this.hideNotification(notificationId);\n                    }\n                }, action.label);\n                \n                actionsContainer.appendChild(button);\n            });\n            \n            notification.appendChild(actionsContainer);\n        }\n        \n        // Add to container\n        this.notificationContainer.appendChild(notification);\n        \n        // Add to notifications array\n        const notificationData = {\n            id: notificationId,\n            element: notification,\n            type,\n            message,\n            timestamp: Date.now(),\n            persistent\n        };\n        \n        this.notifications.push(notificationData);\n        \n        // Auto-hide if not persistent\n        if (!persistent && duration > 0) {\n            setTimeout(() => {\n                this.hideNotification(notificationId);\n            }, duration);\n        }\n        \n        return notificationId;\n    }\n    \n    /**\n     * Hide notification\n     * @param {string} notificationId - Notification ID\n     */\n    hideNotification(notificationId) {\n        const notification = this.notifications.find(n => n.id === notificationId);\n        if (!notification) return;\n        \n        // Animate out\n        notification.element.classList.add('notification-exit');\n        \n        setTimeout(() => {\n            // Remove from DOM\n            if (notification.element.parentNode) {\n                notification.element.parentNode.removeChild(notification.element);\n            }\n            \n            // Remove from notifications array\n            const index = this.notifications.indexOf(notification);\n            if (index > -1) {\n                this.notifications.splice(index, 1);\n            }\n        }, 300);\n    }\n    \n    /**\n     * Get notification icon for type\n     * @param {string} type - Notification type\n     * @returns {string}\n     */\n    getNotificationIcon(type) {\n        const icons = {\n            success: '✓',\n            error: '⚠',\n            warning: '!',\n            info: 'ℹ'\n        };\n        \n        return icons[type] || icons.info;\n    }\n    \n    /**\n     * Clear all notifications\n     * @param {string} type - Optional type filter\n     */\n    clearNotifications(type = null) {\n        const notificationsToRemove = type \n            ? this.notifications.filter(n => n.type === type)\n            : [...this.notifications];\n        \n        notificationsToRemove.forEach(notification => {\n            this.hideNotification(notification.id);\n        });\n    }\n    \n    // ==========================================\n    // LOADING SYSTEM\n    // ==========================================\n    \n    /**\n     * Setup loading system\n     */\n    setupLoadingSystem() {\n        this.loadingScreen = $('#loadingScreen');\n        this.appContainer = $('#appContainer');\n    }\n    \n    /**\n     * Show loading state\n     * @param {string} target - Target element selector or 'global'\n     * @param {string} message - Loading message\n     */\n    showLoading(target = 'global', message = 'Cargando...') {\n        if (target === 'global') {\n            setState('ui.loading.global', true);\n            if (this.loadingScreen) {\n                this.loadingScreen.classList.remove('hidden');\n                const loadingMessage = this.loadingScreen.querySelector('p');\n                if (loadingMessage) {\n                    loadingMessage.textContent = message;\n                }\n            }\n        } else {\n            const targetElement = $(target);\n            if (targetElement) {\n                targetElement.classList.add('loading');\n                setState(`ui.loading.components.${target}`, true);\n            }\n        }\n    }\n    \n    /**\n     * Hide loading state\n     * @param {string} target - Target element selector or 'global'\n     */\n    hideLoading(target = 'global') {\n        if (target === 'global') {\n            setState('ui.loading.global', false);\n        } else {\n            const targetElement = $(target);\n            if (targetElement) {\n                targetElement.classList.remove('loading');\n                setState(`ui.loading.components.${target}`, false);\n            }\n        }\n    }\n    \n    /**\n     * Hide initial loading screen\n     */\n    hideLoadingScreen() {\n        setTimeout(() => {\n            if (this.loadingScreen) {\n                this.loadingScreen.classList.add('hidden');\n            }\n            if (this.appContainer) {\n                this.appContainer.classList.remove('hidden');\n            }\n        }, 1000); // Give time for initialization\n    }\n    \n    // ==========================================\n    // THEME SYSTEM\n    // ==========================================\n    \n    /**\n     * Setup theme system\n     */\n    setupThemeSystem() {\n        this.themeToggle = $('#themeToggle');\n        \n        if (this.themeToggle) {\n            this.themeToggle.addEventListener('click', () => {\n                this.toggleTheme();\n            });\n        }\n        \n        // Apply initial theme\n        const currentTheme = getState('app.theme', 'dark');\n        this.applyTheme(currentTheme);\n    }\n    \n    /**\n     * Toggle theme\n     */\n    toggleTheme() {\n        const currentTheme = getState('app.theme', 'dark');\n        const newTheme = currentTheme === 'dark' ? 'light' : 'dark';\n        \n        setState('app.theme', newTheme);\n        this.applyTheme(newTheme);\n        \n        this.showNotification(`Tema cambiado a ${newTheme === 'dark' ? 'oscuro' : 'claro'}`, 'info', {\n            duration: 2000\n        });\n    }\n    \n    /**\n     * Apply theme\n     * @param {string} theme - Theme name\n     */\n    applyTheme(theme) {\n        document.documentElement.className = theme;\n        document.documentElement.setAttribute('data-theme', theme);\n        \n        // Update theme toggle icon if needed\n        if (this.themeToggle) {\n            const icon = this.themeToggle.querySelector('svg');\n            if (icon) {\n                // Could update icon based on theme\n            }\n        }\n    }\n    \n    // ==========================================\n    // RESPONSIVE SYSTEM\n    // ==========================================\n    \n    /**\n     * Setup responsive system\n     */\n    setupResponsiveSystem() {\n        this.handleResize = throttle(() => {\n            this.updateResponsiveLayout();\n        }, 100);\n        \n        window.addEventListener('resize', this.handleResize);\n        \n        // Initial layout update\n        this.updateResponsiveLayout();\n    }\n    \n    /**\n     * Update responsive layout\n     */\n    updateResponsiveLayout() {\n        const isMobileView = isMobile();\n        const sidebar = $('#sidebar');\n        \n        if (sidebar) {\n            if (isMobileView) {\n                sidebar.classList.add('mobile');\n            } else {\n                sidebar.classList.remove('mobile');\n            }\n        }\n        \n        // Update state\n        setState('ui.layout.isMobile', isMobileView);\n    }\n    \n    // ==========================================\n    // ACCESSIBILITY\n    // ==========================================\n    \n    /**\n     * Setup accessibility features\n     */\n    setupAccessibility() {\n        // Focus management\n        this.setupFocusManagement();\n        \n        // ARIA live regions\n        this.setupAriaLiveRegions();\n        \n        // Screen reader announcements\n        this.setupScreenReaderSupport();\n        \n        // High contrast support\n        this.setupHighContrastSupport();\n    }\n    \n    /**\n     * Setup focus management\n     */\n    setupFocusManagement() {\n        // Skip to main content link\n        const skipLink = createElement('a', {\n            href: '#main-content',\n            className: 'sr-only focus:not-sr-only focus:absolute focus:top-4 focus:left-4 bg-primary text-white p-2 rounded',\n            textContent: 'Saltar al contenido principal'\n        });\n        \n        document.body.insertBefore(skipLink, document.body.firstChild);\n        \n        // Focus trap for modals is handled in modal system\n    }\n    \n    /**\n     * Setup ARIA live regions\n     */\n    setupAriaLiveRegions() {\n        const liveRegion = createElement('div', {\n            id: 'aria-live-region',\n            'aria-live': 'polite',\n            'aria-atomic': 'true',\n            className: 'sr-only'\n        });\n        \n        document.body.appendChild(liveRegion);\n        this.ariaLiveRegion = liveRegion;\n    }\n    \n    /**\n     * Announce to screen readers\n     * @param {string} message - Message to announce\n     * @param {string} priority - Priority (polite|assertive)\n     */\n    announceToScreenReader(message, priority = 'polite') {\n        if (!this.ariaLiveRegion) return;\n        \n        this.ariaLiveRegion.setAttribute('aria-live', priority);\n        this.ariaLiveRegion.textContent = message;\n        \n        // Clear after announcement\n        setTimeout(() => {\n            this.ariaLiveRegion.textContent = '';\n        }, 1000);\n    }\n    \n    /**\n     * Setup screen reader support\n     */\n    setupScreenReaderSupport() {\n        // Add proper ARIA labels and descriptions\n        this.addAriaLabels();\n        \n        // Update aria attributes on state changes\n        subscribe('*', () => {\n            this.updateAriaAttributes();\n        });\n    }\n    \n    /**\n     * Add ARIA labels to interactive elements\n     */\n    addAriaLabels() {\n        const navButtons = $$('.nav-button');\n        navButtons.forEach(button => {\n            if (!button.getAttribute('aria-label')) {\n                const text = button.querySelector('.nav-text');\n                if (text) {\n                    button.setAttribute('aria-label', `Navegar a ${text.textContent}`);\n                }\n            }\n        });\n        \n        const tabButtons = $$('.tab-button');\n        tabButtons.forEach(button => {\n            if (!button.getAttribute('role')) {\n                button.setAttribute('role', 'tab');\n            }\n        });\n    }\n    \n    /**\n     * Update ARIA attributes based on current state\n     */\n    updateAriaAttributes() {\n        // Update tab states\n        $$('.tab-button').forEach(button => {\n            const isActive = button.classList.contains('active');\n            button.setAttribute('aria-selected', isActive.toString());\n        });\n        \n        // Update nav states\n        $$('.nav-button').forEach(button => {\n            const isActive = button.classList.contains('active');\n            button.setAttribute('aria-current', isActive ? 'page' : 'false');\n        });\n    }\n    \n    /**\n     * Setup high contrast support\n     */\n    setupHighContrastSupport() {\n        // Detect high contrast mode\n        const supportsHighContrast = window.matchMedia('(prefers-contrast: high)').matches;\n        \n        if (supportsHighContrast) {\n            document.documentElement.classList.add('high-contrast');\n        }\n        \n        // Listen for changes\n        window.matchMedia('(prefers-contrast: high)').addEventListener('change', (e) => {\n            if (e.matches) {\n                document.documentElement.classList.add('high-contrast');\n            } else {\n                document.documentElement.classList.remove('high-contrast');\n            }\n        });\n    }\n    \n    // ==========================================\n    // KEYBOARD NAVIGATION\n    // ==========================================\n    \n    /**\n     * Setup keyboard navigation\n     */\n    setupKeyboardNavigation() {\n        document.addEventListener('keydown', (e) => {\n            this.handleGlobalKeyboard(e);\n        });\n    }\n    \n    /**\n     * Handle global keyboard shortcuts\n     * @param {KeyboardEvent} e - Keyboard event\n     */\n    handleGlobalKeyboard(e) {\n        // Alt + number keys for quick navigation\n        if (e.altKey && e.key >= '1' && e.key <= '5') {\n            e.preventDefault();\n            const sections = ['teoria', 'practica', 'social', 'inicio', 'ajustes'];\n            const sectionIndex = parseInt(e.key) - 1;\n            if (sections[sectionIndex]) {\n                this.navigateToSection(sections[sectionIndex]);\n            }\n        }\n        \n        // Ctrl + K for search\n        if (e.ctrlKey && e.key === 'k') {\n            e.preventDefault();\n            this.focusSearch();\n        }\n        \n        // Escape for general close actions\n        if (e.key === 'Escape') {\n            if (this.activeModals.length > 0) {\n                this.closeModal();\n            }\n        }\n    }\n    \n    /**\n     * Focus search input\n     */\n    focusSearch() {\n        const searchInput = $('input[placeholder=\"Buscar...\"]');\n        if (searchInput) {\n            searchInput.focus();\n            searchInput.select();\n        }\n    }\n    \n    // ==========================================\n    // ANIMATION UTILITIES\n    // ==========================================\n    \n    /**\n     * Animate content transition\n     * @param {Element} element - Element to animate\n     * @param {string} animation - Animation class name\n     */\n    animateContentTransition(element, animation) {\n        element.classList.add(animation);\n        \n        const handleAnimationEnd = () => {\n            element.classList.remove(animation);\n            element.removeEventListener('animationend', handleAnimationEnd);\n        };\n        \n        element.addEventListener('animationend', handleAnimationEnd);\n    }\n    \n    /**\n     * Animate element with options\n     * @param {Element} element - Element to animate\n     * @param {Object} options - Animation options\n     * @returns {Promise}\n     */\n    animate(element, options = {}) {\n        return new Promise((resolve) => {\n            const {\n                animation = 'fadeIn',\n                duration = 300,\n                delay = 0,\n                easing = 'ease'\n            } = options;\n            \n            const animationId = Date.now() + Math.random();\n            \n            setTimeout(() => {\n                element.style.animation = `${animation} ${duration}ms ${easing}`;\n                \n                const handleAnimationEnd = () => {\n                    element.style.animation = '';\n                    element.removeEventListener('animationend', handleAnimationEnd);\n                    resolve();\n                };\n                \n                element.addEventListener('animationend', handleAnimationEnd);\n            }, delay);\n        });\n    }\n    \n    // ==========================================\n    // STATE SUBSCRIPTIONS\n    // ==========================================\n    \n    /**\n     * Setup state subscriptions\n     */\n    setupStateSubscriptions() {\n        // Subscribe to loading state changes\n        subscribe('ui.loading.global', (loading) => {\n            if (loading) {\n                this.showLoading();\n            } else {\n                this.hideLoading();\n            }\n        });\n        \n        // Subscribe to theme changes\n        subscribe('app.theme', (theme) => {\n            this.applyTheme(theme);\n        });\n        \n        // Subscribe to navigation changes\n        subscribe('app.currentSection', (section) => {\n            if (section !== this.currentSection) {\n                this.currentSection = section;\n                this.updateNavigationUI(section);\n            }\n        });\n        \n        subscribe('app.currentSubSection', (subSection) => {\n            if (subSection !== this.currentSubSection) {\n                this.currentSubSection = subSection;\n                this.updateSubNavigationUI(subSection);\n            }\n        });\n    }\n    \n    // ==========================================\n    // COMPONENT INITIALIZATION\n    // ==========================================\n    \n    /**\n     * Initialize components\n     */\n    initializeComponents() {\n        // Initialize current section\n        this.initializeSectionContent(this.currentSection);\n    }\n    \n    /**\n     * Initialize section-specific content\n     * @param {string} sectionId - Section identifier\n     */\n    initializeSectionContent(sectionId) {\n        const initMethods = {\n            'teoria': () => this.initializeTeoriaSection(),\n            'practica': () => this.initializePracticaSection(),\n            'social': () => this.initializeSocialSection(),\n            'inicio': () => this.initializeInicioSection(),\n            'ajustes': () => this.initializeAjustesSection()\n        };\n        \n        if (initMethods[sectionId]) {\n            initMethods[sectionId]();\n        }\n    }\n    \n    /**\n     * Initialize Teoría section\n     */\n    initializeTeoriaSection() {\n        // Will be implemented by specific modules\n        console.log('Initializing Teoría section');\n    }\n    \n    /**\n     * Initialize Práctica section\n     */\n    initializePracticaSection() {\n        // Will be implemented by specific modules\n        console.log('Initializing Práctica section');\n    }\n    \n    /**\n     * Initialize Social section\n     */\n    initializeSocialSection() {\n        // Will be implemented by specific modules\n        console.log('Initializing Social section');\n    }\n    \n    /**\n     * Initialize Inicio section\n     */\n    initializeInicioSection() {\n        // Will be implemented by specific modules\n        console.log('Initializing Inicio section');\n    }\n    \n    /**\n     * Initialize Ajustes section\n     */\n    initializeAjustesSection() {\n        // Will be implemented by specific modules\n        console.log('Initializing Ajustes section');\n    }\n    \n    // ==========================================\n    // UTILITY METHODS\n    // ==========================================\n    \n    /**\n     * Get UI statistics\n     * @returns {Object}\n     */\n    getStats() {\n        return {\n            activeModals: this.activeModals.length,\n            notifications: this.notifications.length,\n            components: this.components.size,\n            observers: this.observers.size,\n            eventListeners: this.eventListeners.size,\n            currentSection: this.currentSection,\n            currentSubSection: this.currentSubSection,\n            isInitialized: this.isInitialized\n        };\n    }\n    \n    /**\n     * Debug method\n     */\n    debug() {\n        console.group('🎨 UI Manager Debug');\n        console.log('Statistics:', this.getStats());\n        console.log('Active modals:', this.activeModals);\n        console.log('Notifications:', this.notifications);\n        console.log('Components:', this.components);\n        console.groupEnd();\n    }\n}\n\n// ==========================================\n// CREATE AND EXPORT UI MANAGER INSTANCE\n// ==========================================\n\nconst uiManager = new UIManager();\n\nexport default uiManager;\nexport { UIManager };"