/* ==========================================================================
   BIBLIAAPP PRO v3.0 - AGUA SYSTEM MODULE
   Advanced element categorization: Valor / Añadir / No Añadir
   ========================================================================== */

import { $, $$, createElement, debounce, deepClone } from './utils.js';
import { AGUA_CONFIG } from './constants.js';
import stateManager, { getState, setState, updateState, subscribe } from './state-manager.js';
import uiManager from './ui-manager.js';

// ==========================================
// AGUA SYSTEM CLASS
// ==========================================

class AguaSystem {
    constructor() {\n        this.elements = {\n            valor: [],\n            anadir: [],\n            noAnadir: []\n        };\n        \n        this.history = [];\n        this.dragState = {\n            isDragging: false,\n            draggedElement: null,\n            dragOffset: { x: 0, y: 0 },\n            originalParent: null,\n            originalIndex: null\n        };\n        \n        this.isInitialized = false;\n        \n        this.initializeSystem();\n    }\n    \n    /**\n     * Initialize Agua System\n     */\n    async initializeSystem() {\n        try {\n            // Load existing elements\n            await this.loadData();\n            \n            // Setup UI components\n            this.setupAguaInterface();\n            \n            // Setup drag and drop\n            this.setupDragAndDrop();\n            \n            // Setup state subscriptions\n            this.setupStateSubscriptions();\n            \n            this.isInitialized = true;\n            console.log('Agua System initialized');\n            \n        } catch (error) {\n            console.error('Failed to initialize Agua System:', error);\n        }\n    }\n    \n    /**\n     * Load Agua data from state\n     */\n    async loadData() {\n        this.elements = getState('agua.elements', {\n            valor: [],\n            anadir: [],\n            noAnadir: []\n        });\n        \n        this.history = getState('agua.history', []);\n    }\n    \n    /**\n     * Setup Agua interface\n     */\n    setupAguaInterface() {\n        this.setupColumns();\n        this.setupAddButtons();\n        this.bindEventListeners();\n        this.renderAllElements();\n        this.updateStats();\n    }\n    \n    /**\n     * Setup column containers\n     */\n    setupColumns() {\n        this.columns = {\n            valor: $('.agua-columna.valor .agua-elementos-container') || this.createColumn('valor'),\n            anadir: $('.agua-columna.anadir .agua-elementos-container') || this.createColumn('anadir'),\n            noAnadir: $('.agua-columna.no-anadir .agua-elementos-container') || this.createColumn('no-anadir')\n        };\n    }\n    \n    /**\n     * Create column if it doesn't exist\n     * @param {string} columnType - Column type\n     * @returns {Element}\n     */\n    createColumn(columnType) {\n        const container = $('#subcontent-agua');\n        if (!container) return null;\n        \n        const config = AGUA_CONFIG.columns[columnType];\n        const columnElement = createElement('div', {\n            className: `agua-columna ${columnType} discord-card rounded-xl p-6 border-2 border-dashed`,\n            style: `border-color: ${config.color}30`\n        });\n        \n        // Add column content\n        columnElement.innerHTML = `\n            <div class=\"text-center mb-4\">\n                <div class=\"w-12 h-12 rounded-lg flex items-center justify-center mx-auto mb-2\" \n                     style=\"background: ${config.color}20\">\n                    <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"${config.color}\" stroke-width=\"2\">\n                        ${this.getColumnIcon(columnType)}\n                    </svg>\n                </div>\n                <h3 class=\"text-xl font-semibold\" style=\"color: ${config.color}\">${config.name}</h3>\n                <p class=\"text-sm text-[var(--text-secondary)]\">${config.description}</p>\n            </div>\n            \n            <div class=\"agua-elementos-container space-y-3 min-h-[300px] mb-4\">\n                <!-- Elements will be rendered here -->\n            </div>\n            \n            <button class=\"add-agua-elemento-btn w-full p-3 border-2 border-dashed rounded-lg transition-colors\" \n                    style=\"border-color: ${config.color}30; color: ${config.color}\" \n                    data-columna=\"${columnType}\">\n                <svg width=\"20\" height=\"20\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" class=\"inline mr-2\">\n                    <line x1=\"12\" y1=\"5\" x2=\"12\" y2=\"19\"></line>\n                    <line x1=\"5\" y1=\"12\" x2=\"19\" y2=\"12\"></line>\n                </svg>\n                Añadir elemento\n            </button>\n        `;\n        \n        container.appendChild(columnElement);\n        return columnElement.querySelector('.agua-elementos-container');\n    }\n    \n    /**\n     * Get SVG icon for column type\n     * @param {string} columnType - Column type\n     * @returns {string}\n     */\n    getColumnIcon(columnType) {\n        const icons = {\n            valor: '<path d=\"M12 2l3.09 6.26L22 9.27l-5 4.87 1.18 6.88L12 17.77l-6.18 3.25L7 14.14 2 9.27l6.91-1.01L12 2z\"></path>',\n            anadir: '<line x1=\"12\" y1=\"5\" x2=\"12\" y2=\"19\"></line><line x1=\"5\" y1=\"12\" x2=\"19\" y2=\"12\"></line>',\n            noAnadir: '<circle cx=\"12\" cy=\"12\" r=\"10\"></circle><line x1=\"15\" y1=\"9\" x2=\"9\" y2=\"15\"></line><line x1=\"9\" y1=\"9\" x2=\"15\" y2=\"15\"></line>'\n        };\n        return icons[columnType] || '';\n    }\n    \n    /**\n     * Setup add element buttons\n     */\n    setupAddButtons() {\n        const addButtons = $$('.add-agua-elemento-btn');\n        addButtons.forEach(button => {\n            button.addEventListener('click', (e) => {\n                const columnType = button.dataset.columna;\n                this.showAddElementModal(columnType);\n            });\n        });\n    }\n    \n    /**\n     * Bind event listeners\n     */\n    bindEventListeners() {\n        // Global keyboard shortcuts\n        document.addEventListener('keydown', (e) => {\n            if (getState('app.currentSubSection') === 'agua') {\n                this.handleKeyboardShortcuts(e);\n            }\n        });\n    }\n    \n    /**\n     * Handle keyboard shortcuts\n     * @param {KeyboardEvent} e - Keyboard event\n     */\n    handleKeyboardShortcuts(e) {\n        // Ctrl+1, Ctrl+2, Ctrl+3 for quick add\n        if (e.ctrlKey && ['1', '2', '3'].includes(e.key)) {\n            e.preventDefault();\n            const columns = ['valor', 'anadir', 'noAnadir'];\n            const columnIndex = parseInt(e.key) - 1;\n            this.showAddElementModal(columns[columnIndex]);\n        }\n        \n        // Delete key for removing selected element\n        if (e.key === 'Delete') {\n            const selectedElement = $('.agua-elemento.selected');\n            if (selectedElement) {\n                this.removeElement(selectedElement.dataset.id);\n            }\n        }\n    }\n    \n    // ==========================================\n    // ELEMENT MANAGEMENT\n    // ==========================================\n    \n    /**\n     * Add new element to system\n     * @param {string} columnType - Target column\n     * @param {Object} elementData - Element data\n     * @returns {string} Element ID\n     */\n    addElement(columnType, elementData) {\n        const {\n            title,\n            description = '',\n            type = 'general',\n            priority = 'medium',\n            tags = [],\n            metadata = {}\n        } = elementData;\n        \n        const elementId = this.generateElementId();\n        \n        const element = {\n            id: elementId,\n            title,\n            description,\n            type,\n            priority,\n            tags,\n            metadata,\n            created: Date.now(),\n            lastModified: Date.now(),\n            column: columnType\n        };\n        \n        // Add to appropriate column\n        this.elements[columnType].push(element);\n        \n        // Add to history\n        this.addToHistory({\n            action: 'add',\n            elementId,\n            column: columnType,\n            element: deepClone(element),\n            timestamp: Date.now()\n        });\n        \n        // Update UI and state\n        this.renderElement(element, columnType);\n        this.updateState();\n        this.updateStats();\n        \n        uiManager.showNotification(\n            `Elemento añadido a ${AGUA_CONFIG.columns[columnType].name}`,\n            'success',\n            { duration: 2000 }\n        );\n        \n        return elementId;\n    }\n    \n    /**\n     * Remove element from system\n     * @param {string} elementId - Element ID\n     * @returns {boolean}\n     */\n    removeElement(elementId) {\n        let element = null;\n        let columnType = null;\n        \n        // Find element\n        for (const [column, elements] of Object.entries(this.elements)) {\n            const index = elements.findIndex(el => el.id === elementId);\n            if (index !== -1) {\n                element = elements[index];\n                columnType = column;\n                elements.splice(index, 1);\n                break;\n            }\n        }\n        \n        if (!element) {\n            return false;\n        }\n        \n        // Add to history\n        this.addToHistory({\n            action: 'remove',\n            elementId,\n            column: columnType,\n            element: deepClone(element),\n            timestamp: Date.now()\n        });\n        \n        // Remove from UI\n        const elementDOM = $(`.agua-elemento[data-id=\"${elementId}\"]`);\n        if (elementDOM) {\n            elementDOM.remove();\n        }\n        \n        // Update state and stats\n        this.updateState();\n        this.updateStats();\n        \n        uiManager.showNotification(\n            `Elemento \"${element.title}\" eliminado`,\n            'info',\n            { duration: 2000 }\n        );\n        \n        return true;\n    }\n    \n    /**\n     * Move element between columns\n     * @param {string} elementId - Element ID\n     * @param {string} fromColumn - Source column\n     * @param {string} toColumn - Target column\n     * @param {number} newIndex - New position index\n     * @returns {boolean}\n     */\n    moveElement(elementId, fromColumn, toColumn, newIndex = -1) {\n        if (fromColumn === toColumn) {\n            return this.reorderElement(elementId, fromColumn, newIndex);\n        }\n        \n        // Find and remove element from source\n        const sourceElements = this.elements[fromColumn];\n        const elementIndex = sourceElements.findIndex(el => el.id === elementId);\n        \n        if (elementIndex === -1) {\n            return false;\n        }\n        \n        const element = sourceElements.splice(elementIndex, 1)[0];\n        \n        // Update element column property\n        element.column = toColumn;\n        element.lastModified = Date.now();\n        \n        // Add to target column\n        const targetElements = this.elements[toColumn];\n        if (newIndex >= 0 && newIndex < targetElements.length) {\n            targetElements.splice(newIndex, 0, element);\n        } else {\n            targetElements.push(element);\n        }\n        \n        // Add to history\n        this.addToHistory({\n            action: 'move',\n            elementId,\n            fromColumn,\n            toColumn,\n            newIndex,\n            timestamp: Date.now()\n        });\n        \n        // Update UI\n        this.renderAllElements();\n        this.updateState();\n        this.updateStats();\n        \n        uiManager.showNotification(\n            `\"${element.title}\" movido a ${AGUA_CONFIG.columns[toColumn].name}`,\n            'success',\n            { duration: 2000 }\n        );\n        \n        return true;\n    }\n    \n    /**\n     * Reorder element within same column\n     * @param {string} elementId - Element ID\n     * @param {string} columnType - Column type\n     * @param {number} newIndex - New position index\n     * @returns {boolean}\n     */\n    reorderElement(elementId, columnType, newIndex) {\n        const elements = this.elements[columnType];\n        const currentIndex = elements.findIndex(el => el.id === elementId);\n        \n        if (currentIndex === -1 || newIndex === currentIndex) {\n            return false;\n        }\n        \n        // Move element\n        const [element] = elements.splice(currentIndex, 1);\n        \n        if (newIndex >= 0 && newIndex < elements.length) {\n            elements.splice(newIndex, 0, element);\n        } else {\n            elements.push(element);\n        }\n        \n        // Update UI and state\n        this.renderColumn(columnType);\n        this.updateState();\n        \n        return true;\n    }\n    \n    /**\n     * Update element data\n     * @param {string} elementId - Element ID\n     * @param {Object} updates - Updates to apply\n     * @returns {boolean}\n     */\n    updateElement(elementId, updates) {\n        let element = null;\n        \n        // Find element\n        for (const elements of Object.values(this.elements)) {\n            element = elements.find(el => el.id === elementId);\n            if (element) break;\n        }\n        \n        if (!element) {\n            return false;\n        }\n        \n        // Apply updates\n        Object.assign(element, updates, {\n            lastModified: Date.now()\n        });\n        \n        // Add to history\n        this.addToHistory({\n            action: 'update',\n            elementId,\n            updates: deepClone(updates),\n            timestamp: Date.now()\n        });\n        \n        // Update UI and state\n        this.renderElement(element, element.column);\n        this.updateState();\n        \n        return true;\n    }\n    \n    /**\n     * Get element by ID\n     * @param {string} elementId - Element ID\n     * @returns {Object|null}\n     */\n    getElement(elementId) {\n        for (const elements of Object.values(this.elements)) {\n            const element = elements.find(el => el.id === elementId);\n            if (element) return element;\n        }\n        return null;\n    }\n    \n    /**\n     * Generate unique element ID\n     * @returns {string}\n     */\n    generateElementId() {\n        return 'agua_' + Date.now() + '_' + Math.random().toString(36).substr(2, 9);\n    }\n    \n    // ==========================================\n    // DRAG AND DROP SYSTEM\n    // ==========================================\n    \n    /**\n     * Setup drag and drop functionality\n     */\n    setupDragAndDrop() {\n        this.setupDragEvents();\n        this.setupDropZones();\n    }\n    \n    /**\n     * Setup drag events for elements\n     */\n    setupDragEvents() {\n        // We'll attach events to individual elements in renderElement\n    }\n    \n    /**\n     * Setup drop zones (columns)\n     */\n    setupDropZones() {\n        Object.keys(this.columns).forEach(columnType => {\n            const column = this.columns[columnType];\n            if (!column) return;\n            \n            const columnContainer = column.closest('.agua-columna');\n            if (!columnContainer) return;\n            \n            // Dragover event\n            columnContainer.addEventListener('dragover', (e) => {\n                e.preventDefault();\n                columnContainer.classList.add('drag-over');\n            });\n            \n            // Dragleave event\n            columnContainer.addEventListener('dragleave', (e) => {\n                if (!columnContainer.contains(e.relatedTarget)) {\n                    columnContainer.classList.remove('drag-over');\n                }\n            });\n            \n            // Drop event\n            columnContainer.addEventListener('drop', (e) => {\n                e.preventDefault();\n                columnContainer.classList.remove('drag-over');\n                \n                const draggedElementId = e.dataTransfer.getData('text/plain');\n                if (draggedElementId && this.dragState.originalParent) {\n                    const originalColumn = this.getElementColumn(draggedElementId);\n                    if (originalColumn !== columnType) {\n                        this.moveElement(draggedElementId, originalColumn, columnType);\n                    }\n                }\n                \n                this.resetDragState();\n            });\n        });\n    }\n    \n    /**\n     * Make element draggable\n     * @param {Element} elementDOM - DOM element\n     * @param {Object} element - Element data\n     */\n    makeDraggable(elementDOM, element) {\n        elementDOM.draggable = true;\n        \n        elementDOM.addEventListener('dragstart', (e) => {\n            this.handleDragStart(e, element);\n        });\n        \n        elementDOM.addEventListener('dragend', (e) => {\n            this.handleDragEnd(e, element);\n        });\n        \n        // Mouse events for better visual feedback\n        elementDOM.addEventListener('mousedown', (e) => {\n            this.dragState.isDragging = true;\n            this.dragState.draggedElement = element;\n            this.dragState.originalParent = elementDOM.parentElement;\n            this.dragState.originalIndex = Array.from(elementDOM.parentElement.children).indexOf(elementDOM);\n        });\n    }\n    \n    /**\n     * Handle drag start\n     * @param {DragEvent} e - Drag event\n     * @param {Object} element - Element data\n     */\n    handleDragStart(e, element) {\n        e.dataTransfer.setData('text/plain', element.id);\n        e.dataTransfer.effectAllowed = 'move';\n        \n        // Add dragging visual feedback\n        e.target.classList.add('dragging');\n        \n        // Store drag state\n        this.dragState = {\n            isDragging: true,\n            draggedElement: element,\n            originalParent: e.target.parentElement,\n            originalIndex: Array.from(e.target.parentElement.children).indexOf(e.target)\n        };\n    }\n    \n    /**\n     * Handle drag end\n     * @param {DragEvent} e - Drag event\n     * @param {Object} element - Element data\n     */\n    handleDragEnd(e, element) {\n        e.target.classList.remove('dragging');\n        \n        // Remove drag over states from all columns\n        $$('.agua-columna').forEach(column => {\n            column.classList.remove('drag-over');\n        });\n        \n        this.resetDragState();\n    }\n    \n    /**\n     * Reset drag state\n     */\n    resetDragState() {\n        this.dragState = {\n            isDragging: false,\n            draggedElement: null,\n            dragOffset: { x: 0, y: 0 },\n            originalParent: null,\n            originalIndex: null\n        };\n    }\n    \n    /**\n     * Get element's current column\n     * @param {string} elementId - Element ID\n     * @returns {string|null}\n     */\n    getElementColumn(elementId) {\n        for (const [column, elements] of Object.entries(this.elements)) {\n            if (elements.find(el => el.id === elementId)) {\n                return column;\n            }\n        }\n        return null;\n    }\n    \n    // ==========================================\n    // UI RENDERING\n    // ==========================================\n    \n    /**\n     * Render all elements in all columns\n     */\n    renderAllElements() {\n        Object.keys(this.elements).forEach(columnType => {\n            this.renderColumn(columnType);\n        });\n    }\n    \n    /**\n     * Render specific column\n     * @param {string} columnType - Column type\n     */\n    renderColumn(columnType) {\n        const container = this.columns[columnType];\n        if (!container) return;\n        \n        // Clear existing elements\n        container.innerHTML = '';\n        \n        // Render elements\n        this.elements[columnType].forEach(element => {\n            const elementDOM = this.createElementDOM(element, columnType);\n            container.appendChild(elementDOM);\n        });\n    }\n    \n    /**\n     * Render individual element\n     * @param {Object} element - Element data\n     * @param {string} columnType - Column type\n     */\n    renderElement(element, columnType) {\n        const container = this.columns[columnType];\n        if (!container) return;\n        \n        // Remove existing element if present\n        const existingElement = container.querySelector(`[data-id=\"${element.id}\"]`);\n        if (existingElement) {\n            existingElement.remove();\n        }\n        \n        // Create and add new element\n        const elementDOM = this.createElementDOM(element, columnType);\n        container.appendChild(elementDOM);\n    }\n    \n    /**\n     * Create DOM element for agua element\n     * @param {Object} element - Element data\n     * @param {string} columnType - Column type\n     * @returns {Element}\n     */\n    createElementDOM(element, columnType) {\n        const config = AGUA_CONFIG.columns[columnType];\n        \n        const elementDOM = createElement('div', {\n            className: 'agua-elemento bg-[var(--bg-secondary)] border border-transparent rounded-lg p-4 cursor-move hover:bg-[var(--bg-input)] transition-all duration-200',\n            'data-id': element.id,\n            'data-column': columnType\n        });\n        \n        // Element content\n        elementDOM.innerHTML = `\n            <div class=\"flex items-center space-x-3\">\n                <div class=\"w-2 h-2 rounded-full flex-shrink-0\" style=\"background: ${config.color}\"></div>\n                <div class=\"flex-1 min-w-0\">\n                    <h4 class=\"font-medium text-[var(--text-primary)] truncate\">${element.title}</h4>\n                    ${element.description ? `<p class=\"text-sm text-[var(--text-muted)] mt-1 line-clamp-2\">${element.description}</p>` : ''}\n                    ${element.tags.length > 0 ? `\n                        <div class=\"flex flex-wrap gap-1 mt-2\">\n                            ${element.tags.map(tag => `\n                                <span class=\"text-xs px-2 py-1 bg-[var(--bg-input)] rounded-full text-[var(--text-secondary)]\">${tag}</span>\n                            `).join('')}\n                        </div>\n                    ` : ''}\n                </div>\n                <div class=\"flex items-center space-x-2 opacity-0 group-hover:opacity-100 transition-opacity\">\n                    <button class=\"edit-element-btn p-1 rounded hover:bg-[var(--bg-input)] transition-colors\" \n                            data-id=\"${element.id}\" title=\"Editar\">\n                        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\">\n                            <path d=\"M11 4H4a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2v-7\"></path>\n                            <path d=\"M18.5 2.5a2.121 2.121 0 0 1 3 3L12 15l-4 1 1-4 9.5-9.5z\"></path>\n                        </svg>\n                    </button>\n                    <button class=\"remove-element-btn p-1 rounded hover:bg-red-500/20 hover:text-red-400 transition-colors\" \n                            data-id=\"${element.id}\" title=\"Eliminar\">\n                        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\">\n                            <polyline points=\"3,6 5,6 21,6\"></polyline>\n                            <path d=\"M19,6v14a2,2,0,0,1-2,2H7a2,2,0,0,1-2-2V6M8,6V4a2,2,0,0,1,2-2h4a2,2,0,0,1,2,2V6\"></path>\n                            <line x1=\"10\" y1=\"11\" x2=\"10\" y2=\"17\"></line>\n                            <line x1=\"14\" y1=\"11\" x2=\"14\" y2=\"17\"></line>\n                        </svg>\n                    </button>\n                </div>\n            </div>\n        `;\n        \n        // Make draggable\n        this.makeDraggable(elementDOM, element);\n        \n        // Add event listeners\n        this.addElementEventListeners(elementDOM, element);\n        \n        return elementDOM;\n    }\n    \n    /**\n     * Add event listeners to element DOM\n     * @param {Element} elementDOM - DOM element\n     * @param {Object} element - Element data\n     */\n    addElementEventListeners(elementDOM, element) {\n        // Edit button\n        const editBtn = elementDOM.querySelector('.edit-element-btn');\n        if (editBtn) {\n            editBtn.addEventListener('click', (e) => {\n                e.stopPropagation();\n                this.showEditElementModal(element);\n            });\n        }\n        \n        // Remove button\n        const removeBtn = elementDOM.querySelector('.remove-element-btn');\n        if (removeBtn) {\n            removeBtn.addEventListener('click', (e) => {\n                e.stopPropagation();\n                this.confirmRemoveElement(element.id);\n            });\n        }\n        \n        // Click to select\n        elementDOM.addEventListener('click', (e) => {\n            this.selectElement(element.id);\n        });\n        \n        // Double click to edit\n        elementDOM.addEventListener('dblclick', (e) => {\n            e.preventDefault();\n            this.showEditElementModal(element);\n        });\n    }\n    \n    /**\n     * Select element\n     * @param {string} elementId - Element ID\n     */\n    selectElement(elementId) {\n        // Remove previous selection\n        $$('.agua-elemento.selected').forEach(el => {\n            el.classList.remove('selected');\n        });\n        \n        // Add selection to new element\n        const elementDOM = $(`.agua-elemento[data-id=\"${elementId}\"]`);\n        if (elementDOM) {\n            elementDOM.classList.add('selected');\n        }\n    }\n    \n    // ==========================================\n    // MODAL DIALOGS\n    // ==========================================\n    \n    /**\n     * Show add element modal\n     * @param {string} columnType - Target column type\n     */\n    async showAddElementModal(columnType) {\n        const config = AGUA_CONFIG.columns[columnType];\n        \n        const modalContent = createElement('div', {\n            className: 'space-y-4'\n        });\n        \n        modalContent.innerHTML = `\n            <div class=\"space-y-4\">\n                <div>\n                    <label class=\"block text-sm font-medium mb-2\">Título *</label>\n                    <input type=\"text\" id=\"element-title\" \n                           class=\"discord-input w-full p-3 rounded-lg\" \n                           placeholder=\"Ingresa el título del elemento\"\n                           required>\n                </div>\n                \n                <div>\n                    <label class=\"block text-sm font-medium mb-2\">Descripción</label>\n                    <textarea id=\"element-description\" \n                              class=\"discord-input w-full p-3 rounded-lg\" \n                              rows=\"3\" \n                              placeholder=\"Descripción opcional del elemento\"></textarea>\n                </div>\n                \n                <div>\n                    <label class=\"block text-sm font-medium mb-2\">Tipo</label>\n                    <select id=\"element-type\" class=\"discord-input w-full p-3 rounded-lg\">\n                        ${Object.entries(AGUA_CONFIG.elementTypes).map(([key, value]) => \n                            `<option value=\"${key}\">${value}</option>`\n                        ).join('')}\n                    </select>\n                </div>\n                \n                <div>\n                    <label class=\"block text-sm font-medium mb-2\">Prioridad</label>\n                    <select id=\"element-priority\" class=\"discord-input w-full p-3 rounded-lg\">\n                        <option value=\"low\">Baja</option>\n                        <option value=\"medium\" selected>Media</option>\n                        <option value=\"high\">Alta</option>\n                    </select>\n                </div>\n                \n                <div>\n                    <label class=\"block text-sm font-medium mb-2\">Etiquetas</label>\n                    <input type=\"text\" id=\"element-tags\" \n                           class=\"discord-input w-full p-3 rounded-lg\" \n                           placeholder=\"Etiquetas separadas por comas\">\n                </div>\n                \n                <div class=\"flex space-x-3 pt-4\">\n                    <button id=\"save-element\" class=\"discord-button-primary px-6 py-2 rounded-lg flex-1\">\n                        Añadir a ${config.name}\n                    </button>\n                    <button id=\"cancel-element\" class=\"discord-button-secondary px-6 py-2 rounded-lg\">\n                        Cancelar\n                    </button>\n                </div>\n            </div>\n        `;\n        \n        const modal = await uiManager.showModal(modalContent, {\n            title: `Añadir elemento a ${config.name}`,\n            size: 'medium',\n            closable: true\n        });\n        \n        // Event listeners\n        const titleInput = $('#element-title');\n        const saveBtn = $('#save-element');\n        const cancelBtn = $('#cancel-element');\n        \n        if (titleInput) {\n            titleInput.focus();\n        }\n        \n        if (saveBtn) {\n            saveBtn.addEventListener('click', () => {\n                this.handleSaveElement(columnType, modal);\n            });\n        }\n        \n        if (cancelBtn) {\n            cancelBtn.addEventListener('click', () => {\n                uiManager.closeModal();\n            });\n        }\n        \n        // Enter to save\n        modalContent.addEventListener('keydown', (e) => {\n            if (e.key === 'Enter' && e.ctrlKey) {\n                this.handleSaveElement(columnType, modal);\n            }\n        });\n    }\n    \n    /**\n     * Handle save element from modal\n     * @param {string} columnType - Column type\n     * @param {Promise} modal - Modal promise\n     */\n    handleSaveElement(columnType, modal) {\n        const title = $('#element-title')?.value.trim();\n        const description = $('#element-description')?.value.trim();\n        const type = $('#element-type')?.value;\n        const priority = $('#element-priority')?.value;\n        const tagsInput = $('#element-tags')?.value.trim();\n        \n        if (!title) {\n            uiManager.showNotification('El título es requerido', 'error');\n            return;\n        }\n        \n        const tags = tagsInput ? tagsInput.split(',').map(tag => tag.trim()).filter(tag => tag.length > 0) : [];\n        \n        const elementData = {\n            title,\n            description,\n            type,\n            priority,\n            tags\n        };\n        \n        this.addElement(columnType, elementData);\n        uiManager.closeModal();\n    }\n    \n    /**\n     * Show edit element modal\n     * @param {Object} element - Element to edit\n     */\n    async showEditElementModal(element) {\n        const modalContent = createElement('div', {\n            className: 'space-y-4'\n        });\n        \n        modalContent.innerHTML = `\n            <div class=\"space-y-4\">\n                <div>\n                    <label class=\"block text-sm font-medium mb-2\">Título *</label>\n                    <input type=\"text\" id=\"edit-element-title\" \n                           class=\"discord-input w-full p-3 rounded-lg\" \n                           value=\"${element.title}\"\n                           required>\n                </div>\n                \n                <div>\n                    <label class=\"block text-sm font-medium mb-2\">Descripción</label>\n                    <textarea id=\"edit-element-description\" \n                              class=\"discord-input w-full p-3 rounded-lg\" \n                              rows=\"3\">${element.description || ''}</textarea>\n                </div>\n                \n                <div>\n                    <label class=\"block text-sm font-medium mb-2\">Tipo</label>\n                    <select id=\"edit-element-type\" class=\"discord-input w-full p-3 rounded-lg\">\n                        ${Object.entries(AGUA_CONFIG.elementTypes).map(([key, value]) => \n                            `<option value=\"${key}\" ${key === element.type ? 'selected' : ''}>${value}</option>`\n                        ).join('')}\n                    </select>\n                </div>\n                \n                <div>\n                    <label class=\"block text-sm font-medium mb-2\">Prioridad</label>\n                    <select id=\"edit-element-priority\" class=\"discord-input w-full p-3 rounded-lg\">\n                        <option value=\"low\" ${element.priority === 'low' ? 'selected' : ''}>Baja</option>\n                        <option value=\"medium\" ${element.priority === 'medium' ? 'selected' : ''}>Media</option>\n                        <option value=\"high\" ${element.priority === 'high' ? 'selected' : ''}>Alta</option>\n                    </select>\n                </div>\n                \n                <div>\n                    <label class=\"block text-sm font-medium mb-2\">Etiquetas</label>\n                    <input type=\"text\" id=\"edit-element-tags\" \n                           class=\"discord-input w-full p-3 rounded-lg\" \n                           value=\"${element.tags.join(', ')}\">\n                </div>\n                \n                <div class=\"flex space-x-3 pt-4\">\n                    <button id=\"update-element\" class=\"discord-button-primary px-6 py-2 rounded-lg flex-1\">\n                        Actualizar\n                    </button>\n                    <button id=\"cancel-edit\" class=\"discord-button-secondary px-6 py-2 rounded-lg\">\n                        Cancelar\n                    </button>\n                </div>\n            </div>\n        `;\n        \n        const modal = await uiManager.showModal(modalContent, {\n            title: 'Editar elemento',\n            size: 'medium',\n            closable: true\n        });\n        \n        // Event listeners\n        const titleInput = $('#edit-element-title');\n        const updateBtn = $('#update-element');\n        const cancelBtn = $('#cancel-edit');\n        \n        if (titleInput) {\n            titleInput.focus();\n            titleInput.select();\n        }\n        \n        if (updateBtn) {\n            updateBtn.addEventListener('click', () => {\n                this.handleUpdateElement(element.id, modal);\n            });\n        }\n        \n        if (cancelBtn) {\n            cancelBtn.addEventListener('click', () => {\n                uiManager.closeModal();\n            });\n        }\n    }\n    \n    /**\n     * Handle update element from modal\n     * @param {string} elementId - Element ID\n     * @param {Promise} modal - Modal promise\n     */\n    handleUpdateElement(elementId, modal) {\n        const title = $('#edit-element-title')?.value.trim();\n        const description = $('#edit-element-description')?.value.trim();\n        const type = $('#edit-element-type')?.value;\n        const priority = $('#edit-element-priority')?.value;\n        const tagsInput = $('#edit-element-tags')?.value.trim();\n        \n        if (!title) {\n            uiManager.showNotification('El título es requerido', 'error');\n            return;\n        }\n        \n        const tags = tagsInput ? tagsInput.split(',').map(tag => tag.trim()).filter(tag => tag.length > 0) : [];\n        \n        const updates = {\n            title,\n            description,\n            type,\n            priority,\n            tags\n        };\n        \n        this.updateElement(elementId, updates);\n        uiManager.closeModal();\n        \n        uiManager.showNotification(\n            'Elemento actualizado correctamente',\n            'success',\n            { duration: 2000 }\n        );\n    }\n    \n    /**\n     * Confirm element removal\n     * @param {string} elementId - Element ID\n     */\n    confirmRemoveElement(elementId) {\n        const element = this.getElement(elementId);\n        if (!element) return;\n        \n        const confirmed = confirm(`¿Estás seguro de que quieres eliminar \"${element.title}\"?`);\n        \n        if (confirmed) {\n            this.removeElement(elementId);\n        }\n    }\n    \n    // ==========================================\n    // STATISTICS AND HISTORY\n    // ==========================================\n    \n    /**\n     * Update statistics display\n     */\n    updateStats() {\n        const stats = {\n            totalElements: Object.values(this.elements).reduce((sum, arr) => sum + arr.length, 0),\n            valor: this.elements.valor.length,\n            anadir: this.elements.anadir.length,\n            noAnadir: this.elements.noAnadir.length\n        };\n        \n        // Update state\n        setState('agua.stats', {\n            ...stats,\n            totalMoves: this.history.filter(h => h.action === 'move').length,\n            lastActivity: Date.now()\n        });\n        \n        // Update UI stats\n        this.updateStatsUI(stats);\n    }\n    \n    /**\n     * Update statistics UI\n     * @param {Object} stats - Statistics data\n     */\n    updateStatsUI(stats) {\n        const statElements = $$('.agua-stat-number');\n        \n        if (statElements.length >= 3) {\n            statElements[0].textContent = stats.valor;\n            statElements[1].textContent = stats.anadir;\n            statElements[2].textContent = stats.noAnadir;\n        }\n    }\n    \n    /**\n     * Add entry to history\n     * @param {Object} entry - History entry\n     */\n    addToHistory(entry) {\n        this.history.push(entry);\n        \n        // Limit history size\n        if (this.history.length > 100) {\n            this.history.shift();\n        }\n        \n        setState('agua.history', this.history);\n    }\n    \n    /**\n     * Get activity history\n     * @param {number} limit - Maximum entries to return\n     * @returns {Array}\n     */\n    getHistory(limit = 10) {\n        return this.history.slice(-limit).reverse();\n    }\n    \n    // ==========================================\n    // STATE MANAGEMENT\n    // ==========================================\n    \n    /**\n     * Update state in state manager\n     */\n    updateState() {\n        setState('agua.elements', this.elements);\n    }\n    \n    /**\n     * Setup state subscriptions\n     */\n    setupStateSubscriptions() {\n        // Subscribe to agua elements changes\n        subscribe('agua.elements', (elements) => {\n            if (elements && Object.keys(elements).length > 0) {\n                this.elements = elements;\n                this.renderAllElements();\n                this.updateStats();\n            }\n        });\n        \n        // Subscribe to app state changes\n        subscribe('app.currentSubSection', (subSection) => {\n            if (subSection === 'agua') {\n                this.updateStats();\n            }\n        });\n    }\n    \n    // ==========================================\n    // UTILITY METHODS\n    // ==========================================\n    \n    /**\n     * Export elements data\n     * @returns {Object}\n     */\n    exportData() {\n        return {\n            elements: deepClone(this.elements),\n            history: deepClone(this.history),\n            exported: Date.now()\n        };\n    }\n    \n    /**\n     * Import elements data\n     * @param {Object} data - Data to import\n     * @returns {boolean}\n     */\n    importData(data) {\n        try {\n            if (data.elements) {\n                this.elements = data.elements;\n                this.renderAllElements();\n                this.updateState();\n                this.updateStats();\n            }\n            \n            if (data.history) {\n                this.history = data.history;\n                setState('agua.history', this.history);\n            }\n            \n            uiManager.showNotification(\n                'Datos importados correctamente',\n                'success',\n                { duration: 3000 }\n            );\n            \n            return true;\n        } catch (error) {\n            console.error('Failed to import data:', error);\n            uiManager.showNotification(\n                'Error al importar datos',\n                'error',\n                { duration: 3000 }\n            );\n            return false;\n        }\n    }\n    \n    /**\n     * Clear all elements\n     * @param {boolean} confirm - Whether to show confirmation\n     * @returns {boolean}\n     */\n    clearAll(confirm = true) {\n        if (confirm && !window.confirm('¿Estás seguro de que quieres eliminar todos los elementos?')) {\n            return false;\n        }\n        \n        this.elements = {\n            valor: [],\n            anadir: [],\n            noAnadir: []\n        };\n        \n        this.history = [];\n        \n        this.renderAllElements();\n        this.updateState();\n        this.updateStats();\n        \n        uiManager.showNotification(\n            'Todos los elementos han sido eliminados',\n            'info',\n            { duration: 3000 }\n        );\n        \n        return true;\n    }\n    \n    /**\n     * Get system statistics\n     * @returns {Object}\n     */\n    getStats() {\n        return {\n            totalElements: Object.values(this.elements).reduce((sum, arr) => sum + arr.length, 0),\n            elementsByColumn: {\n                valor: this.elements.valor.length,\n                anadir: this.elements.anadir.length,\n                noAnadir: this.elements.noAnadir.length\n            },\n            totalMoves: this.history.filter(h => h.action === 'move').length,\n            totalUpdates: this.history.filter(h => h.action === 'update').length,\n            historyLength: this.history.length,\n            isInitialized: this.isInitialized\n        };\n    }\n    \n    /**\n     * Debug method\n     */\n    debug() {\n        console.group('💧 Agua System Debug');\n        console.log('Statistics:', this.getStats());\n        console.log('Elements:', this.elements);\n        console.log('History:', this.history.slice(-10));\n        console.log('Drag state:', this.dragState);\n        console.groupEnd();\n    }\n}\n\n// ==========================================\n// CREATE AND EXPORT AGUA SYSTEM INSTANCE\n// ==========================================\n\nconst aguaSystem = new AguaSystem();\n\nexport default aguaSystem;\nexport { AguaSystem };"