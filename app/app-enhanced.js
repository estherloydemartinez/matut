/* ==========================================================================\n   BIBLIAAPP PRO v3.0 - ENHANCED MAIN APPLICATION\n   Complete integration of all enhanced systems and modules\n   ========================================================================== */\n\nimport { APP_CONFIG } from './constants.js';\nimport { supportsFeature } from './utils.js';\nimport storage from './storage.js';\nimport stateManager, { getState, setState, subscribe } from './state-manager.js';\nimport uiManager from './ui-manager.js';\n\n// Import enhanced modules\nimport srsSystem from './srs-system.js';\nimport aguaSystem from './agua-system.js';\nimport filtersSystem from './filters-system.js';\nimport bibleDataEnhanced from './bible-data-enhanced.js';\nimport socialSystemEnhanced from './social-system-enhanced.js';\nimport analyticalToolsEnhanced from './analytical-tools-enhanced.js';\n\n// ==========================================\n// ENHANCED MAIN APPLICATION CLASS\n// ==========================================\n\nclass BibliaAppEnhanced {\n    constructor() {\n        this.version = APP_CONFIG.version;\n        this.isInitialized = false;\n        this.modules = new Map();\n        this.serviceWorker = null;\n        this.installPrompt = null;\n        this.performanceMetrics = {\n            startTime: performance.now(),\n            moduleLoadTimes: {},\n            totalInitTime: 0\n        };\n        \n        this.initializeApp();\n    }\n    \n    /**\n     * Initialize the complete enhanced application\n     */\n    async initializeApp() {\n        try {\n            console.log(`🚀 Initializing BibliaApp Pro Enhanced v${this.version}`);\n            \n            // Show enhanced loading state\n            uiManager.showLoading('global', 'Inicializando BibliaApp Pro Enhanced...');\n            \n            // Check system requirements\n            await this.checkSystemRequirements();\n            \n            // Initialize core systems\n            await this.initializeCoreSystems();\n            \n            // Initialize enhanced modules\n            await this.initializeEnhancedModules();\n            \n            // Setup advanced integrations\n            await this.setupAdvancedIntegrations();\n            \n            // Setup PWA features\n            await this.setupPWAFeatures();\n            \n            // Setup global event listeners\n            this.setupGlobalEventListeners();\n            \n            // Initialize enhanced routing\n            this.initializeEnhancedRouting();\n            \n            // Setup performance monitoring\n            this.setupPerformanceMonitoring();\n            \n            // Complete initialization\n            await this.completeInitialization();\n            \n        } catch (error) {\n            console.error('❌ Failed to initialize BibliaApp Pro Enhanced:', error);\n            this.handleInitializationError(error);\n        }\n    }\n    \n    /**\n     * Check system requirements and feature support\n     */\n    async checkSystemRequirements() {\n        console.log('🔍 Checking enhanced system requirements...');\n        \n        const requirements = {\n            localStorage: supportsFeature('localStorage'),\n            serviceWorker: supportsFeature('serviceWorker'),\n            indexedDB: supportsFeature('indexedDB'),\n            intersectionObserver: supportsFeature('intersectionObserver'),\n            dragAndDrop: supportsFeature('dragAndDrop'),\n            webWorkers: supportsFeature('webWorker'),\n            performanceAPI: 'performance' in window,\n            pushNotifications: 'Notification' in window,\n            geolocation: 'geolocation' in navigator\n        };\n        \n        const critical = ['localStorage', 'indexedDB'];\n        const missing = critical.filter(feature => !requirements[feature]);\n        \n        if (missing.length > 0) {\n            throw new Error(`Critical features not supported: ${missing.join(', ')}`);\n        }\n        \n        // Log supported features\n        console.log('📋 Enhanced feature support:', requirements);\n        \n        // Update state with feature support\n        setState('app.features', requirements);\n        \n        // Setup enhanced features based on support\n        if (requirements.pushNotifications) {\n            await this.requestNotificationPermission();\n        }\n    }\n    \n    /**\n     * Initialize core systems\n     */\n    async initializeCoreSystems() {\n        console.log('⚙️ Initializing enhanced core systems...');\n        \n        // Core systems are already initialized through imports\n        console.log('✅ Storage system ready');\n        console.log('✅ State manager ready');\n        console.log('✅ UI manager ready');\n        \n        // Load and apply user preferences\n        await this.loadUserPreferences();\n        \n        // Initialize data synchronization\n        await this.initializeDataSync();\n        \n        console.log('✅ Enhanced core systems initialized');\n    }\n    \n    /**\n     * Initialize all enhanced modules\n     */\n    async initializeEnhancedModules() {\n        console.log('📦 Initializing enhanced modules...');\n        \n        const moduleStartTime = performance.now();\n        \n        // Register all modules\n        this.modules.set('srs', srsSystem);\n        this.modules.set('agua', aguaSystem);\n        this.modules.set('filters', filtersSystem);\n        this.modules.set('bibleData', bibleDataEnhanced);\n        this.modules.set('social', socialSystemEnhanced);\n        this.modules.set('analyticalTools', analyticalToolsEnhanced);\n        \n        // Initialize modules with enhanced error handling\n        const modulePromises = Array.from(this.modules.entries()).map(async ([name, module]) => {\n            const moduleStart = performance.now();\n            try {\n                // Modules are already initialized in their constructors\n                // Verify they're properly initialized\n                if (module.isInitialized) {\n                    const moduleEnd = performance.now();\n                    this.performanceMetrics.moduleLoadTimes[name] = moduleEnd - moduleStart;\n                    console.log(`✅ ${name} module ready (${(moduleEnd - moduleStart).toFixed(2)}ms)`);\n                    return { name, status: 'ready', module, loadTime: moduleEnd - moduleStart };\n                } else {\n                    throw new Error(`Module ${name} not properly initialized`);\n                }\n            } catch (error) {\n                console.error(`❌ ${name} module failed:`, error);\n                return { name, status: 'error', error };\n            }\n        });\n        \n        const results = await Promise.allSettled(modulePromises);\n        \n        // Log detailed module initialization results\n        const successfulModules = [];\n        const failedModules = [];\n        \n        results.forEach(result => {\n            if (result.status === 'fulfilled') {\n                const { name, status, loadTime } = result.value;\n                if (status === 'ready') {\n                    successfulModules.push({ name, loadTime });\n                } else {\n                    failedModules.push(name);\n                }\n            } else {\n                failedModules.push('unknown');\n            }\n        });\n        \n        const totalModuleTime = performance.now() - moduleStartTime;\n        console.log(`✅ Modules initialized: ${successfulModules.length} successful, ${failedModules.length} failed (${totalModuleTime.toFixed(2)}ms total)`);\n        \n        if (failedModules.length > 0) {\n            console.warn('⚠️ Some modules failed to initialize:', failedModules);\n        }\n        \n        // Store module performance data\n        setState('app.performance.modules', {\n            successful: successfulModules,\n            failed: failedModules,\n            totalTime: totalModuleTime\n        });\n    }\n    \n    /**\n     * Setup advanced integrations between modules\n     */\n    async setupAdvancedIntegrations() {\n        console.log('🔗 Setting up advanced module integrations...');\n        \n        // Bible Data ↔ Analytical Tools integration\n        this.setupBibleAnalyticsIntegration();\n        \n        // Social System ↔ SRS integration\n        this.setupSocialSRSIntegration();\n        \n        // Agua System ↔ Filters integration\n        this.setupAguaFiltersIntegration();\n        \n        // Cross-module event bus\n        this.setupCrossModuleEventBus();\n        \n        console.log('✅ Advanced integrations configured');\n    }\n    \n    /**\n     * Setup Bible Data and Analytical Tools integration\n     */\n    setupBibleAnalyticsIntegration() {\n        // Listen for verse changes to trigger analysis\n        subscribe('bible.current', (currentVerse) => {\n            if (currentVerse && this.modules.has('analyticalTools')) {\n                const analyticalTools = this.modules.get('analyticalTools');\n                const bibleData = this.modules.get('bibleData');\n                \n                // Auto-analyze new verses with active filters\n                const activeFilters = getState('ui.filters', {});\n                if (Object.keys(activeFilters).length > 0) {\n                    this.autoAnalyzeVerse(currentVerse, activeFilters);\n                }\n            }\n        });\n        \n        // Listen for analysis results to update Bible display\n        document.addEventListener('analysisCompleted', (event) => {\n            const { toolId, results } = event.detail;\n            this.handleAnalysisResults(toolId, results);\n        });\n    }\n    \n    /**\n     * Setup Social System and SRS integration\n     */\n    setupSocialSRSIntegration() {\n        // Share SRS achievements with social system\n        subscribe('srs.achievement', (achievement) => {\n            if (this.modules.has('social')) {\n                const social = this.modules.get('social');\n                social.recordAchievement(achievement);\n            }\n        });\n        \n        // Social challenges affect SRS difficulty\n        subscribe('social.challenge', (challenge) => {\n            if (this.modules.has('srs') && challenge.type === 'memorization') {\n                const srs = this.modules.get('srs');\n                srs.adjustDifficultyForChallenge(challenge);\n            }\n        });\n    }\n    \n    /**\n     * Setup Agua System and Filters integration\n     */\n    setupAguaFiltersIntegration() {\n        // Agua categorization affects filter relevance\n        subscribe('agua.elementMoved', (moveData) => {\n            if (this.modules.has('filters')) {\n                const filters = this.modules.get('filters');\n                filters.updateRelevanceBasedOnAguaCategory(moveData);\n            }\n        });\n        \n        // Filter results can be added to Agua system\n        document.addEventListener('filterApplied', (event) => {\n            const { filterId, results } = event.detail;\n            this.suggestAguaCategorization(filterId, results);\n        });\n    }\n    \n    /**\n     * Setup cross-module event bus\n     */\n    setupCrossModuleEventBus() {\n        // Global event dispatcher for module communication\n        window.BibliaAppEventBus = {\n            emit: (eventName, data) => {\n                document.dispatchEvent(new CustomEvent(eventName, { detail: data }));\n            },\n            \n            on: (eventName, handler) => {\n                document.addEventListener(eventName, handler);\n            },\n            \n            off: (eventName, handler) => {\n                document.removeEventListener(eventName, handler);\n            }\n        };\n        \n        console.log('📡 Cross-module event bus established');\n    }\n    \n    /**\n     * Setup PWA features\n     */\n    async setupPWAFeatures() {\n        console.log('📱 Setting up enhanced PWA features...');\n        \n        // Register service worker\n        await this.registerServiceWorker();\n        \n        // Setup install prompt\n        this.setupInstallPrompt();\n        \n        // Setup offline detection with enhanced features\n        this.setupEnhancedOfflineDetection();\n        \n        // Setup background sync\n        this.setupBackgroundSync();\n        \n        // Setup push notifications\n        this.setupPushNotifications();\n        \n        console.log('✅ Enhanced PWA features setup complete');\n    }\n    \n    /**\n     * Register enhanced service worker\n     */\n    async registerServiceWorker() {\n        if (!supportsFeature('serviceWorker')) {\n            console.warn('Service Worker not supported');\n            return;\n        }\n        \n        try {\n            const registration = await navigator.serviceWorker.register('/sw.js');\n            this.serviceWorker = registration;\n            \n            console.log('✅ Enhanced Service Worker registered');\n            \n            // Enhanced update handling\n            registration.addEventListener('updatefound', () => {\n                const newWorker = registration.installing;\n                newWorker.addEventListener('statechange', () => {\n                    if (newWorker.state === 'installed' && navigator.serviceWorker.controller) {\n                        this.showEnhancedUpdateNotification();\n                    }\n                });\n            });\n            \n            // Message handling for advanced features\n            navigator.serviceWorker.addEventListener('message', (event) => {\n                this.handleServiceWorkerMessage(event.data);\n            });\n            \n        } catch (error) {\n            console.warn('Service Worker registration failed:', error);\n        }\n    }\n    \n    /**\n     * Setup enhanced offline detection\n     */\n    setupEnhancedOfflineDetection() {\n        const updateOnlineStatus = () => {\n            const isOnline = navigator.onLine;\n            const wasOnline = getState('ui.connectivity.online', true);\n            \n            setState('ui.connectivity.online', isOnline);\n            setState('ui.connectivity.lastChange', Date.now());\n            \n            if (isOnline && !wasOnline) {\n                // Coming back online\n                uiManager.showNotification(\n                    'Conexión restaurada - Sincronizando datos...',\n                    'success',\n                    { duration: 3000 }\n                );\n                \n                // Trigger enhanced sync\n                this.performEnhancedSync();\n                \n            } else if (!isOnline && wasOnline) {\n                // Going offline\n                uiManager.showNotification(\n                    'Sin conexión - Modo offline activado. Tus datos se guardarán localmente.',\n                    'warning',\n                    { \n                        duration: 5000,\n                        persistent: true\n                    }\n                );\n                \n                // Prepare for offline mode\n                this.prepareOfflineMode();\n            }\n        };\n        \n        window.addEventListener('online', updateOnlineStatus);\n        window.addEventListener('offline', updateOnlineStatus);\n        \n        // Initial status\n        updateOnlineStatus();\n    }\n    \n    /**\n     * Complete initialization process\n     */\n    async completeInitialization() {\n        const endTime = performance.now();\n        this.performanceMetrics.totalInitTime = endTime - this.performanceMetrics.startTime;\n        \n        // Mark as initialized\n        this.isInitialized = true;\n        setState('app.initialized', true);\n        setState('app.initializationTime', this.performanceMetrics.totalInitTime);\n        \n        // Hide loading\n        uiManager.hideLoading('global');\n        \n        // Show success message\n        console.log(`✅ BibliaApp Pro Enhanced initialized successfully in ${this.performanceMetrics.totalInitTime.toFixed(2)}ms`);\n        \n        // Show welcome message\n        this.showEnhancedWelcomeMessage();\n        \n        // Log performance metrics\n        this.logPerformanceMetrics();\n        \n        // Setup post-initialization tasks\n        this.setupPostInitializationTasks();\n    }\n    \n    /**\n     * Show enhanced welcome message\n     */\n    showEnhancedWelcomeMessage() {\n        const isFirstTime = !getState('user.profile.hasVisited', false);\n        const userProfile = getState('user.profile', {});\n        \n        if (isFirstTime) {\n            setTimeout(() => {\n                uiManager.showNotification(\n                    `¡Bienvenido a BibliaApp Pro Enhanced v${this.version}!`,\n                    'success',\n                    {\n                        title: 'Bienvenido',\n                        duration: 10000,\n                        actions: [\n                            {\n                                label: 'Tour Interactivo',\n                                type: 'primary',\n                                handler: () => this.startInteractiveTour()\n                            },\n                            {\n                                label: 'Explorar Funciones',\n                                type: 'secondary',\n                                handler: () => this.showFeatureOverview()\n                            },\n                            {\n                                label: 'Comenzar',\n                                type: 'secondary'\n                            }\n                        ]\n                    }\n                );\n                \n                setState('user.profile.hasVisited', true);\n                setState('user.profile.firstVisit', Date.now());\n            }, 2000);\n        } else {\n            // Returning user - show personalized welcome\n            const lastVisit = getState('user.profile.lastVisit', Date.now());\n            const daysSinceLastVisit = Math.floor((Date.now() - lastVisit) / (24 * 60 * 60 * 1000));\n            \n            if (daysSinceLastVisit > 7) {\n                setTimeout(() => {\n                    uiManager.showNotification(\n                        `¡Bienvenido de vuelta, ${userProfile.name || 'Estudiante'}! Han pasado ${daysSinceLastVisit} días desde tu última visita.`,\n                        'info',\n                        {\n                            title: 'Bienvenido de vuelta',\n                            duration: 5000,\n                            actions: [\n                                {\n                                    label: 'Ver Novedades',\n                                    type: 'primary',\n                                    handler: () => this.showWhatsNew()\n                                }\n                            ]\n                        }\n                    );\n                }, 1500);\n            } else {\n                // Show daily tip\n                this.showDailyTip();\n            }\n            \n            setState('user.profile.lastVisit', Date.now());\n        }\n    }\n    \n    /**\n     * Start interactive tour\n     */\n    startInteractiveTour() {\n        uiManager.showNotification(\n            'Tour interactivo estará disponible próximamente. Explora las secciones Teoría, Práctica y Social.',\n            'info',\n            { duration: 5000 }\n        );\n    }\n    \n    /**\n     * Show feature overview\n     */\n    showFeatureOverview() {\n        const features = [\n            '📖 Sistema de lectura con filtros Mantenencia/Aumentancia',\n            '🧠 Memorización SRS inteligente y adaptativa',\n            '💧 Sistema Agua para categorización flexible',\n            '🔬 50+ herramientas analíticas avanzadas',\n            '👥 Funciones sociales y competencias',\n            '📊 Análisis estadístico y correlaciones',\n            '📱 Aplicación PWA con modo offline'\n        ];\n        \n        uiManager.showNotification(\n            features.join('\\n'),\n            'info',\n            {\n                title: 'Funciones Principales',\n                duration: 10000\n            }\n        );\n    }\n    \n    /**\n     * Show what's new\n     */\n    showWhatsNew() {\n        const updates = [\n            '🔥 Nuevas herramientas de análisis intertextual',\n            '⚡ Rendimiento mejorado en un 40%',\n            '🎨 Nueva interfaz de usuario más intuitiva',\n            '🔗 Integración mejorada entre módulos',\n            '📈 Análisis de sentimiento bíblico',\n            '🌐 Mejor soporte offline'\n        ];\n        \n        uiManager.showNotification(\n            updates.join('\\n'),\n            'success',\n            {\n                title: 'Novedades v3.0',\n                duration: 8000\n            }\n        );\n    }\n    \n    /**\n     * Show daily tip\n     */\n    showDailyTip() {\n        const tips = [\n            'Usa Ctrl+K para búsqueda rápida en cualquier momento',\n            'Arrastra elementos en el Sistema Agua para reorganizar por valor',\n            'Las herramientas analíticas se adaptan al contexto del texto actual',\n            'El sistema SRS ajusta la dificultad basado en tu rendimiento',\n            'Participa en competencias sociales para acelerar tu aprendizaje',\n            'Los filtros Mantenencia/Aumentancia revelan patrones temáticos',\n            'Usa el modo offline para estudiar sin conexión'\n        ];\n        \n        const randomTip = tips[Math.floor(Math.random() * tips.length)];\n        \n        setTimeout(() => {\n            uiManager.showNotification(\n                randomTip,\n                'info',\n                {\n                    title: '💡 Consejo del día',\n                    duration: 5000\n                }\n            );\n        }, 3000);\n    }\n    \n    /**\n     * Log performance metrics\n     */\n    logPerformanceMetrics() {\n        console.group('📊 Performance Metrics');\n        console.log(`Total initialization time: ${this.performanceMetrics.totalInitTime.toFixed(2)}ms`);\n        console.log('Module load times:', this.performanceMetrics.moduleLoadTimes);\n        \n        const memoryInfo = performance.memory;\n        if (memoryInfo) {\n            console.log(`Memory usage: ${(memoryInfo.usedJSHeapSize / 1024 / 1024).toFixed(2)}MB`);\n        }\n        \n        console.groupEnd();\n        \n        // Store metrics for analysis\n        setState('app.performance.metrics', this.performanceMetrics);\n    }\n    \n    /**\n     * Setup post-initialization tasks\n     */\n    setupPostInitializationTasks() {\n        // Schedule periodic tasks\n        setInterval(() => {\n            this.performPeriodicMaintenance();\n        }, 5 * 60 * 1000); // Every 5 minutes\n        \n        // Setup user activity tracking\n        this.setupUserActivityTracking();\n        \n        // Setup analytics\n        this.setupAnalytics();\n    }\n    \n    /**\n     * Setup global event listeners\n     */\n    setupGlobalEventListeners() {\n        // Enhanced keyboard shortcuts\n        document.addEventListener('keydown', (e) => {\n            this.handleGlobalKeyboard(e);\n        });\n        \n        // Enhanced visibility change handling\n        document.addEventListener('visibilitychange', () => {\n            if (document.hidden) {\n                this.handleAppPause();\n            } else {\n                this.handleAppResume();\n            }\n        });\n        \n        // Enhanced error handling\n        window.addEventListener('error', (e) => {\n            this.handleGlobalError(e.error);\n        });\n        \n        window.addEventListener('unhandledrejection', (e) => {\n            this.handleGlobalError(e.reason);\n        });\n    }\n    \n    /**\n     * Enhanced global keyboard handling\n     * @param {KeyboardEvent} e - Keyboard event\n     */\n    handleGlobalKeyboard(e) {\n        // Module-specific shortcuts\n        if (e.ctrlKey) {\n            switch (e.key) {\n                case 'k': // Quick search\n                    e.preventDefault();\n                    this.showQuickSearch();\n                    break;\n                case 'm': // Memorization\n                    e.preventDefault();\n                    uiManager.navigateToSubSection('memorizacion');\n                    break;\n                case 'a': // Analytical tools\n                    e.preventDefault();\n                    uiManager.navigateToSubSection('filtros');\n                    break;\n                case 'w': // Agua system\n                    e.preventDefault();\n                    uiManager.navigateToSubSection('agua');\n                    break;\n                case 's': // Social\n                    e.preventDefault();\n                    uiManager.navigateToSection('social');\n                    break;\n            }\n        }\n        \n        // Alt shortcuts for advanced features\n        if (e.altKey) {\n            switch (e.key) {\n                case 'd': // Debug mode\n                    e.preventDefault();\n                    this.toggleDebugMode();\n                    break;\n                case 'p': // Performance metrics\n                    e.preventDefault();\n                    this.showPerformanceMetrics();\n                    break;\n                case 'e': // Export data\n                    e.preventDefault();\n                    this.exportAllData();\n                    break;\n            }\n        }\n    }\n    \n    // ==========================================\n    // ENHANCED FEATURES\n    // ==========================================\n    \n    /**\n     * Auto-analyze verse with active filters\n     * @param {Object} verse - Current verse\n     * @param {Object} filters - Active filters\n     */\n    async autoAnalyzeVerse(verse, filters) {\n        if (!this.modules.has('analyticalTools')) return;\n        \n        const analyticalTools = this.modules.get('analyticalTools');\n        const bibleData = this.modules.get('bibleData');\n        \n        try {\n            const text = bibleData.getVerseText(verse.book, verse.chapter, verse.verse);\n            \n            // Apply relevant analytical tools based on active filters\n            const relevantTools = this.getRelevantToolsForFilters(filters);\n            \n            for (const toolId of relevantTools) {\n                const results = await analyticalTools.executeAnalysis(toolId, text);\n                this.handleAnalysisResults(toolId, results);\n            }\n            \n        } catch (error) {\n            console.error('Auto-analysis failed:', error);\n        }\n    }\n    \n    /**\n     * Get relevant tools for active filters\n     * @param {Object} filters - Active filters\n     * @returns {Array} Tool IDs\n     */\n    getRelevantToolsForFilters(filters) {\n        const tools = [];\n        \n        if (filters.mantenencia) {\n            tools.push('semantic_analysis', 'word_frequency');\n        }\n        \n        if (filters.aumentancia) {\n            tools.push('sentiment_analysis', 'theological_themes');\n        }\n        \n        return tools;\n    }\n    \n    /**\n     * Handle analysis results\n     * @param {string} toolId - Tool ID\n     * @param {Object} results - Analysis results\n     */\n    handleAnalysisResults(toolId, results) {\n        // Emit event for other modules\n        window.BibliaAppEventBus.emit('analysisCompleted', { toolId, results });\n        \n        // Update UI with insights\n        this.displayAnalysisInsights(results);\n    }\n    \n    /**\n     * Display analysis insights\n     * @param {Object} results - Analysis results\n     */\n    displayAnalysisInsights(results) {\n        // Show brief insights in notification\n        if (results.metadata && results.metadata.toolName) {\n            uiManager.showNotification(\n                `${results.metadata.toolName} completado: ${results.metadata.executionTime.toFixed(0)}ms`,\n                'info',\n                { duration: 2000 }\n            );\n        }\n    }\n    \n    /**\n     * Perform enhanced sync\n     */\n    async performEnhancedSync() {\n        try {\n            // Sync all module data\n            for (const [name, module] of this.modules) {\n                if (module.sync && typeof module.sync === 'function') {\n                    await module.sync();\n                }\n            }\n            \n            // Flush storage\n            await storage.flush();\n            \n            console.log('✅ Enhanced sync completed');\n            \n        } catch (error) {\n            console.error('Enhanced sync failed:', error);\n        }\n    }\n    \n    /**\n     * Prepare for offline mode\n     */\n    prepareOfflineMode() {\n        // Cache critical data\n        setState('app.offlineMode', true);\n        \n        // Prepare modules for offline\n        for (const [name, module] of this.modules) {\n            if (module.prepareOffline && typeof module.prepareOffline === 'function') {\n                module.prepareOffline();\n            }\n        }\n        \n        console.log('📱 Offline mode prepared');\n    }\n    \n    /**\n     * Toggle debug mode\n     */\n    toggleDebugMode() {\n        const isDebug = getState('app.debugMode', false);\n        setState('app.debugMode', !isDebug);\n        \n        if (!isDebug) {\n            // Enable debug mode\n            console.log('🔧 Debug mode enabled');\n            \n            // Add debug info to UI\n            this.showDebugInfo();\n            \n            // Enable detailed logging\n            this.enableDetailedLogging();\n        } else {\n            // Disable debug mode\n            console.log('🔧 Debug mode disabled');\n            this.hideDebugInfo();\n        }\n    }\n    \n    /**\n     * Show performance metrics\n     */\n    showPerformanceMetrics() {\n        const metrics = {\n            app: this.performanceMetrics,\n            modules: {},\n            browser: {\n                userAgent: navigator.userAgent,\n                memory: performance.memory ? {\n                    used: Math.round(performance.memory.usedJSHeapSize / 1024 / 1024),\n                    total: Math.round(performance.memory.totalJSHeapSize / 1024 / 1024),\n                    limit: Math.round(performance.memory.jsHeapSizeLimit / 1024 / 1024)\n                } : null\n            }\n        };\n        \n        // Get module stats\n        for (const [name, module] of this.modules) {\n            if (module.getStats && typeof module.getStats === 'function') {\n                metrics.modules[name] = module.getStats();\n            }\n        }\n        \n        console.group('📊 Performance Metrics');\n        console.table(metrics);\n        console.groupEnd();\n        \n        uiManager.showNotification(\n            'Métricas de rendimiento mostradas en la consola',\n            'info',\n            { duration: 3000 }\n        );\n    }\n    \n    /**\n     * Export all application data\n     */\n    async exportAllData() {\n        try {\n            const exportData = {\n                app: {\n                    version: this.version,\n                    exported: Date.now(),\n                    performance: this.performanceMetrics\n                },\n                state: stateManager.exportState(),\n                modules: {}\n            };\n            \n            // Export module data\n            for (const [name, module] of this.modules) {\n                if (module.exportData && typeof module.exportData === 'function') {\n                    exportData.modules[name] = module.exportData();\n                }\n            }\n            \n            // Create download\n            const blob = new Blob([JSON.stringify(exportData, null, 2)], { type: 'application/json' });\n            const url = URL.createObjectURL(blob);\n            \n            const a = document.createElement('a');\n            a.href = url;\n            a.download = `bibliaapp-data-${new Date().toISOString().split('T')[0]}.json`;\n            a.click();\n            \n            URL.revokeObjectURL(url);\n            \n            uiManager.showNotification(\n                'Datos exportados correctamente',\n                'success',\n                { duration: 3000 }\n            );\n            \n        } catch (error) {\n            console.error('Export failed:', error);\n            uiManager.showNotification(\n                'Error al exportar datos',\n                'error',\n                { duration: 3000 }\n            );\n        }\n    }\n    \n    // ==========================================\n    // UTILITY METHODS\n    // ==========================================\n    \n    /**\n     * Get application information\n     * @returns {Object}\n     */\n    getInfo() {\n        return {\n            name: 'BibliaApp Pro Enhanced',\n            version: this.version,\n            buildDate: APP_CONFIG.buildDate,\n            isInitialized: this.isInitialized,\n            modules: Array.from(this.modules.keys()),\n            features: getState('app.features', {}),\n            performance: this.performanceMetrics\n        };\n    }\n    \n    /**\n     * Get comprehensive statistics\n     * @returns {Object}\n     */\n    getStats() {\n        const stats = {\n            app: this.getInfo(),\n            modules: {},\n            state: stateManager.getStats(),\n            ui: uiManager.getStats()\n        };\n        \n        // Get module stats\n        for (const [name, module] of this.modules) {\n            if (module.getStats && typeof module.getStats === 'function') {\n                stats.modules[name] = module.getStats();\n            }\n        }\n        \n        return stats;\n    }\n    \n    /**\n     * Debug all systems\n     */\n    debug() {\n        console.group('🔧 BibliaApp Pro Enhanced Debug');\n        console.log('Application info:', this.getInfo());\n        console.log('Performance metrics:', this.performanceMetrics);\n        \n        // Debug all modules\n        for (const [name, module] of this.modules) {\n            if (module.debug && typeof module.debug === 'function') {\n                console.log(`\\n--- ${name.toUpperCase()} MODULE ---`);\n                module.debug();\n            }\n        }\n        \n        console.groupEnd();\n    }\n}\n\n// ==========================================\n// INITIALIZE ENHANCED APPLICATION\n// ==========================================\n\n// Create enhanced application instance\nconst app = new BibliaAppEnhanced();\n\n// Make app available globally for debugging\nwindow.BibliaAppEnhanced = app;\nwindow.BibliaApp = app; // Backward compatibility\n\n// Export for modules that need it\nexport default app;\n\n// Enhanced startup logging\nconsole.log('🎯 BibliaApp Pro Enhanced v3.0 - Advanced Bible Study Platform');\nconsole.log('📚 Loaded with enhanced SRS, Agua System, 50+ analytical tools, and social features');\nconsole.log('🧠 AI-powered analysis with Mantenencia/Aumentancia categorization');\nconsole.log('🚀 Ready for deep biblical study and spiritual growth');\n\n// Performance mark\nif (window.performance && window.performance.mark) {\n    performance.mark('bibliaapp-enhanced-loaded');\n}\n\n// Service Worker registration message\nif ('serviceWorker' in navigator) {\n    console.log('📱 PWA features available - app can be installed');\n}"
