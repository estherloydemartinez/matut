/* ==========================================================================\n   BIBLIAAPP PRO v3.0 - ENHANCED SOCIAL SYSTEM MODULE\n   Advanced social features: communities, competencies, events, mentorship\n   ========================================================================== */\n\nimport { $, $$, createElement, debounce, deepClone } from './utils.js';\nimport { SOCIAL_CONFIG } from './constants.js';\nimport stateManager, { getState, setState, subscribe } from './state-manager.js';\nimport uiManager from './ui-manager.js';\n\n// ==========================================\n// ENHANCED SOCIAL SYSTEM CLASS\n// ==========================================\n\nclass SocialSystemEnhanced {\n    constructor() {\n        this.userProfile = null;\n        this.communities = [];\n        this.groups = [];\n        this.events = [];\n        this.competencies = {\n            teoria: [],\n            practica: []\n        };\n        this.mentorships = [];\n        this.achievements = [];\n        this.notifications = [];\n        this.connections = [];\n        this.activityFeed = [];\n        \n        this.isInitialized = false;\n        this.updateInterval = null;\n        \n        this.initializeSystem();\n    }\n    \n    /**\n     * Initialize Social System\n     */\n    async initializeSystem() {\n        try {\n            // Load user profile\n            await this.loadUserProfile();\n            \n            // Load social data\n            await this.loadSocialData();\n            \n            // Setup social interface\n            this.setupSocialInterface();\n            \n            // Setup event listeners\n            this.setupEventListeners();\n            \n            // Setup state subscriptions\n            this.setupStateSubscriptions();\n            \n            // Start periodic updates\n            this.startPeriodicUpdates();\n            \n            this.isInitialized = true;\n            console.log('‚úÖ Enhanced Social System initialized');\n            \n        } catch (error) {\n            console.error('Failed to initialize Social System:', error);\n        }\n    }\n    \n    /**\n     * Load user profile\n     */\n    async loadUserProfile() {\n        this.userProfile = getState('user.profile', {\n            id: 'user_' + Date.now(),\n            name: 'Usuario',\n            avatar: null,\n            level: 1,\n            experience: 0,\n            joinDate: Date.now(),\n            lastActivity: Date.now(),\n            role: 'member',\n            preferences: {\n                notifications: true,\n                publicProfile: true,\n                mentorshipAvailable: false\n            },\n            stats: {\n                studyDays: 0,\n                versesMemorized: 0,\n                communitiesJoined: 0,\n                eventsAttended: 0,\n                competenciesEarned: 0\n            }\n        });\n        \n        setState('user.profile', this.userProfile);\n        console.log('üë§ User profile loaded');\n    }\n    \n    /**\n     * Load social data\n     */\n    async loadSocialData() {\n        // Load communities\n        this.communities = getState('social.communities', [\n            {\n                id: 'com_general',\n                name: 'Estudio B√≠blico General',\n                description: 'Comunidad general para el estudio de la Biblia',\n                memberCount: 1247,\n                isPublic: true,\n                category: 'study',\n                language: 'es',\n                moderators: ['mod_1', 'mod_2'],\n                tags: ['principiantes', 'estudio', 'biblia'],\n                activity: 'high',\n                created: Date.now() - (30 * 24 * 60 * 60 * 1000), // 30 days ago\n                lastActivity: Date.now() - (2 * 60 * 60 * 1000), // 2 hours ago\n                image: null\n            },\n            {\n                id: 'com_nuevotestamento',\n                name: 'Nuevo Testamento',\n                description: 'Enfocado en el estudio profundo del Nuevo Testamento',\n                memberCount: 856,\n                isPublic: true,\n                category: 'study',\n                language: 'es',\n                moderators: ['mod_3'],\n                tags: ['nuevo testamento', 'jesus', 'apostoles'],\n                activity: 'medium',\n                created: Date.now() - (45 * 24 * 60 * 60 * 1000),\n                lastActivity: Date.now() - (5 * 60 * 60 * 1000),\n                image: null\n            },\n            {\n                id: 'com_antiguotestamento',\n                name: 'Antiguo Testamento',\n                description: 'Explorando las escrituras del Antiguo Testamento',\n                memberCount: 634,\n                isPublic: true,\n                category: 'study',\n                language: 'es',\n                moderators: ['mod_4', 'mod_5'],\n                tags: ['antiguo testamento', 'profetas', 'historia'],\n                activity: 'medium',\n                created: Date.now() - (60 * 24 * 60 * 60 * 1000),\n                lastActivity: Date.now() - (8 * 60 * 60 * 1000),\n                image: null\n            }\n        ]);\n        \n        // Load groups\n        this.groups = getState('social.groups', [\n            {\n                id: 'grp_principiantes',\n                name: 'Principiantes en la Fe',\n                communityId: 'com_general',\n                memberCount: 234,\n                isPrivate: false,\n                description: 'Grupo para nuevos creyentes y estudiantes principiantes',\n                level: 'beginner',\n                meetingSchedule: 'weekly',\n                nextMeeting: Date.now() + (3 * 24 * 60 * 60 * 1000)\n            },\n            {\n                id: 'grp_avanzados',\n                name: 'Estudiantes Avanzados',\n                communityId: 'com_general',\n                memberCount: 167,\n                isPrivate: false,\n                description: 'Para estudiantes con experiencia en estudios b√≠blicos',\n                level: 'advanced',\n                meetingSchedule: 'biweekly',\n                nextMeeting: Date.now() + (5 * 24 * 60 * 60 * 1000)\n            }\n        ]);\n        \n        // Load events\n        this.events = getState('social.events', [\n            {\n                id: 'evt_parabolas',\n                title: 'Estudio Semanal: Par√°bolas de Jes√∫s',\n                description: 'An√°lisis profundo de las par√°bolas y su aplicaci√≥n pr√°ctica',\n                hostId: 'user_123',\n                hostName: 'Pastor Martinez',\n                communityId: 'com_general',\n                groupId: 'grp_principiantes',\n                startTime: Date.now() + (3 * 24 * 60 * 60 * 1000),\n                endTime: Date.now() + (3 * 24 * 60 * 60 * 1000) + (2 * 60 * 60 * 1000),\n                type: 'study',\n                format: 'online',\n                maxParticipants: 50,\n                currentParticipants: 23,\n                isPublic: true,\n                tags: ['parabolas', 'nuevo testamento', 'ense√±anza'],\n                materials: ['Mateo 13', 'Lucas 15', 'Marcos 4'],\n                meetingLink: null,\n                status: 'upcoming'\n            },\n            {\n                id: 'evt_oracion',\n                title: 'Noche de Oraci√≥n y Adoraci√≥n',\n                description: 'Tiempo de oraci√≥n comunitaria y adoraci√≥n',\n                hostId: 'user_456',\n                hostName: 'Hermana Ana',\n                communityId: 'com_general',\n                groupId: null,\n                startTime: Date.now() + (7 * 24 * 60 * 60 * 1000),\n                endTime: Date.now() + (7 * 24 * 60 * 60 * 1000) + (3 * 60 * 60 * 1000),\n                type: 'prayer',\n                format: 'hybrid',\n                maxParticipants: 100,\n                currentParticipants: 67,\n                isPublic: true,\n                tags: ['oracion', 'adoracion', 'comunidad'],\n                materials: [],\n                meetingLink: 'https://meet.example.com/prayer',\n                status: 'upcoming'\n            }\n        ]);\n        \n        // Load competencies\n        this.competencies = getState('social.competencies', {\n            teoria: [\n                {\n                    id: 'comp_hermeneut_basica',\n                    name: 'Hermen√©utica B√°sica',\n                    description: 'Principios fundamentales de interpretaci√≥n b√≠blica',\n                    category: 'interpretation',\n                    level: 'beginner',\n                    requiredStudyHours: 20,\n                    prerequisites: [],\n                    skills: ['lectura contextual', 'an√°lisis literario', 'aplicaci√≥n pr√°ctica'],\n                    verification: 'peer_review',\n                    badge: 'hermeneut_basic',\n                    xpReward: 500,\n                    earnedBy: 1234,\n                    completionRate: 0.78\n                },\n                {\n                    id: 'comp_historia_biblica',\n                    name: 'Historia B√≠blica',\n                    description: 'Conocimiento del contexto hist√≥rico de las Escrituras',\n                    category: 'history',\n                    level: 'intermediate',\n                    requiredStudyHours: 35,\n                    prerequisites: ['comp_hermeneut_basica'],\n                    skills: ['cronolog√≠a b√≠blica', 'culturas antiguas', 'geograf√≠a b√≠blica'],\n                    verification: 'assessment',\n                    badge: 'historian',\n                    xpReward: 750,\n                    earnedBy: 892,\n                    completionRate: 0.64\n                },\n                {\n                    id: 'comp_teologia_sistematica',\n                    name: 'Teolog√≠a Sistem√°tica',\n                    description: 'Estudio organizado de las doctrinas cristianas',\n                    category: 'theology',\n                    level: 'advanced',\n                    requiredStudyHours: 60,\n                    prerequisites: ['comp_hermeneut_basica', 'comp_historia_biblica'],\n                    skills: ['doctrina', 'apolog√©tica', 's√≠ntesis teol√≥gica'],\n                    verification: 'mentor_review',\n                    badge: 'theologian',\n                    xpReward: 1200,\n                    earnedBy: 456,\n                    completionRate: 0.42\n                }\n            ],\n            practica: [\n                {\n                    id: 'comp_liderazgo_grupo',\n                    name: 'Liderazgo de Grupo Peque√±o',\n                    description: 'Habilidades para liderar grupos de estudio b√≠blico',\n                    category: 'leadership',\n                    level: 'intermediate',\n                    requiredPracticeHours: 40,\n                    prerequisites: ['comp_hermeneut_basica'],\n                    skills: ['facilitaci√≥n', 'din√°micas grupales', 'resoluci√≥n de conflictos'],\n                    verification: 'observation',\n                    badge: 'group_leader',\n                    xpReward: 800,\n                    earnedBy: 567,\n                    completionRate: 0.71\n                },\n                {\n                    id: 'comp_mentoria',\n                    name: 'Mentor√≠a Espiritual',\n                    description: 'Capacidad para mentorizar a otros en su crecimiento espiritual',\n                    category: 'mentorship',\n                    level: 'advanced',\n                    requiredPracticeHours: 80,\n                    prerequisites: ['comp_liderazgo_grupo', 'comp_historia_biblica'],\n                    skills: ['acompa√±amiento', 'discernimiento', 'consejer√≠a b√≠blica'],\n                    verification: 'mentee_feedback',\n                    badge: 'spiritual_mentor',\n                    xpReward: 1500,\n                    earnedBy: 234,\n                    completionRate: 0.31\n                },\n                {\n                    id: 'comp_evangelismo',\n                    name: 'Evangelismo Personal',\n                    description: 'Habilidades para compartir el evangelio efectivamente',\n                    category: 'evangelism',\n                    level: 'intermediate',\n                    requiredPracticeHours: 30,\n                    prerequisites: ['comp_hermeneut_basica'],\n                    skills: ['testimonio personal', 'presentaci√≥n del evangelio', 'seguimiento'],\n                    verification: 'practical_demonstration',\n                    badge: 'evangelist',\n                    xpReward: 600,\n                    earnedBy: 789,\n                    completionRate: 0.58\n                }\n            ]\n        });\n        \n        console.log('üèòÔ∏è Social data loaded');\n    }\n    \n    /**\n     * Setup social interface\n     */\n    setupSocialInterface() {\n        this.renderSocialContainers();\n        this.updateSocialStats();\n        \n        console.log('üé® Social interface configured');\n    }\n    \n    /**\n     * Render social containers\n     */\n    renderSocialContainers() {\n        // Render theoretical competencies\n        this.renderCompetencies('teoria');\n        \n        // Render practical competencies\n        this.renderCompetencies('practica');\n        \n        // Render events\n        this.renderEvents();\n    }\n    \n    /**\n     * Render competencies section\n     * @param {string} type - Type (teoria/practica)\n     */\n    renderCompetencies(type) {\n        const containerId = type === 'teoria' ? 'competencias-teoricas' : 'competencias-practicas';\n        const container = $(`#${containerId} .competencias-list`);\n        \n        if (!container) return;\n        \n        const competencies = this.competencies[type];\n        const userCompetencies = getState('user.competencies', []);\n        \n        container.innerHTML = competencies.map(comp => {\n            const isEarned = userCompetencies.includes(comp.id);\n            const progressPercent = this.calculateCompetencyProgress(comp.id);\n            \n            return `\n                <div class=\"competency-card bg-[var(--bg-input)] rounded-lg p-3 border border-[var(--border-color)] hover:border-[var(--bg-primary)] transition-colors cursor-pointer\"\n                     data-competency-id=\"${comp.id}\">\n                    <div class=\"flex items-start justify-between mb-2\">\n                        <div class=\"flex-1\">\n                            <h4 class=\"font-semibold text-sm text-[var(--text-primary)] mb-1\">${comp.name}</h4>\n                            <p class=\"text-xs text-[var(--text-secondary)] line-clamp-2\">${comp.description}</p>\n                        </div>\n                        <div class=\"ml-3 flex flex-col items-end\">\n                            ${isEarned ? \n                                `<span class=\"inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-green-500/20 text-green-400\">\n                                    <svg width=\"12\" height=\"12\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" class=\"mr-1\">\n                                        <polyline points=\"20,6 9,17 4,12\"></polyline>\n                                    </svg>\n                                    Completada\n                                </span>` :\n                                `<span class=\"inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-blue-500/20 text-blue-400\">\n                                    ${this.getLevelIcon(comp.level)} ${this.formatLevel(comp.level)}\n                                </span>`\n                            }\n                            <span class=\"text-xs text-[var(--text-muted)] mt-1\">${comp.earnedBy.toLocaleString()} usuarios</span>\n                        </div>\n                    </div>\n                    \n                    ${!isEarned ? `\n                        <div class=\"mt-3\">\n                            <div class=\"flex justify-between items-center mb-1\">\n                                <span class=\"text-xs text-[var(--text-secondary)]\">Progreso</span>\n                                <span class=\"text-xs text-[var(--text-secondary)]\">${progressPercent}%</span>\n                            </div>\n                            <div class=\"w-full bg-[var(--bg-secondary)] rounded-full h-1.5\">\n                                <div class=\"bg-[var(--bg-primary)] h-1.5 rounded-full transition-all duration-300\" \n                                     style=\"width: ${progressPercent}%\"></div>\n                            </div>\n                        </div>\n                    ` : ''}\n                    \n                    <div class=\"flex flex-wrap gap-1 mt-3\">\n                        ${comp.skills.slice(0, 3).map(skill => \n                            `<span class=\"inline-block px-2 py-0.5 bg-[var(--bg-card)] text-xs rounded-full text-[var(--text-muted)]\">${skill}</span>`\n                        ).join('')}\n                        ${comp.skills.length > 3 ? `<span class=\"text-xs text-[var(--text-muted)]\">+${comp.skills.length - 3} m√°s</span>` : ''}\n                    </div>\n                </div>\n            `;\n        }).join('');\n        \n        // Add click listeners\n        container.querySelectorAll('.competency-card').forEach(card => {\n            card.addEventListener('click', () => {\n                const competencyId = card.dataset.competencyId;\n                this.showCompetencyDetails(competencyId, type);\n            });\n        });\n    }\n    \n    /**\n     * Render events\n     */\n    renderEvents() {\n        const container = $('#eventos-sociales .eventos-list');\n        if (!container) return;\n        \n        const upcomingEvents = this.events.filter(event => \n            event.startTime > Date.now() && event.status === 'upcoming'\n        ).slice(0, 3);\n        \n        if (upcomingEvents.length === 0) {\n            container.innerHTML = '<p class=\"text-xs text-[var(--text-muted)]\">No hay eventos pr√≥ximos</p>';\n            return;\n        }\n        \n        container.innerHTML = upcomingEvents.map(event => {\n            const timeUntil = this.getTimeUntilEvent(event.startTime);\n            const participationPercent = Math.round((event.currentParticipants / event.maxParticipants) * 100);\n            \n            return `\n                <div class=\"event-card bg-[var(--bg-input)] rounded-lg p-3 border border-[var(--border-color)] hover:border-[var(--bg-primary)] transition-colors cursor-pointer\"\n                     data-event-id=\"${event.id}\">\n                    <div class=\"flex items-start justify-between mb-2\">\n                        <div class=\"flex-1\">\n                            <h4 class=\"font-semibold text-sm text-[var(--text-primary)] mb-1\">${event.title}</h4>\n                            <p class=\"text-xs text-[var(--text-secondary)] mb-2\">${event.description}</p>\n                            <div class=\"flex items-center space-x-3 text-xs text-[var(--text-muted)]\">\n                                <span class=\"flex items-center\">\n                                    <svg width=\"12\" height=\"12\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" class=\"mr-1\">\n                                        <circle cx=\"12\" cy=\"12\" r=\"10\"></circle>\n                                        <polyline points=\"12,6 12,12 16,14\"></polyline>\n                                    </svg>\n                                    ${timeUntil}\n                                </span>\n                                <span class=\"flex items-center\">\n                                    <svg width=\"12\" height=\"12\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" class=\"mr-1\">\n                                        <path d=\"M17 21v-2a4 4 0 0 0-4-4H5a4 4 0 0 0-4 4v2\"></path>\n                                        <circle cx=\"9\" cy=\"7\" r=\"4\"></circle>\n                                        <path d=\"M23 21v-2a4 4 0 0 0-3-3.87\"></path>\n                                        <path d=\"M16 3.13a4 4 0 0 1 0 7.75\"></path>\n                                    </svg>\n                                    ${event.currentParticipants}/${event.maxParticipants}\n                                </span>\n                                <span class=\"flex items-center\">\n                                    <svg width=\"12\" height=\"12\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" class=\"mr-1\">\n                                        <path d=\"M20 10c0 6-8 12-8 12s-8-6-8-12a8 8 0 0 1 16 0Z\"></path>\n                                        <circle cx=\"12\" cy=\"10\" r=\"3\"></circle>\n                                    </svg>\n                                    ${this.formatEventType(event.type)}\n                                </span>\n                            </div>\n                        </div>\n                        <div class=\"ml-3\">\n                            <span class=\"inline-flex items-center px-2 py-1 rounded-full text-xs font-medium ${\n                                participationPercent > 80 ? 'bg-red-500/20 text-red-400' :\n                                participationPercent > 60 ? 'bg-yellow-500/20 text-yellow-400' :\n                                'bg-green-500/20 text-green-400'\n                            }\">\n                                ${participationPercent}% lleno\n                            </span>\n                        </div>\n                    </div>\n                    \n                    <div class=\"flex items-center justify-between mt-3\">\n                        <div class=\"flex items-center space-x-2\">\n                            <div class=\"w-6 h-6 rounded-full bg-[var(--bg-primary)] flex items-center justify-center\">\n                                <span class=\"text-xs font-semibold text-white\">${event.hostName.charAt(0)}</span>\n                            </div>\n                            <span class=\"text-xs text-[var(--text-secondary)]\">${event.hostName}</span>\n                        </div>\n                        <button class=\"join-event-btn text-xs px-3 py-1 bg-[var(--bg-primary)] text-white rounded-full hover:bg-[var(--bg-primary)]/80 transition-colors\"\n                                data-event-id=\"${event.id}\">\n                            Unirse\n                        </button>\n                    </div>\n                </div>\n            `;\n        }).join('');\n        \n        // Add event listeners\n        container.querySelectorAll('.event-card').forEach(card => {\n            card.addEventListener('click', (e) => {\n                if (!e.target.classList.contains('join-event-btn')) {\n                    const eventId = card.dataset.eventId;\n                    this.showEventDetails(eventId);\n                }\n            });\n        });\n        \n        container.querySelectorAll('.join-event-btn').forEach(btn => {\n            btn.addEventListener('click', (e) => {\n                e.stopPropagation();\n                const eventId = btn.dataset.eventId;\n                this.joinEvent(eventId);\n            });\n        });\n    }\n    \n    /**\n     * Setup event listeners\n     */\n    setupEventListeners() {\n        // Add competency button\n        const addCompetencyBtn = $('.add-competencia-btn');\n        if (addCompetencyBtn) {\n            addCompetencyBtn.addEventListener('click', () => {\n                this.showCreateCompetencyModal();\n            });\n        }\n        \n        // Add event button\n        const addEventBtn = $('.add-evento-btn');\n        if (addEventBtn) {\n            addEventBtn.addEventListener('click', () => {\n                this.showCreateEventModal();\n            });\n        }\n        \n        console.log('üéß Social event listeners configured');\n    }\n    \n    /**\n     * Show competency details\n     * @param {string} competencyId - Competency ID\n     * @param {string} type - Type (teoria/practica)\n     */\n    async showCompetencyDetails(competencyId, type) {\n        const competency = this.competencies[type].find(comp => comp.id === competencyId);\n        if (!competency) return;\n        \n        const userCompetencies = getState('user.competencies', []);\n        const isEarned = userCompetencies.includes(competencyId);\n        const progress = this.calculateCompetencyProgress(competencyId);\n        \n        const modalContent = createElement('div', {\n            className: 'competency-details space-y-4'\n        });\n        \n        modalContent.innerHTML = `\n            <div class=\"competency-header border-b border-[var(--border-color)] pb-4\">\n                <div class=\"flex items-start justify-between mb-3\">\n                    <div>\n                        <h2 class=\"text-xl font-bold text-[var(--text-primary)] mb-2\">${competency.name}</h2>\n                        <p class=\"text-[var(--text-secondary)]\">${competency.description}</p>\n                    </div>\n                    <div class=\"text-right\">\n                        ${isEarned ? \n                            `<span class=\"inline-flex items-center px-3 py-1 rounded-full text-sm font-medium bg-green-500/20 text-green-400\">\n                                <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" class=\"mr-2\">\n                                    <polyline points=\"20,6 9,17 4,12\"></polyline>\n                                </svg>\n                                Completada\n                            </span>` :\n                            `<span class=\"inline-flex items-center px-3 py-1 rounded-full text-sm font-medium bg-blue-500/20 text-blue-400\">\n                                ${this.getLevelIcon(competency.level)} ${this.formatLevel(competency.level)}\n                            </span>`\n                        }\n                        <div class=\"text-xs text-[var(--text-muted)] mt-1\">\n                            ${competency.earnedBy.toLocaleString()} usuarios la han completado\n                        </div>\n                    </div>\n                </div>\n                \n                <div class=\"grid grid-cols-2 md:grid-cols-4 gap-4 text-sm\">\n                    <div>\n                        <span class=\"text-[var(--text-muted)] block\">Categor√≠a</span>\n                        <span class=\"text-[var(--text-primary)] font-medium\">${this.formatCategory(competency.category)}</span>\n                    </div>\n                    <div>\n                        <span class=\"text-[var(--text-muted)] block\">Horas requeridas</span>\n                        <span class=\"text-[var(--text-primary)] font-medium\">${competency.requiredStudyHours || competency.requiredPracticeHours} hrs</span>\n                    </div>\n                    <div>\n                        <span class=\"text-[var(--text-muted)] block\">Recompensa XP</span>\n                        <span class=\"text-[var(--text-primary)] font-medium\">${competency.xpReward}</span>\n                    </div>\n                    <div>\n                        <span class=\"text-[var(--text-muted)] block\">Verificaci√≥n</span>\n                        <span class=\"text-[var(--text-primary)] font-medium\">${this.formatVerification(competency.verification)}</span>\n                    </div>\n                </div>\n                \n                ${!isEarned ? `\n                    <div class=\"mt-4\">\n                        <div class=\"flex justify-between items-center mb-2\">\n                            <span class=\"text-sm font-medium text-[var(--text-secondary)]\">Tu progreso</span>\n                            <span class=\"text-sm text-[var(--text-secondary)]\">${progress}%</span>\n                        </div>\n                        <div class=\"w-full bg-[var(--bg-secondary)] rounded-full h-2\">\n                            <div class=\"bg-[var(--bg-primary)] h-2 rounded-full transition-all duration-300\" \n                                 style=\"width: ${progress}%\"></div>\n                        </div>\n                    </div>\n                ` : ''}\n            </div>\n            \n            <div class=\"competency-requirements\">\n                <h3 class=\"text-lg font-semibold mb-3\">Habilidades desarrolladas</h3>\n                <div class=\"grid grid-cols-1 md:grid-cols-2 gap-2\">\n                    ${competency.skills.map(skill => \n                        `<div class=\"flex items-center space-x-2 p-2 bg-[var(--bg-input)] rounded-lg\">\n                            <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" class=\"text-[var(--bg-primary)]\">\n                                <polyline points=\"20,6 9,17 4,12\"></polyline>\n                            </svg>\n                            <span class=\"text-sm text-[var(--text-secondary)]\">${skill}</span>\n                        </div>`\n                    ).join('')}\n                </div>\n            </div>\n            \n            ${competency.prerequisites.length > 0 ? `\n                <div class=\"competency-prerequisites\">\n                    <h3 class=\"text-lg font-semibold mb-3\">Prerequisitos</h3>\n                    <div class=\"space-y-2\">\n                        ${competency.prerequisites.map(prereqId => {\n                            const prereq = this.findCompetencyById(prereqId);\n                            const hasPrereq = userCompetencies.includes(prereqId);\n                            return prereq ? `\n                                <div class=\"flex items-center justify-between p-2 bg-[var(--bg-input)] rounded-lg\">\n                                    <span class=\"text-sm text-[var(--text-secondary)]\">${prereq.name}</span>\n                                    ${hasPrereq ? \n                                        `<span class=\"text-xs px-2 py-1 bg-green-500/20 text-green-400 rounded-full\">Completado</span>` :\n                                        `<span class=\"text-xs px-2 py-1 bg-red-500/20 text-red-400 rounded-full\">Pendiente</span>`\n                                    }\n                                </div>\n                            ` : '';\n                        }).join('')}\n                    </div>\n                </div>\n            ` : ''}\n            \n            <div class=\"competency-actions flex justify-between items-center pt-4 border-t border-[var(--border-color)]\">\n                <div class=\"flex space-x-3\">\n                    <button id=\"share-competency-btn\" class=\"discord-button-secondary px-4 py-2 rounded-lg\">\n                        Compartir\n                    </button>\n                    ${!isEarned ? `\n                        <button id=\"track-progress-btn\" class=\"discord-button-secondary px-4 py-2 rounded-lg\">\n                            Seguir progreso\n                        </button>\n                    ` : ''}\n                </div>\n                <div class=\"flex space-x-3\">\n                    <button id=\"close-competency-btn\" class=\"discord-button-secondary px-4 py-2 rounded-lg\">\n                        Cerrar\n                    </button>\n                    ${!isEarned && this.canStartCompetency(competency) ? `\n                        <button id=\"start-competency-btn\" class=\"discord-button-primary px-6 py-2 rounded-lg\">\n                            Comenzar\n                        </button>\n                    ` : ''}\n                </div>\n            </div>\n        `;\n        \n        const modal = await uiManager.showModal(modalContent, {\n            title: `Competencia: ${competency.name}`,\n            size: 'large',\n            closable: true\n        });\n        \n        // Setup modal event listeners\n        const closeBtn = modalContent.querySelector('#close-competency-btn');\n        if (closeBtn) {\n            closeBtn.addEventListener('click', () => uiManager.closeModal());\n        }\n        \n        const startBtn = modalContent.querySelector('#start-competency-btn');\n        if (startBtn) {\n            startBtn.addEventListener('click', () => {\n                this.startCompetency(competencyId);\n                uiManager.closeModal();\n            });\n        }\n        \n        const shareBtn = modalContent.querySelector('#share-competency-btn');\n        if (shareBtn) {\n            shareBtn.addEventListener('click', () => {\n                this.shareCompetency(competencyId);\n            });\n        }\n    }\n    \n    /**\n     * Show event details\n     * @param {string} eventId - Event ID\n     */\n    async showEventDetails(eventId) {\n        const event = this.events.find(evt => evt.id === eventId);\n        if (!event) return;\n        \n        const modalContent = createElement('div', {\n            className: 'event-details space-y-4'\n        });\n        \n        const timeUntil = this.getTimeUntilEvent(event.startTime);\n        const duration = this.getEventDuration(event.startTime, event.endTime);\n        \n        modalContent.innerHTML = `\n            <div class=\"event-header border-b border-[var(--border-color)] pb-4\">\n                <h2 class=\"text-xl font-bold text-[var(--text-primary)] mb-2\">${event.title}</h2>\n                <p class=\"text-[var(--text-secondary)] mb-4\">${event.description}</p>\n                \n                <div class=\"grid grid-cols-1 md:grid-cols-3 gap-4 text-sm\">\n                    <div>\n                        <span class=\"text-[var(--text-muted)] block\">Fecha y hora</span>\n                        <span class=\"text-[var(--text-primary)] font-medium\">${new Date(event.startTime).toLocaleString()}</span>\n                        <span class=\"text-xs text-[var(--text-muted)] block\">${timeUntil}</span>\n                    </div>\n                    <div>\n                        <span class=\"text-[var(--text-muted)] block\">Duraci√≥n</span>\n                        <span class=\"text-[var(--text-primary)] font-medium\">${duration}</span>\n                    </div>\n                    <div>\n                        <span class=\"text-[var(--text-muted)] block\">Formato</span>\n                        <span class=\"text-[var(--text-primary)] font-medium\">${this.formatEventFormat(event.format)}</span>\n                    </div>\n                    <div>\n                        <span class=\"text-[var(--text-muted)] block\">Organizador</span>\n                        <span class=\"text-[var(--text-primary)] font-medium\">${event.hostName}</span>\n                    </div>\n                    <div>\n                        <span class=\"text-[var(--text-muted)] block\">Participantes</span>\n                        <span class=\"text-[var(--text-primary)] font-medium\">${event.currentParticipants}/${event.maxParticipants}</span>\n                    </div>\n                    <div>\n                        <span class=\"text-[var(--text-muted)] block\">Tipo</span>\n                        <span class=\"text-[var(--text-primary)] font-medium\">${this.formatEventType(event.type)}</span>\n                    </div>\n                </div>\n            </div>\n            \n            ${event.materials.length > 0 ? `\n                <div class=\"event-materials\">\n                    <h3 class=\"text-lg font-semibold mb-3\">Material de estudio</h3>\n                    <div class=\"space-y-2\">\n                        ${event.materials.map(material => \n                            `<div class=\"flex items-center space-x-2 p-2 bg-[var(--bg-input)] rounded-lg\">\n                                <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" class=\"text-[var(--bg-primary)]\">\n                                    <path d=\"M14 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V8z\"></path>\n                                    <polyline points=\"14,2 14,8 20,8\"></polyline>\n                                    <line x1=\"16\" y1=\"13\" x2=\"8\" y2=\"13\"></line>\n                                    <line x1=\"16\" y1=\"17\" x2=\"8\" y2=\"17\"></line>\n                                    <polyline points=\"10,9 9,9 8,9\"></polyline>\n                                </svg>\n                                <span class=\"text-sm text-[var(--text-secondary)]\">${material}</span>\n                            </div>`\n                        ).join('')}\n                    </div>\n                </div>\n            ` : ''}\n            \n            <div class=\"event-actions flex justify-between items-center pt-4 border-t border-[var(--border-color)]\">\n                <div class=\"flex space-x-3\">\n                    <button id=\"share-event-btn\" class=\"discord-button-secondary px-4 py-2 rounded-lg\">\n                        Compartir\n                    </button>\n                    <button id=\"add-calendar-btn\" class=\"discord-button-secondary px-4 py-2 rounded-lg\">\n                        A√±adir al calendario\n                    </button>\n                </div>\n                <div class=\"flex space-x-3\">\n                    <button id=\"close-event-btn\" class=\"discord-button-secondary px-4 py-2 rounded-lg\">\n                        Cerrar\n                    </button>\n                    <button id=\"join-event-btn\" class=\"discord-button-primary px-6 py-2 rounded-lg\">\n                        Unirse al evento\n                    </button>\n                </div>\n            </div>\n        `;\n        \n        const modal = await uiManager.showModal(modalContent, {\n            title: event.title,\n            size: 'large',\n            closable: true\n        });\n        \n        // Setup modal event listeners\n        const closeBtn = modalContent.querySelector('#close-event-btn');\n        if (closeBtn) {\n            closeBtn.addEventListener('click', () => uiManager.closeModal());\n        }\n        \n        const joinBtn = modalContent.querySelector('#join-event-btn');\n        if (joinBtn) {\n            joinBtn.addEventListener('click', () => {\n                this.joinEvent(eventId);\n                uiManager.closeModal();\n            });\n        }\n    }\n    \n    /**\n     * Join event\n     * @param {string} eventId - Event ID\n     */\n    joinEvent(eventId) {\n        const event = this.events.find(evt => evt.id === eventId);\n        if (!event) return;\n        \n        if (event.currentParticipants >= event.maxParticipants) {\n            uiManager.showNotification(\n                'Este evento est√° lleno',\n                'warning',\n                { duration: 3000 }\n            );\n            return;\n        }\n        \n        // Add user to event\n        event.currentParticipants++;\n        \n        // Update user stats\n        const userStats = getState('user.profile.stats', {});\n        userStats.eventsAttended = (userStats.eventsAttended || 0) + 1;\n        setState('user.profile.stats', userStats);\n        \n        // Add to user's events\n        const userEvents = getState('user.events', []);\n        userEvents.push(eventId);\n        setState('user.events', userEvents);\n        \n        uiManager.showNotification(\n            `Te has unido a \"${event.title}\"`,\n            'success',\n            { duration: 3000 }\n        );\n        \n        // Refresh events display\n        this.renderEvents();\n    }\n    \n    /**\n     * Start competency\n     * @param {string} competencyId - Competency ID\n     */\n    startCompetency(competencyId) {\n        const userProgress = getState('user.competencyProgress', {});\n        userProgress[competencyId] = {\n            startDate: Date.now(),\n            hoursCompleted: 0,\n            status: 'in_progress',\n            milestones: []\n        };\n        \n        setState('user.competencyProgress', userProgress);\n        \n        uiManager.showNotification(\n            'Competencia iniciada. ¬°Comienza tu camino de aprendizaje!',\n            'success',\n            { duration: 3000 }\n        );\n        \n        // Refresh competencies display\n        this.renderCompetencies('teoria');\n        this.renderCompetencies('practica');\n    }\n    \n    /**\n     * Start periodic updates\n     */\n    startPeriodicUpdates() {\n        this.updateInterval = setInterval(() => {\n            this.updateSocialStats();\n            this.checkForNotifications();\n        }, 60000); // Update every minute\n    }\n    \n    /**\n     * Update social statistics\n     */\n    updateSocialStats() {\n        // Update community member counts\n        // Update event participant counts\n        // Update competency completion rates\n        \n        // This would typically fetch fresh data from the server\n        console.log('üìä Social stats updated');\n    }\n    \n    /**\n     * Check for new notifications\n     */\n    checkForNotifications() {\n        // This would check for new social notifications\n        // New events, competency achievements, community updates, etc.\n    }\n    \n    // ==========================================\n    // UTILITY METHODS\n    // ==========================================\n    \n    /**\n     * Calculate competency progress\n     * @param {string} competencyId - Competency ID\n     * @returns {number} Progress percentage\n     */\n    calculateCompetencyProgress(competencyId) {\n        const userProgress = getState('user.competencyProgress', {});\n        const progress = userProgress[competencyId];\n        \n        if (!progress) return 0;\n        \n        const competency = this.findCompetencyById(competencyId);\n        if (!competency) return 0;\n        \n        const requiredHours = competency.requiredStudyHours || competency.requiredPracticeHours;\n        return Math.min(100, Math.round((progress.hoursCompleted / requiredHours) * 100));\n    }\n    \n    /**\n     * Find competency by ID\n     * @param {string} competencyId - Competency ID\n     * @returns {Object|null} Competency object\n     */\n    findCompetencyById(competencyId) {\n        const allCompetencies = [...this.competencies.teoria, ...this.competencies.practica];\n        return allCompetencies.find(comp => comp.id === competencyId) || null;\n    }\n    \n    /**\n     * Check if user can start competency\n     * @param {Object} competency - Competency object\n     * @returns {boolean}\n     */\n    canStartCompetency(competency) {\n        const userCompetencies = getState('user.competencies', []);\n        return competency.prerequisites.every(prereqId => userCompetencies.includes(prereqId));\n    }\n    \n    /**\n     * Get time until event\n     * @param {number} eventTime - Event timestamp\n     * @returns {string}\n     */\n    getTimeUntilEvent(eventTime) {\n        const now = Date.now();\n        const diff = eventTime - now;\n        \n        if (diff < 0) return 'Ya pas√≥';\n        \n        const days = Math.floor(diff / (24 * 60 * 60 * 1000));\n        const hours = Math.floor((diff % (24 * 60 * 60 * 1000)) / (60 * 60 * 1000));\n        const minutes = Math.floor((diff % (60 * 60 * 1000)) / (60 * 1000));\n        \n        if (days > 0) return `En ${days} d√≠as`;\n        if (hours > 0) return `En ${hours} horas`;\n        return `En ${minutes} minutos`;\n    }\n    \n    /**\n     * Get event duration\n     * @param {number} startTime - Start timestamp\n     * @param {number} endTime - End timestamp\n     * @returns {string}\n     */\n    getEventDuration(startTime, endTime) {\n        const diff = endTime - startTime;\n        const hours = Math.floor(diff / (60 * 60 * 1000));\n        const minutes = Math.floor((diff % (60 * 60 * 1000)) / (60 * 1000));\n        \n        if (hours > 0) {\n            return minutes > 0 ? `${hours}h ${minutes}m` : `${hours}h`;\n        }\n        return `${minutes}m`;\n    }\n    \n    /**\n     * Format competency level\n     * @param {string} level - Level\n     * @returns {string}\n     */\n    formatLevel(level) {\n        const levels = {\n            beginner: 'Principiante',\n            intermediate: 'Intermedio',\n            advanced: 'Avanzado',\n            expert: 'Experto'\n        };\n        return levels[level] || level;\n    }\n    \n    /**\n     * Get level icon\n     * @param {string} level - Level\n     * @returns {string}\n     */\n    getLevelIcon(level) {\n        const icons = {\n            beginner: 'üå±',\n            intermediate: 'üåø',\n            advanced: 'üå≥',\n            expert: 'üëë'\n        };\n        return icons[level] || 'üìö';\n    }\n    \n    /**\n     * Format category\n     * @param {string} category - Category\n     * @returns {string}\n     */\n    formatCategory(category) {\n        const categories = {\n            interpretation: 'Interpretaci√≥n',\n            history: 'Historia',\n            theology: 'Teolog√≠a',\n            leadership: 'Liderazgo',\n            mentorship: 'Mentor√≠a',\n            evangelism: 'Evangelismo'\n        };\n        return categories[category] || category;\n    }\n    \n    /**\n     * Format verification method\n     * @param {string} verification - Verification method\n     * @returns {string}\n     */\n    formatVerification(verification) {\n        const methods = {\n            peer_review: 'Revisi√≥n por pares',\n            assessment: 'Evaluaci√≥n',\n            mentor_review: 'Revisi√≥n de mentor',\n            observation: 'Observaci√≥n',\n            mentee_feedback: 'Retroalimentaci√≥n',\n            practical_demonstration: 'Demostraci√≥n pr√°ctica'\n        };\n        return methods[verification] || verification;\n    }\n    \n    /**\n     * Format event type\n     * @param {string} type - Event type\n     * @returns {string}\n     */\n    formatEventType(type) {\n        const types = {\n            study: 'Estudio',\n            prayer: 'Oraci√≥n',\n            worship: 'Adoraci√≥n',\n            fellowship: 'Comuni√≥n',\n            service: 'Servicio',\n            training: 'Capacitaci√≥n'\n        };\n        return types[type] || type;\n    }\n    \n    /**\n     * Format event format\n     * @param {string} format - Event format\n     * @returns {string}\n     */\n    formatEventFormat(format) {\n        const formats = {\n            online: 'En l√≠nea',\n            offline: 'Presencial',\n            hybrid: 'H√≠brido'\n        };\n        return formats[format] || format;\n    }\n    \n    /**\n     * Setup state subscriptions\n     */\n    setupStateSubscriptions() {\n        // Subscribe to user competency changes\n        subscribe('user.competencies', () => {\n            this.renderCompetencies('teoria');\n            this.renderCompetencies('practica');\n        });\n        \n        // Subscribe to user events changes\n        subscribe('user.events', () => {\n            this.renderEvents();\n        });\n    }\n    \n    // ==========================================\n    // PUBLIC API METHODS\n    // ==========================================\n    \n    /**\n     * Get system statistics\n     * @returns {Object}\n     */\n    getStats() {\n        return {\n            communities: this.communities.length,\n            groups: this.groups.length,\n            events: this.events.length,\n            competencies: {\n                teoria: this.competencies.teoria.length,\n                practica: this.competencies.practica.length\n            },\n            userProfile: this.userProfile ? this.userProfile.name : null,\n            isInitialized: this.isInitialized\n        };\n    }\n    \n    /**\n     * Export social data\n     * @returns {Object}\n     */\n    exportData() {\n        return {\n            userProfile: this.userProfile,\n            communities: this.communities,\n            groups: this.groups,\n            events: this.events,\n            competencies: this.competencies,\n            exported: Date.now()\n        };\n    }\n    \n    /**\n     * Debug method\n     */\n    debug() {\n        console.group('üë• Enhanced Social System Debug');\n        console.log('Statistics:', this.getStats());\n        console.log('User profile:', this.userProfile);\n        console.log('Communities:', this.communities);\n        console.log('Competencies:', this.competencies);\n        console.log('Events:', this.events);\n        console.groupEnd();\n    }\n}\n\n// ==========================================\n// CREATE AND EXPORT SOCIAL SYSTEM INSTANCE\n// ==========================================\n\nconst socialSystemEnhanced = new SocialSystemEnhanced();\n\nexport default socialSystemEnhanced;\nexport { SocialSystemEnhanced };"
